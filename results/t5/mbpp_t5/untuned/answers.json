{"code": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ","nl": "Write a python function to remove first and last occurrence of a given character from the string."}
{"code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result","nl": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"code": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n","nl": "Write a function to count the most common words in a dictionary."}
{"code": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ","nl": "Write a python function to find the volume of a triangular prism."}
{"code": "import re\ndef split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))","nl": "Write a function to split a string at lowercase letters."}
{"code": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')","nl": "Write a function to find sequences of lowercase letters joined with an underscore."}
{"code": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter","nl": "Write a function to find the perimeter of a square."}
{"code": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ","nl": "Write a function to remove characters from the first string which are present in the second string."}
{"code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ","nl": "Write a function to find whether a given array of integers contains any duplicate element."}
{"code": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False","nl": "Write a function to check if the given number is woodball or not."}
{"code": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)","nl": "Write a function to find m number of multiples of n."}
{"code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate","nl": "Write a function to find the first duplicate element in a given array of integers."}
{"code": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ","nl": "Write a python function to find the maximum sum of elements of list in a list of lists."}
{"code": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)","nl": "Write a function to convert the given binary number to its decimal equivalent."}
{"code": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ","nl": "Write a python function to find the product of non-repeated elements in a given array."}
{"code": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ","nl": "Write a function to check if the given tuple list has all k elements."}
{"code": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list","nl": "Write a python function to remove all digits from a list of strings."}
{"code": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","nl": "Write a python function to find binomial co-efficient."}
{"code": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1","nl": "Write a python function to find the element occurring odd number of times."}
{"code": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ","nl": "Write a python function to count all the substrings starting and ending with same characters."}
{"code": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result","nl": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm."}
{"code": "import math \ndef max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)","nl": "Write a python function to find the largest prime factor of a given number."}
{"code": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ","nl": "Write a python function to convert a decimal number to binary number."}
{"code": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ","nl": "Write a python function to find the missing number in a sorted array."}
{"code": "def find_rect_num(n):\n  return n*(n + 1) ","nl": "Write a function to find the n-th rectangular number."}
{"code": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ","nl": "Write a python function to find the nth digit in the proper fraction of two given numbers."}
{"code": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part","nl": "Write a function to sort a given mixed list of integers and strings."}
{"code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)","nl": "Write a function to find the division of first even and odd number of a given list."}
{"code": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")","nl": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different."}
{"code": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result","nl": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"code": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums","nl": "Write a function to filter even numbers using lambda function."}
{"code": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])","nl": "Write a python function to find the sum of repeated elements in a given array."}
{"code": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')","nl": "Write a function to find sequences of lowercase letters joined with an underscore using regex."}
{"code": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'","nl": "Write a function that matches a word at the beginning of a string."}
{"code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd","nl": "Write a function to find the gcd of the given array elements."}
{"code": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;","nl": "Write a python function to determine whether all the numbers are different from each other are not."}
{"code": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10","nl": "Write a python function to find the last digit when factorial of a divides factorial of b."}
{"code": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)","nl": "Write a python function to set all odd bits of a given number."}
{"code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ","nl": "Write a function to extract every first or specified element from a given two-dimensional list."}
{"code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)","nl": "Write a function to find the list with minimum length using lambda function."}
{"code": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False","nl": "Write a function to print check if the triangle is equilateral or not."}
{"code": "def parallelogram_area(b,h):\n  area=b*h\n  return area","nl": "Write a function to caluclate area of a parallelogram."}
{"code": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ","nl": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"code": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list","nl": "Write a function to sort the given array by using counting sort."}
{"code": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn","nl": "Write a function to find t-nth term of geometric series."}
{"code": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ","nl": "Write a python function to check if a given number is one less than twice its reverse."}
{"code": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ","nl": "Write a python function to find the largest number that can be formed with the given digits."}
{"code": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ","nl": "Write a python function to check whether the given two integers have opposite sign or not."}
{"code": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ","nl": "Write a function to find the nth octagonal number."}
{"code": "def max_len_sub( arr, n): \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max","nl": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array."}
{"code": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count","nl": "Write a python function to count number of substrings with the sum of digits equal to their length."}
{"code": "def smallest_num(xs):\n  return min(xs)\n","nl": "Write a python function to find smallest number in a list."}
{"code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ","nl": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks","nl": "Write a function to sort a list of tuples using lambda."}
{"code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total","nl": "Write a function of recursion list sum."}
{"code": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ","nl": "Write a python function to count positive numbers in a list."}
{"code": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ","nl": "Write a function to find the number of ways to partition a set of bell numbers."}
{"code": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","nl": "Write a python function to check whether the given array is monotonic or not."}
{"code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set","nl": "Write a function to check whether a list contains the given sublist or not."}
{"code": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")","nl": "Write a function to find whether all the given tuples have equal length or not."}
{"code": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums","nl": "Write a function to sort a list of elements using comb sort."}
{"code": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False","nl": "Write a python function to check whether the given number can be represented as difference of two squares or not."}
{"code": "import re\ndef multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))","nl": "Write a function to split the given string with multiple delimiters by using regex."}
{"code": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True","nl": "Write a function to check whether it follows the sequence given in the patterns array."}
{"code": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ","nl": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."}
{"code": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","nl": "Write a python function to count the number of squares in a rectangle."}
{"code": "def is_Diff(n): \n    return (n % 11 == 0) ","nl": "Write a python function to find the difference between sum of even and odd digits."}
{"code": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ","nl": "Write a python function to find number of integers with odd number of set bits."}
{"code": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False","nl": "Write a python function to check whether the length of the word is odd or not."}
{"code": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6","nl": "Write a function to find the nth tetrahedral number."}
{"code": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ","nl": "Write a function to zip the two given tuples."}
{"code": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume","nl": "Write a function to find the volume of a sphere."}
{"code": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)","nl": "Write a python function to find the character made by adding all the characters of the given string."}
{"code": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))","nl": "Write a function to find the n-th number in newman conway sequence."}
{"code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea","nl": "Write a function to find the surface area of a sphere."}
{"code": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1","nl": "Write a function to find nth centered hexagonal number."}
{"code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict","nl": "Write a function to merge three dictionaries into a single expression."}
{"code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count","nl": "Write a function to get the frequency of the elements in a list."}
{"code": "def closest_num(N):\n  return (N - 1)","nl": "Write a function to find the closest smaller number than n."}
{"code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max","nl": "Write a python function to find the length of the longest word."}
{"code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False","nl": "Write a function to check if a substring is present in a given list of string values."}
{"code": "def is_undulating(n): \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True","nl": "Write a function to check whether the given number is undulating or not."}
{"code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)","nl": "Write a function to calculate the value of 'a' to the power 'b'."}
{"code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ","nl": "Write a function to extract the index minimum value record from the given tuples."}
{"code": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ","nl": "Write a python function to find the minimum length of sublist."}
{"code": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x","nl": "Write a python function to find the number of divisors of a given integer."}
{"code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n","nl": "Write a function to find frequency count of list of lists."}
{"code": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ","nl": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"code": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ","nl": "Write a function to convert the given decimal number to its binary equivalent."}
{"code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i","nl": "Write a function to find the next smallest palindrome of a specified number."}
{"code": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]","nl": "Write a function to find the kth element in the given array."}
{"code": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))","nl": "Write a function to convert snake case string to camel case string."}
{"code": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","nl": "Write a function to find eulerian number a(n, m)."}
{"code": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n","nl": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"code": "def count(lst):   \n    return sum(lst) ","nl": "Write a python function to count true booleans in the given list."}
{"code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ","nl": "Write a function to add the given list to the given tuples."}
{"code": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ","nl": "Write a python function to count hexadecimal numbers for a given range."}
{"code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)","nl": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm."}
{"code": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ","nl": "Write a python function to find the count of rotations of a binary string with odd value."}
{"code": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ","nl": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values."}
{"code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result","nl": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item"}
{"code": "def perimeter(diameter,height) : \n    return 2*(diameter+height)  ","nl": "Write a python function to find the perimeter of a cylinder."}
{"code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False","nl": "Write a function to check if a string represents an integer or not."}
{"code": "from collections import Counter \ndef assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res)) ","nl": "Write a function to assign frequency to each tuple in the given tuple list."}
{"code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit","nl": "Write a function to check whether all dictionaries in a list are empty or not."}
{"code": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result","nl": "Write a function to convert a given tuple of positive integers into an integer."}
{"code": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res)) ","nl": "Write a function to convert all possible convertible elements in the list to float."}
{"code": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst","nl": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"code": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)","nl": "Write a python function to find the element that appears only once in a sorted array."}
{"code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max","nl": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)","nl": "Write a function to find the triplet with sum of the given array"}
{"code": "MAX = 3000 \ndef smartNumber(n): \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ","nl": "Write a function to find n\u2019th smart number."}
{"code": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)","nl": "Write a function to sum all amicable numbers from 1 to a specified number."}
{"code": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle","nl": "Write a function to get the angle of a complex number."}
{"code": "def find_length(string, n): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0","nl": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string."}
{"code": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum","nl": "Write a python function to find the sum of common divisors of two given numbers."}
{"code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)","nl": "Write a function to multiply two integers without using the * operator in python."}
{"code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t","nl": "Write a function to shortlist words that are longer than n from a given list of words."}
{"code": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True","nl": "Write a function to calculate magic square."}
{"code": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result","nl": "Write a function to find the item with maximum frequency in a given list."}
{"code": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string","nl": "Write a python function to reverse only the vowels of a given string."}
{"code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str","nl": "Write a function to convert tuple to a string."}
{"code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)","nl": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"code": "def check_last (arr,n,p): \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"\n      ","nl": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times."}
{"code": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ","nl": "Write a function to find the nth hexagonal number."}
{"code": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total","nl": "Write a function to calculate electricity bill."}
{"code": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)","nl": "Write a function to find the ration of zeroes in an array of integers."}
{"code": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True","nl": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not."}
{"code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter","nl": "Write a function to find the circumference of a circle."}
{"code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ","nl": "Write a function to extract elements that occur singly in the given tuple list."}
{"code": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums","nl": "Write a function to sort a list of elements using pancake sort."}
{"code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result","nl": "Write a function to count the same pair in three given lists."}
{"code": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ","nl": "Write a function to find number of lists present in the given tuple."}
{"code": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum","nl": "Write a python function to find the sum of absolute differences in all pairs of the given array."}
{"code": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ","nl": "Write a python function to find the maximum difference between any two elements in a given array."}
{"code": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n   return ord(str1[i])","nl": "Write a function to find the ascii value of total characters in a string."}
{"code": "def max_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]","nl": "Write a function to find the maximum total path sum in the given triangle."}
{"code": "def sum_digits_single(x) : \n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    ans = 0\n    while (ans * 10 + 9 <= x) : \n        ans = ans * 10 + 9  \n    return ans   \ndef sum_digits_twoparts(N) : \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A) ","nl": "Write a function to divide a number into two parts such that the sum of digits is maximum."}
{"code": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result","nl": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"code": "def does_Contain_B(a,b,c): \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False","nl": "Write a python function to find whether the given number is present in the infinite sequence or not."}
{"code": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1","nl": "Write a python function to check whether the given number is co-prime or not."}
{"code": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n","nl": "Write a function to sort the given array by using merge sort."}
{"code": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex","nl": "Write a function to find the vertex of a parabola."}
{"code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result","nl": "Write a function to extract every specified element from a given two dimensional list."}
{"code": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ","nl": "Write a python function to toggle all even bits of a given number."}
{"code": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result","nl": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"code": "from itertools import groupby\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]","nl": "Write a function to reflect the run-length encoding from a list."}
{"code": "def min_Ops(arr,n,k): \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res) ","nl": "Write a python function to find k number of operations required to make all elements equal."}
{"code": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season","nl": "Write a function to print the season for the given month and day."}
{"code": "def solution (a, b, n): \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ","nl": "Write a function to find x and y that satisfies ax + by = n."}
{"code": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result","nl": "Write a function to remove all elements from a given list present in another list."}
{"code": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)","nl": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)."}
{"code": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area","nl": "Write a function to calculate the area of a regular polygon."}
{"code": "import math \ndef divSum(n): \n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n            sum = (sum + i +math.floor(n / i)); \n        i += 1; \n    return sum; \ndef areEquivalent(num1,num2): \n    return divSum(num1) == divSum(num2); ","nl": "Write a python function to check whether the sum of divisors are same or not."}
{"code": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ","nl": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"code": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ","nl": "Write a python function to count the pairs with xor as an even number."}
{"code": "def next_Power_Of_2(n): \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count; ","nl": "Write a python function to find smallest power of 2 greater than or equal to n."}
{"code": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ","nl": "Write a python function to find the frequency of a number in a given array."}
{"code": "def get_pell(n): \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b ","nl": "Write a function to calculate the nth pell number."}
{"code": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ","nl": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter","nl": "Write a function to find the perimeter of a pentagon."}
{"code": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count","nl": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"code": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))","nl": "Write a function to remove everything except alphanumeric characters from a string."}
{"code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result","nl": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"code": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0","nl": "Write a function to verify validity of a string of parentheses."}
{"code": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter","nl": "Write a function to find the perimeter of a triangle."}
{"code": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ","nl": "Write a python function to find two distinct numbers such that their lcm lies within the given range."}
{"code": "import re\ndef string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')","nl": "Write a function to search some literals strings in a string."}
{"code": "def is_num_keith(x): \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x) ","nl": "Write a function to find if the given number is a keith number or not."}
{"code": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist","nl": "Write a function to calculate distance between two points using latitude and longitude."}
{"code": "def common_prefix_util(str1, str2): \n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\tresult += str1[i] \n\t\ti += 1\n\t\tj += 1\n\treturn (result) \ndef common_prefix (arr, n): \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix) ","nl": "Write a function to find the longest common prefix in the given set of strings."}
{"code": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","nl": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"code": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count","nl": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"code": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum","nl": "Write a function to find all the values in a list that are greater than a specified number."}
{"code": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus","nl": "Write a function to find the focus of a parabola."}
{"code": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')","nl": "Write a function to search some literals strings in a string by using regex."}
{"code": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","nl": "Write a function to find the longest common subsequence for the given two sequences."}
{"code": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;","nl": "Write a python function to check whether the given number can be represented by product of two squares or not."}
{"code": "def first_Missing_Positive(arr,n): \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)","nl": "Write a python function to find the first missing positive number."}
{"code": "def count_Intgral_Points(x1,y1,x2,y2): \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","nl": "Write a python function to count the number of integral co-ordinates that lie inside a square."}
{"code": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False","nl": "Write a function to check whether the given month name contains 30 days or not."}
{"code": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ","nl": "Write a python function to check whether a string has atleast one letter and one number."}
{"code": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ","nl": "Write a function to remove the duplicates from the given tuple."}
{"code": "def octal_To_Decimal(n):  \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value; ","nl": "Write a python function to convert octal number to decimal number."}
{"code": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res","nl": "Write a python function to find the first position of an element in a sorted array."}
{"code": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ","nl": "Write a function to remove all the tuples with length k."}
{"code": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n","nl": "Write a function to perform the exponentiation of the given two tuples."}
{"code": "import math\ndef largest_triangle(a,b): \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area ","nl": "Write a function to find the largest triangle that can be inscribed in an ellipse."}
{"code": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ","nl": "Write a python function to find highest power of 2 less than or equal to given number."}
{"code": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result","nl": "Write a function to find all index positions of the maximum values in a given list."}
{"code": "def chkList(lst): \n    return len(set(lst)) == 1","nl": "Write a python function to check whether the elements in a list are same or not."}
{"code": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2","nl": "Write a function to remove even characters in a string."}
{"code": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ","nl": "Write a python function to find the hamming distance between given two integers."}
{"code": "def count(s,c) : \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res ","nl": "Write a python function to count the occurrence of a given character in a string."}
{"code": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ","nl": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"code": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ","nl": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"code": "def find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]","nl": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions."}
{"code": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)","nl": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"code": "import heapq as hq\ndef heap_replace(heap,a):\n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap","nl": "Write a function to delete the smallest element from the given heap and then insert a new item."}
{"code": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)","nl": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"code": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count ","nl": "Write a python function to count numbers whose oth and nth bits are set."}
{"code": "import math  \ndef fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum","nl": "Write a python function to find the sum of fourth power of n natural numbers."}
{"code": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to perform the concatenation of two string tuples."}
{"code": "import math\ndef degree_radian(radian):\n degree = radian*(180/math.pi)\n return degree","nl": "Write a function to convert radians to degrees."}
{"code": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]","nl": "Write a function to decode a run-length encoded given list."}
{"code": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist ","nl": "Write a function to check if a nested list is a subset of another nested list."}
{"code": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'","nl": "Write a python function to find the first repeated character in a given string."}
{"code": "import math   \ndef min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1","nl": "Write a python function to find the minimum operations required to make two numbers equal."}
{"code": "\ndef extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res) ","nl": "Write a function to extract maximum and minimum k elements in the given tuple."}
{"code": "import re\ndef replace_max_specialchar(text,n):\n return (re.sub(\"[ ,.]\", \":\", text, n))","nl": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon."}
{"code": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even","nl": "Write a python function to find the first even number in a given list of numbers."}
{"code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ","nl": "Write a function to check if all the elements in tuple have same data type or not."}
{"code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1","nl": "Write a function to check for majority element in the given sorted array."}
{"code": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ","nl": "Write a python function to count set bits of a given number."}
{"code": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ","nl": "Write a python function to find the minimum element in a sorted and rotated array."}
{"code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result","nl": "Write a python function to remove the characters which have odd index values of a given string."}
{"code": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ","nl": "Write a function to find minimum of three numbers."}
{"code": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False","nl": "Write a python function to check whether all the bits are unset in the given range or not."}
{"code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr","nl": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2","nl": "Write a function to replace blank spaces with any character in a string."}
{"code": "def max_sum(tri, n): \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))","nl": "Write a function to find the maximum sum in the given right triangle of numbers."}
{"code": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest","nl": "Write a function to get the n largest items from a dataset."}
{"code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface","nl": "Write a function to find the lateral surface area of a cylinder."}
{"code": "def volume_cube(l):\n  volume = l * l * l\n  return volume","nl": "Write a function to find the volume of a cube."}
{"code": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ","nl": "Write a python function to set all even bits of a given number."}
{"code": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;","nl": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle."}
{"code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ","nl": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"code": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ","nl": "Write a python function to count number of non-empty substrings of a given string."}
{"code": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]","nl": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m."}
{"code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n","nl": "Write a function to replace the last element of the list with another list."}
{"code": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d","nl": "Write a function to generate a 3d array having each element as '*'."}
{"code": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total","nl": "Write a function to count total characters in a string."}
{"code": "def sort_on_occurence(lst): \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()]) ","nl": "Write a function to sort the given list based on the occurrence of first element of tuples."}
{"code": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ","nl": "Write a python function to find the next perfect square greater than a given number."}
{"code": "def max_sum(arr, n): \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum","nl": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array."}
{"code": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;","nl": "Write a function for computing square roots using the babylonian method."}
{"code": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]","nl": "Write a function to find the longest palindromic subsequence in the given string."}
{"code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ","nl": "Write a function to calculate the harmonic sum of n-1."}
{"code": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result","nl": "Write a function to find the intersection of two arrays using lambda function."}
{"code": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ","nl": "Write a python function to count the occcurences of an element in a tuple."}
{"code": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list","nl": "Write a function to insert an element before each element of a list."}
{"code": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ","nl": "Write a python function to convert complex numbers to polar coordinates."}
{"code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr","nl": "Write a python function to count integers from a given list."}
{"code": "import re\ndef words_ae(text):\n list = re.findall(\"[ae]\\w+\", text)\n return list","nl": "Write a function to find all words starting with 'a' or 'e' in a given string."}
{"code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n","nl": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr","nl": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"code": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)","nl": "Write a function to swap two numbers."}
{"code": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd","nl": "Write a function to find number of odd elements in the given list using lambda function."}
{"code": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to maximize the given two tuples."}
{"code": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)","nl": "Write a function to find the nth newman\u2013shanks\u2013williams prime number."}
{"code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to perform mathematical division operation across the given tuples."}
{"code": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]","nl": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"code": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d","nl": "Write a function to merge two dictionaries."}
{"code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age","nl": "Write a function to calculate a dog's age in dog's years."}
{"code": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]","nl": "Write a function to split a list for every nth element."}
{"code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA","nl": "Write a function to find the lateral surface area of a cube."}
{"code": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ","nl": "Write a python function to find the sum of squares of first n odd natural numbers."}
{"code": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ","nl": "Write a function to find the n'th star number."}
{"code": "def ascii_value(k):\n  ch=k\n  return ord(ch)","nl": "Write a function to find the ascii value of a character."}
{"code": "def sum_even_and_even_index(arr,n):  \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum","nl": "Write a python function to find the sum of even numbers at even positions."}
{"code": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ","nl": "Write a python function to find the sum of fifth power of first n even natural numbers."}
{"code": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ","nl": "Write a function to perfom the rear element extraction from list of tuples records."}
{"code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"code": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ","nl": "Write a python function to find sum of even index binomial coefficients."}
{"code": "import math as mt \ndef get_Position(a,n,m): \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1","nl": "Write a python function to find the position of the last removed element from the given array."}
{"code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume","nl": "Write a function to find the volume of a cylinder."}
{"code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result","nl": "Write a function to filter a dictionary based on values."}
{"code": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ","nl": "Write a function to find the element count that occurs before the record in the given tuple."}
{"code": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ","nl": "Write a function to find the nth decagonal number."}
{"code": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos","nl": "Write a function to search an element in the given array by using sequential search."}
{"code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True","nl": "Write a python function to check if the elements of a given list are unique or not."}
{"code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)","nl": "Write a function to substaract two lists using map and lambda function."}
{"code": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True","nl": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element","nl": "Write a function to check whether all items of a list are equal to a given string."}
{"code": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')","nl": "Write a function that matches a string that has an a followed by two to three 'b'."}
{"code": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far","nl": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times."}
{"code": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)","nl": "Write a python function to find the sum of squares of first n even natural numbers."}
{"code": "def modular_inverse(arr, N, P):\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element","nl": "Write a function to count array elements having modular inverse under given prime number p equal to itself."}
{"code": "def odd_Days(N): \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ","nl": "Write a python function to calculate the number of odd days in a given year."}
{"code": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)","nl": "Write a function to find the list of lists with maximum length."}
{"code": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]","nl": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors."}
{"code": "def find(n,m):  \n    q = n//m \n    return (q)","nl": "Write a python function to find quotient of two numbers."}
{"code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s","nl": "Write a function to find the third side of a right angled triangle."}
{"code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)","nl": "Write a function to find the maximum value in a given heterogeneous list."}
{"code": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)","nl": "Write a function to return the sum of all divisors of a number."}
{"code": "def get_Inv_Count(arr,n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ","nl": "Write a python function to count inversions in an array."}
{"code": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ","nl": "Write a function to flatten a given nested list structure."}
{"code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result","nl": "Write a function to find the nested list elements which are present in another list."}
{"code": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])","nl": "Write a function to calculate the maximum aggregate from the list of tuples."}
{"code": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ","nl": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits."}
{"code": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0","nl": "Write a function to find the depth of a dictionary."}
{"code": "def set_Bit_Number(n): \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)","nl": "Write a python function to find the most significant bit number which is also a set bit."}
{"code": "import sys \ndef solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True","nl": "Write a python function to check whether the count of inversion of two types are same or not."}
{"code": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ","nl": "Write a python function to find element at a given index after number of rotations."}
{"code": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()","nl": "Write a function to match two words from a list of words starting with letter 'p'."}
{"code": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]","nl": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i ."}
{"code": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon","nl": "Write a function to get a colon of a tuple."}
{"code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result","nl": "Write a function to find the specified number of largest products from two given lists."}
{"code": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ","nl": "Write a python function to find the maximum of two numbers."}
{"code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result","nl": "Write a function to convert a given string to a tuple."}
{"code": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ","nl": "Write a python function to set the left most unset bit."}
{"code": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume","nl": "Write a function to find the volume of a cone."}
{"code": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num ","nl": "Write a python function to print positive numbers in a list."}
{"code": "def max_sum_rectangular_grid(grid, n) : \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)","nl": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n."}
{"code": "def find_Max_Len_Even(str): \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ","nl": "Write a python function to find the first maximum length of even word."}
{"code": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ","nl": "Write a function to find the index of the last occurrence of a given number in a sorted array."}
{"code": "from itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: return [len(el), el[0]]\n            else: return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]","nl": "Write a function to reflect the modified run-length encoding from a list."}
{"code": "def max_volume (s): \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ","nl": "Write a python function to find the maximum volume of a cuboid with given sum of sides."}
{"code": "import re\ndef find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))","nl": "Write a function to find all five characters long word in the given string by using regex."}
{"code": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares","nl": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers."}
{"code": "def find_demlo(s): \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res \t","nl": "Write a function to find the demlo number for the given number."}
{"code": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result","nl": "Write a function to find all index positions of the minimum values in a given list."}
{"code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr","nl": "Write a function to re-arrange the given array in alternating positive and negative items."}
{"code": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ","nl": "Write a function to extract the sum of alternate chains of tuples."}
{"code": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;","nl": "Write a python function to find the minimum number of squares whose sum is equal to a given number."}
{"code": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ","nl": "Write a function to get the word with most number of occurrences in the given strings list."}
{"code": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False","nl": "Write a function to print check if the triangle is isosceles or not."}
{"code": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  return result","nl": "Write a function to rotate a given list by specified number of items to the left direction."}
{"code": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ","nl": "Write a python function to count negative numbers in a list."}
{"code": "import re\ndef find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))","nl": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"code": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ","nl": "Write a python function to count unset bits of a given number."}
{"code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict","nl": "Write a function to count character frequency of a given string."}
{"code": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ","nl": "Write a python function to sort a list according to the second element in sublist."}
{"code": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ","nl": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"code": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total","nl": "Write a function to find the sum of arithmetic progression."}
{"code": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False","nl": "Write a function to check whether the given month name contains 28 days or not."}
{"code": "import re\ndef text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'","nl": "Write a function that matches a word at the end of a string, with optional punctuation."}
{"code": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ","nl": "Write a python function to count the number of substrings with same first and last characters."}
{"code": "def find_Divisor(x,y):  \n    if (x==y): \n        return y \n    return 2","nl": "Write a python function to find the maximum occuring divisor in an interval."}
{"code": "def sum_three_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])","nl": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers."}
{"code": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)","nl": "Write a function to convert the given set into ordered tuples."}
{"code": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])","nl": "Write a function to find the smallest range that includes at-least one element from each of the given arrays."}
{"code": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)","nl": "Write a function to calculate the number of digits and letters in a string."}
{"code": "def count_Odd_Squares(n,m): \n    return int(m**0.5) - int((n-1)**0.5) ","nl": "Write a python function to find number of elements with odd factors in a given range."}
{"code": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result","nl": "Write a function to find the difference between two consecutive numbers in a given list."}
{"code": "def zigzag(n, k): \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)","nl": "Write a function to find entringer number e(n, k)."}
{"code": "def count_Squares(m,n): \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6","nl": "Write a python function to count the number of squares in a rectangle."}
{"code": "def bin_coff(n, r): \n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ","nl": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values."}
{"code": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ","nl": "Write a python function to check whether the given string is a binary string or not."}
{"code": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ","nl": "Write a python function to minimize the length of the string by removing occurrence of only one character."}
{"code": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1","nl": "Write a python function to find the first element occurring k times in a given array."}
{"code": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;","nl": "Write a python function to check whether all the characters in a given string are unique."}
{"code": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1","nl": "Write a function to remove a specified column from a given nested list."}
{"code": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn","nl": "Write a function to find t-nth term of arithemetic progression."}
{"code": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ","nl": "Write a python function to count the number of rectangles in a circle of radius r."}
{"code": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n","nl": "Write a function to find the third angle of a triangle using two angles."}
{"code": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ","nl": "Write a function to find the maximum element of all the given tuple records."}
{"code": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)","nl": "Write a function to find modulo division of two lists using map and lambda function."}
{"code": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ","nl": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"code": "def get_carol(n): \n\tresult = (2**n) - 1\n\treturn result * result - 2","nl": "Write a function to find the n\u2019th carol number."}
{"code": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty","nl": "Write a function to remove empty lists from a given list of lists."}
{"code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result","nl": "Write a python function to find the item with maximum occurrences in a given list."}
{"code": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ","nl": "Write a function to add the k elements to each element in the tuple."}
{"code": "def make_flip(ch): \n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t\tflip_count += 1\n\t\texpected = make_flip(expected) \n\treturn flip_count \ndef min_flip_to_make_string_alternate(str): \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","nl": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters."}
{"code": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count","nl": "Write a python function to count the number of digits of a given number."}
{"code": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","nl": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"code": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False","nl": "Write a function to check if a binary tree is balanced or not."}
{"code": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res) ","nl": "Write a function to repeat the given tuple n times."}
{"code": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA","nl": "Write a function to find the lateral surface area of cuboid"}
{"code": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort","nl": "Write a function to sort a tuple by its float element."}
{"code": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)","nl": "Write a function to find the smallest missing element in a sorted array."}
{"code": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result","nl": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"code": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume","nl": "Write a function to find the volume of a cuboid."}
{"code": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list","nl": "Write a function to print all permutations of a given string including duplicates."}
{"code": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)","nl": "Write a function to round the given number to the nearest multiple of a specific number."}
{"code": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)","nl": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value."}
{"code": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ","nl": "Write a python function to remove all occurrences of a character in a given string."}
{"code": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list","nl": "Write a python function to shift last element to first position in the given list."}
{"code": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA","nl": "Write a function to find the surface area of a cuboid."}
{"code": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n","nl": "Write a function to generate a two-dimensional array."}
{"code": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result","nl": "Write a function to sort a list of lists by a given index of the inner list."}
{"code": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1","nl": "Write a function to find the number of rotations in a circularly sorted array."}
{"code": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ","nl": "Write a python function to toggle all odd bits of a given number."}
{"code": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ","nl": "Write a python function to find the frequency of the smallest value in a given array."}
{"code": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)","nl": "Write a function to find the n'th perrin number using recursion."}
{"code": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap","nl": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string."}
{"code": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ","nl": "Write a python function to check whether the hexadecimal number is even or odd."}
{"code": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ","nl": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"code": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ","nl": "Write a function to find the n'th lucas number."}
{"code": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string","nl": "Write a function to insert a given string at the beginning of all items in a list."}
{"code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result","nl": "Write a function to convert more than one list to nested dictionary."}
{"code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]","nl": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)","nl": "Write a function to find the list with maximum length using lambda function."}
{"code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ","nl": "Write a function to check if given tuple is distinct or not."}
{"code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None","nl": "Write a python function to find the first non-repeated character in a given string."}
{"code": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ","nl": "Write a function to check whether the given string starts and ends with the same character or not using regex."}
{"code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median","nl": "Write a function to find the median of three specific numbers."}
{"code": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","nl": "Write a function to compute the sum of digits of each number of a given list."}
{"code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"code": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)","nl": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"code": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to perform index wise addition of tuple elements in the given two nested tuples."}
{"code": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ","nl": "Write a function to compute the value of ncr%p."}
{"code": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False","nl": "Write a function to check if a url is valid or not using regex."}
{"code": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ","nl": "Write a python function to find the minimum of two numbers."}
{"code": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False","nl": "Write a function to check whether an element exists within a tuple."}
{"code": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ","nl": "Write a python function to find the parity of a given number."}
{"code": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False","nl": "Write a function to create the next bigger number by rearranging the digits of a given number."}
{"code": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs","nl": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array."}
{"code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min","nl": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val","nl": "Write a function to find the minimum value in a given heterogeneous list."}
{"code": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))","nl": "Write a function to convert the given snake case string to camel case string by using regex."}
{"code": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l","nl": "Write a python function to remove odd numbers from a given list."}
{"code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result","nl": "Write a function to extract the nth element from a given list of tuples."}
{"code": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0","nl": "Write a python function to check whether the value exists in a sequence or not."}
{"code": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ","nl": "Write a python function to find a pair with highest product from a given array of integers."}
{"code": "MAX = 1000000\ndef breakSum(n): \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]","nl": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number."}
{"code": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ","nl": "Write a function to find common first element in given list of tuple."}
{"code": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList","nl": "Write a python function to find the sublist having maximum length."}
{"code": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum","nl": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"code": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum","nl": "Write a python function to find the cube sum of first n even natural numbers."}
{"code": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ","nl": "Write a function to concatenate each element of tuple by the delimiter."}
{"code": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ","nl": "Write a python function to find the average of cubes of first n natural numbers."}
{"code": "def get_maxgold(gold, m, n): \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ","nl": "Write a function to solve gold mine problem."}
{"code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ","nl": "Write a function to extract only the rear index element of each string in the given tuple."}
{"code": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr","nl": "Write a function to count the number of sublists containing a particular element."}
{"code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums","nl": "Write a function to filter odd numbers using lambda function."}
{"code": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)","nl": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."}
{"code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list","nl": "Write a function to sort the given array by using shell sort."}
{"code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"code": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix","nl": "Write a function to find the directrix of a parabola."}
{"code": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result","nl": "Write a function that takes two lists and returns true if they have at least one common element."}
{"code": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median","nl": "Write a function to find the median of a trapezium."}
{"code": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')","nl": "Write a function to check whether the entered number is greater than the elements of the given array."}
{"code": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n","nl": "Write a function that matches a string that has an a followed by one or more b's."}
{"code": "def last_Digit(n) :\n    return (n % 10) ","nl": "Write a python function to find the last digit of a given number."}
{"code": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num ","nl": "Write a python function to print negative numbers in a list."}
{"code": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2","nl": "Write a function to remove odd characters in a string."}
{"code": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ","nl": "Write a function to count bidirectional tuple pairs."}
{"code": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x","nl": "Write a function to convert a list of multiple integers into a single integer."}
{"code": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))","nl": "Write a function to find all adverbs and their positions in a given sentence."}
{"code": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea","nl": "Write a function to find the surface area of a cube."}
{"code": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)","nl": "Write a function to find the ration of positive numbers in an array of integers."}
{"code": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max","nl": "Write a python function to find the largest negative number from the given list."}
{"code": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ","nl": "Write a function to trim each tuple by k in the given tuple list."}
{"code": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ","nl": "Write a function to perform index wise multiplication of tuple elements in the given two tuples."}
{"code": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ","nl": "Write a python function to count the occurence of all elements of list in a tuple."}
{"code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums","nl": "Write a function to find cubes of individual elements in a list using lambda function."}
{"code": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum","nl": "Write a function to calculate the sum of perrin numbers."}
{"code": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ","nl": "Write a python function to check whether the triangle is valid or not if 3 points are given."}
{"code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result","nl": "Write a function to extract specified size of strings from a give list of string values."}
{"code": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))","nl": "Write a function to remove all whitespaces from the given string using regex."}
{"code": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None","nl": "Write a function that gives loss amount if the given amount has loss else return none."}
{"code": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ","nl": "Write a python function to find the sum of even factors of a number."}
{"code": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')","nl": "Write a function that matches a word containing 'z'."}
{"code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False","nl": "Write a function to check whether the given month number contains 31 days or not."}
{"code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result","nl": "Write a function to reverse strings in a given list of string values."}
{"code": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList","nl": "Write a python function to find the sublist having minimum length."}
{"code": "def rectangle_area(l,b):\n  area=l*b\n  return area","nl": "Write a function to find the area of a rectangle."}
{"code": "import re\ndef remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)","nl": "Write a function to remove uppercase substrings from a given string by using regex."}
{"code": "def Extract(lst): \n    return [item[0] for item in lst] ","nl": "Write a python function to get the first element of each sublist."}
{"code": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr","nl": "Write a python function to count the upper case characters in a given string."}
{"code": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result","nl": "Write a function to find all possible combinations of the elements of a given list."}
{"code": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far","nl": "Write a function to find the maximum product subarray of the given array."}
{"code": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result","nl": "Write a function to check if all values are same in a dictionary."}
{"code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1","nl": "Write a function to drop empty items from a given dictionary."}
{"code": "def find_peak_util(arr, low, high, n): \n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\telse: \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n) ","nl": "Write a function to find the peak element in the given array."}
{"code": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)","nl": "Write a python function to convert decimal number to octal number."}
{"code": "def max_product(arr, n ): \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)","nl": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array."}
{"code": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]","nl": "Write a function to find the maximum profit earned from a maximum of k stock transactions"}
{"code": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ","nl": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"code": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ","nl": "Write a python function to find remainder of array multiplication divided by n."}
{"code": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ","nl": "Write a python function to check whether the given list contains consecutive numbers or not."}
{"code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)","nl": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2","nl": "Write a function to replace characters in a string."}
{"code": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter","nl": "Write a function to sort counter by value."}
{"code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum","nl": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"code": "def is_lower(string):\n  return (string.lower())","nl": "Write a python function to convert the given string to lower case."}
{"code": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result","nl": "Write a function to remove lowercase substrings from a given string."}
{"code": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ","nl": "Write a python function to find the first digit of a given number."}
{"code": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch","nl": "Write a python function to find the maximum occurring character in a given string."}
{"code": "def is_subset_sum(set, n, sum):\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","nl": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"code": "import re \ndef match(text): \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ","nl": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"code": "def first_Factorial_Divisible_Number(x): \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ","nl": "Write a python function to find the first natural number whose factorial is divisible by x."}
{"code": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ","nl": "Write a function to remove the matching tuples from the given two tuples."}
{"code": "def is_palindrome(n) : \n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1","nl": "Write a function to find the largest palindromic number in the given array."}
{"code": "def nCr(n, r): \n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t\tanswer *= (n - r + i) \n\t\tanswer /= i \n\treturn answer \ndef binomial_probability(n, k, p): \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ","nl": "Write a function to compute binomial probability for the given number."}
{"code": "def sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup","nl": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"code": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area","nl": "Write a function to find the area of a pentagon."}
{"code": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ","nl": "Write a python function to find the frequency of the largest value in a given array."}
{"code": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ","nl": "Write a function to extract all the pairs which are symmetric in the given tuple list."}
{"code": "import math\ndef sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total","nl": "Write a function to find the sum of geometric progression series."}
{"code": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found","nl": "Write a function to search an element in the given array by using binary search."}
{"code": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons","nl": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates."}
{"code": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ","nl": "Write a function to convert the given binary tuple to integer."}
{"code": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)","nl": "Write a function to remove lowercase substrings from a given string by using regex."}
{"code": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums","nl": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"code": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA","nl": "Write a function to find the surface area of a cone."}
{"code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd","nl": "Write a python function to find gcd of two positive integers."}
{"code": "def diameter_circle(r):\n  diameter=2*r\n  return diameter","nl": "Write a function to find the diameter of a circle."}
{"code": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ","nl": "Write a function to concatenate all elements of the given list into a string."}
{"code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result","nl": "Write a python function to find common divisor between two numbers in a given pair."}
{"code": "def find(n,m):\n  r = n%m\n  return (r)","nl": "Write a python function to find remainder of two numbers."}
{"code": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result","nl": "Write a function to add consecutive numbers of a given list."}
{"code": "def sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum","nl": "Write a python function to find the cube sum of first n natural numbers."}
{"code": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A","nl": "Write a function to move all zeroes to the end of the given array."}
{"code": "def permutation_coefficient(n, k): \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ","nl": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"code": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ","nl": "Write a function to remove specific words from a given list."}
{"code": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2","nl": "Write a function to check if the common elements between two given lists are in the same order or not."}
{"code": "def average_Odd(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ","nl": "Write a python function to find the average of odd numbers till a given odd number."}
{"code": "def no_of_subsequences(arr, k): \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]","nl": "Write a function to find the number of subsequences having product smaller than k for the given non negative array."}