docstring,label,outputWrite a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch):     for i in range(len(s)):         if (s[i] == ch):             s = s[0 : i] + s[i + 1:]             break    for i in range(len(s) - 1,-1,-1):          if (s[i] == ch):             s = s[0 : i] + s[i + 1:]             break    return s ","import redef remove_first_last(text,char):  text = re.sub(r""([a-z])([A-Z])([A-Z])"", text,text)  return (text)"
Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):    result = sorted(M, key=sum)    return result","def sort_matrix(matrix):  res = matrix.sum()  return (res) "
Write a function to count the most common words in a dictionary.,"from collections import Counterdef count_common(words):  word_counts = Counter(words)  top_four = word_counts.most_common(4)  return (top_four)","def most_common_words(dict1):  res = {key: str(i) for i in dict1.items()}  return (res) "
Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) :     return ((l * b * h) / 2) ","def triangular_prism_volume(n):  res = 0  for i in range(n):      res += (i * i)  return (res) "
Write a function to split a string at lowercase letters.,"import redef split_lowerstring(text): return (re.findall('[a-z][^a-z]*', text))","import redef split_lowercase(text):  res = re.sub('[A-Z]', text)  return (res) "
Write a function to find sequences of lowercase letters joined with an underscore.,"import redef text_lowercase_underscore(text):        patterns = '^[a-z]+_[a-z]+$'        if re.search(patterns,  text):                return 'Found a match!'        else:                return('Not matched!')","def lower_case_sequence(str1):  res = [str1[0] for str1 in str1[1:]].join(' '))  return (res) "
Write a function to find the perimeter of a square.,"def square_perimeter(a):  perimeter=4*a  return perimeter","def perimeter_square(a,b,c):  perimeter = a * b  return perimeter"
Write a function to remove characters from the first string which are present in the second string.,"NO_OF_CHARS = 256def str_to_list(string): 	temp = [] 	for x in string: 		temp.append(x) 	return temp def lst_to_string(List): 	return ''.join(List) def get_char_count_array(string): 	count = [0] * NO_OF_CHARS 	for i in string: 		count[ord(i)] += 1	return count def remove_dirty_chars(string, second_string): 	count = get_char_count_array(second_string) 	ip_ind = 0	res_ind = 0	temp = '' 	str_list = str_to_list(string) 	while ip_ind != len(str_list): 		temp = str_list[ip_ind] 		if count[ord(temp)] == 0: 			str_list[res_ind] = str_list[ip_ind] 			res_ind += 1		ip_ind+=1	return lst_to_string(str_list[0:res_ind]) ","import redef remove_char(text):  res = re.sub(r""[A-Z]"", text)  return (res) "
Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):    nums_set = set(arraynums)        return len(arraynums) != len(nums_set)     ","def duplicate_element(arr,n):  res = True  for i in range(n):      res = False      res = True      res = False      res = True      res = False      res = True      res = False      res = True      res = True      res = False      res = True      res = False      res = False      res = (res) and"
Write a function to check if the given number is woodball or not.,"def is_woodall(x): 	if (x % 2 == 0): 		return False	if (x == 1): 		return True	x = x + 1 	p = 0	while (x % 2 == 0): 		x = x/2		p = p + 1		if (p == x): 			return True	return False","def check_woodball(n):  res = True  for i in range(n):      res = False  if (res == True):      res = True      return (res) "
Write a function to find m number of multiples of n.,"def multiples_of_num(m,n):     multiples_of_num= list(range(n,(m+1)*n, n))     return list(multiples_of_num)","def m_multi_mul(n,m):    m = 0    for i in range(m,n+1):        if (i % 2 == 0):        return i    return -1"
Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):    num_set = set()    no_duplicate = -1    for i in range(len(nums)):        if nums[i] in num_set:            return nums[i]        else:            num_set.add(nums[i])    return no_duplicate","def find_duplicate(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a python function to find the maximum sum of elements of list in a list of lists.,"def maximum_Sum(list1):     maxi = -100000    for x in list1:         sum = 0         for y in x:             sum+= y              maxi = max(sum,maxi)         return maxi ","def max_sum(list1):  res = [0 for i in list1 if i > 0]  return (res) "
Write a function to convert the given binary number to its decimal equivalent.,"def binary_to_decimal(binary):     binary1 = binary     decimal, i, n = 0, 0, 0    while(binary != 0):         dec = binary % 10        decimal = decimal + dec * pow(2, i)         binary = binary//10        i += 1    return (decimal)","def to_decimal(num):  result = int(num)  return result"
Write a python function to find the product of non-repeated elements in a given array.,"def find_Product(arr,n):     arr.sort()     prod = 1    for i in range(0,n,1):         if (arr[i - 1] != arr[i]):             prod = prod * arr[i]     return prod; ","def product_non_repeated(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to check if the given tuple list has all k elements.,"def check_k_elements(test_list, K):  res = True  for tup in test_list:    for ele in tup:      if ele != K:        res = False  return (res) ","def check_all(test_list, k):  res = all(test_list[k] for k in k if test_list[k] == test_list[k]])  return (res) "
Write a python function to remove all digits from a list of strings.,"import re  def remove(list):     pattern = '[0-9]'    list = [re.sub(pattern, '', i) for i in list]     return list","import redef remove_digits(str1):  res = re.sub('[A-Z]', r'\1_\2', r'\1_\2_\3_\4_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\"
Write a python function to find binomial co-efficient.,"def binomial_Coeff(n,k):     if k > n :        return 0    if k==0 or k ==n :         return 1     return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","def binomial_co_efficient(n):  res = [1 for i in range(n + 1)]  return (res) "
Write a python function to find the element occurring odd number of times.,"def get_Odd_Occurrence(arr,arr_size):       for i in range(0,arr_size):         count = 0        for j in range(0,arr_size):             if arr[i] == arr[j]:                 count+=1             if (count % 2 != 0):             return arr[i]         return -1","def odd_element(n):  if (n % 2 == 0):      return 1  else:      return 2"
Write a python function to count all the substrings starting and ending with same characters.,"def check_Equality(s):     return (ord(s[0]) == ord(s[len(s) - 1])); def count_Substring_With_Equal_Ends(s):     result = 0;     n = len(s);     for i in range(n):         for j in range(1,n-i+1):              if (check_Equality(s[i:i+j])):                 result+=1;     return result; ","import redef count_substring(s,n):    s = re.findall('[A-Z]',s,n)    return (s) "
Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"def func(nums, k):    import collections    d = collections.defaultdict(int)    for row in nums:        for i in row:            d[i] += 1    temp = []    import heapq    for key, v in d.items():        if len(temp) < k:            temp.append((v, key))            if len(temp) == k:                heapq.heapify(temp)        else:            if v > temp[0][0]:                heapq.heappop(temp)                heapq.heappush(temp, (v, key))    result = []    while temp:        v, key = heapq.heappop(temp)        result.append(key)    return result","def top_k_int(nums):  res = [0 for i in nums]  return (res) "
Write a python function to find the largest prime factor of a given number.,"import math def max_Prime_Factors (n):     maxPrime = -1     while n%2 == 0:         maxPrime = 2        n >>= 1        for i in range(3,int(math.sqrt(n))+1,2):         while n % i == 0:             maxPrime = i             n = n / i     if n > 2:         maxPrime = n      return int(maxPrime)","def largest_prime_factor(n):     i = 0;     for j in range(n + 1):         if (i % j == 0):         return i;         return i; "
Write a python function to convert a decimal number to binary number.,"def decimal_To_Binary(N):     B_Number = 0    cnt = 0    while (N != 0):         rem = N % 2        c = pow(10,cnt)          B_Number += rem*c          N //= 2         cnt += 1    return B_Number  ","def decimal_to_binary(n):  result = int(n)  return result"
Write a python function to find the missing number in a sorted array.,"def find_missing(ar,N):     l = 0    r = N - 1    while (l <= r):          mid = (l + r) / 2        mid= int (mid)         if (ar[mid] != mid + 1 and ar[mid - 1] == mid):             return (mid + 1)          elif (ar[mid] != mid + 1):             r = mid - 1         else:             l = mid + 1    return (-1) ","def find_missing(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to find the n-th rectangular number.,"def find_rect_num(n):  return n*(n + 1) ","def rectangular_n(n,r):  res = 0  for i in range(r):      res += (r * r)  return"
Write a python function to find the nth digit in the proper fraction of two given numbers.,"def find_Nth_Digit(p,q,N) :      while (N > 0) :         N -= 1;          p *= 10;          res = p // q;          p %= q;      return res;  ","def nth_digit(n):     n = n % 2     for i in range(1,n + 1):         if (n % i == 0):         return i     return -1"
Write a function to sort a given mixed list of integers and strings.,"def sort_mixed_list(mixed_list):    int_part = sorted([i for i in mixed_list if type(i) is int])    str_part = sorted([i for i in mixed_list if type(i) is str])    return int_part + str_part","def sort_int(nums,str):  res = sorted(nums, key = lambda x: x[0] == str[1]):  return (res) "
Write a function to find the division of first even and odd number of a given list.,"def div_even_odd(list1):    first_even = next((el for el in list1 if el%2==0),-1)    first_odd = next((el for el in list1 if el%2!=0),-1)    return (first_even/first_odd)","def div_odd(nums):    result = [0 for i in range(1, nums+1)]    return result"
Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"import heapqfrom collections import Counterdef rearange_string(S):    ctr = Counter(S)    heap = [(-value, key) for key, value in ctr.items()]    heapq.heapify(heap)    if (-heap[0][0]) * 2 > len(S) + 1:         return """"    ans = []    while len(heap) >= 2:        nct1, char1 = heapq.heappop(heap)        nct2, char2 = heapq.heappop(heap)        ans.extend([char1, char2])        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))    return """".join(ans) + (heap[0][1] if heap else """")","def check_letters(text):  res = False  for i in range(len(text)):      res = True  return (res) "
Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counterfrom itertools import chaindef freq_element(nums):  result = Counter(chain.from_iterable(nums))  return result","def find_frequency(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res) "
Write a function to filter even numbers using lambda function.,"def filter_evennumbers(nums): even_nums = list(filter(lambda x: x%2 == 0, nums)) return even_nums","def filter_even(nums):  res = lambda x: x % x == 0  return (res) "
Write a python function to find the sum of repeated elements in a given array.,"def find_Sum(arr,n):     return sum([x for x in arr if arr.count(x) > 1])","def sum_repeated(arr,n):  sum = 0  for i in range(n):      sum += arr[i]  return sum"
Write a function to find sequences of lowercase letters joined with an underscore using regex.,"import redef text_match(text):  patterns = '^[a-z]+_[a-z]+$'  if re.search(patterns,  text):    return ('Found a match!')  else:    return ('Not matched!')","import redef lower_case_words(text):  res = re.findall('[A-Z]', text)  return (res) "
Write a function that matches a word at the beginning of a string.,"import redef text_match_string(text):        patterns = '^\w+'        if re.search(patterns,  text):                return 'Found a match!'        else:                return 'Not matched!'","import redef match_word(text):  res = re.search(r""^[a-z0-9]+$"", text)  return (res) "
Write a function to find the gcd of the given array elements.,"def find_gcd(x, y): 	while(y): 		x, y = y, x % y 	return x def get_gcd(l):  num1 = l[0]  num2 = l[1]  gcd = find_gcd(num1, num2)  for i in range(2, len(l)):    gcd = find_gcd(gcd, l[i])  return gcd","def gcd(arr,n):  res = [0 for i in range(n)]  return (res) "
Write a python function to determine whether all the numbers are different from each other are not.,"def test_distinct(data):  if len(data) == len(set(data)):    return True  else:    return False;","def are_Different(nums,other):    if (all(nums == other)):        return True    return False"
Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B):     variable = 1    if (A == B):         return 1    elif ((B - A) >= 5):          return 0    else:           for i in range(A + 1,B + 1):             variable = (variable * (i % 10)) % 10        return variable % 10","def last_Digit(a,b):     result = 0    while (a * a <= b) :         result += (a * a)         result += (b * a)         if (result == b):         return result     return result"
Write a python function to set all odd bits of a given number.,"def odd_bit_set_number(n):    count = 0;res = 0;temp = n    while temp > 0:        if count % 2 == 0:            res |= (1 << count)        count += 1        temp >>= 1    return (n | res)","def set_odd_bits(n):     n = n % 2     for i in range(n + 1):         if (n % i == 0):         return True    return False"
Write a function to extract every first or specified element from a given two-dimensional list.,"def specified_element(nums, N):    result = [i[N] for i in nums]    return result    ","def extract_first(list1,2):  res = list1[0]  return (res) "
Write a function to find the list with minimum length using lambda function.,"def min_length_list(input_list):    min_length = min(len(x) for x in input_list )      min_list = min(input_list, key = lambda i: len(i))    return(min_length, min_list)","def min_length(list1,n):  res = list1.sort()  return (res) "
Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):  if x == y == z:	   return True  else:     return False","def is_Equilateral(a,b,c):  res = True  if (a == b):      return False  else:      return False"
Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):  area=b*h  return area","def area_caluclate(a,b,c):  area = a * b  return area"
Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):  if (str[0] == str[-1]):      return (""Equal"")   else:      return (""Not Equal"") ","import redef check_first_last(text):  res = re.search(r""[A-Z]"", text)  return (res) "
Write a function to sort the given array by using counting sort.,"def counting_sort(my_list):    max_value = 0    for i in range(len(my_list)):        if my_list[i] > max_value:            max_value = my_list[i]    buckets = [0] * (max_value + 1)    for i in my_list:        buckets[i] += 1    i = 0    for j in range(max_value + 1):         for a in range(buckets[j]):             my_list[i] = j             i += 1    return my_list","def sort_array(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to find t-nth term of geometric series.,"import mathdef tn_gp(a,n,r):  tn = a * (math.pow(r, n - 1))  return tn","def geometric_t_nth(n):  t = 0  for i in range(n):      if (i == 0):      t = i + 1      return t"
Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):        rev_num = 0    while (num > 0):          rev_num = (rev_num * 10 + num % 10)         num = num // 10      return rev_num  def check(n):        return (2 * rev(n) == n + 1)  ","def check_Less_Than_One_Less(n):     if (n < 1):         return False    return True"
Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) :     arr.sort(reverse = True)     num = arr[0]     for i in range(1,n) :         num = num * 10 + arr[i]     return num ","def max_num(n):     n = 0    for i in range(n):         if (n % i == 0):         return i     return -1"
Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y):     return ((x ^ y) < 0); ","def check_opposite_sign(test_list, n):  res = all(x == n for x in test_list if x == n) and (x == n) and (x == n) and (x =="
Write a function to find the nth octagonal number.,"def is_octagonal(n): 	return 3 * n * n - 2 * n ","def octagonal_number(n):    octagonal_number = 0    for i in range(n):        octagonal_number += i        octagonal_number"
Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"def max_len_sub( arr, n): 	mls=[] 	max = 0	for i in range(n): 		mls.append(1) 	for i in range(n): 		for j in range(i): 			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 				mls[i] = mls[j] + 1	for i in range(n): 		if (max < mls[i]): 			max = mls[i] 	return max","def max_length(arr,n):  res = 0  for i in range(n):      res += arr[i]  return (res) "
Write a python function to count number of substrings with the sum of digits equal to their length.,"from collections import defaultdictdef count_Substrings(s,n):    count,sum = 0,0    mp = defaultdict(lambda : 0)    mp[0] += 1    for i in range(n):        sum += ord(s[i]) - ord('0')        count += mp[sum - (i + 1)]        mp[sum - (i + 1)] += 1    return count","import mathdef count_substring(s,n):    count = math.sqrt(math.log10(n) / 2)    return count"
Write a python function to find smallest number in a list.,def smallest_num(xs):  return min(xs),"def find_smallest_number(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res)"
Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):  temp = [abs(b - a) for a, b in test_list]  res = max(temp)  return (res) ","def max_difference(test_list, n):  res = max(test_list[0] - 1, n)  return (res) "
Write a function to sort a list of tuples using lambda.,"def subject_marks(subjectmarks):#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) subjectmarks.sort(key = lambda x: x[1]) return subjectmarks","def sort_tuples(test_list):  res = sorted(test_list, key = lambda x: x[0] <= y[1]):  return (res) "
Write a function of recursion list sum.,"def recursive_list_sum(data_list):	total = 0	for element in data_list:		if type(element) == type([]):			total = total + recursive_list_sum(element)		else:			total = total + element	return total","def recursion_sum(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a python function to count positive numbers in a list.,"def pos_count(list):  pos_count= 0  for num in list:     if num >= 0:       pos_count += 1  return pos_count ","def count_positive(nums):    count = 0    for i in range(0,nums.count(i)):        count += 1    for j in range(i + 1,nums.count(i) - 1) :        count += 1        if (count % i == 0):            count += 1        count += 1    return count"
Write a function to find the number of ways to partition a set of bell numbers.,"def bell_number(n):       bell = [[0 for i in range(n+1)] for j in range(n+1)]     bell[0][0] = 1    for i in range(1, n+1):         bell[i][0] = bell[i-1][i-1]          for j in range(1, i+1):             bell[i][j] = bell[i-1][j-1] + bell[i][j-1]       return bell[n][0] ","def partition_bell(bells):  res = [bells[0] for bells in bells]  return (res) "
Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A):     return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","def is_monotonic(arr):  res = True  if arr[0] == arr[1] :      res = False  return (res) "
Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):	sub_set = False	if s == []:		sub_set = True	elif s == l:		sub_set = True	elif len(s) > len(l):		sub_set = False	else:		for i in range(len(l)):			if l[i] == s[0]:				n = 1				while (n < len(s)) and (l[i+n] == s[n]):					n += 1								if n == len(s):					sub_set = True	return sub_set","def contains_list(list1,sublist):  res = list1.issubset(sublist)  return (res) "
Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input, k):  flag = 1  for tuple in Input:    if len(tuple) != k:      flag = 0      break  return flagdef get_equal(Input, k):  if find_equal_tuple(Input, k) == 1:    return (""All tuples have same length"")  else:    return (""All tuples do not have same length"")","def equal_length(test_tup):  res = all(test_tup == test_tup)  return (res) "
Write a function to sort a list of elements using comb sort.,"def comb_sort(nums):    shrink_fact = 1.3    gaps = len(nums)    swapped = True    i = 0    while gaps > 1 or swapped:        gaps = int(float(gaps) / shrink_fact)        swapped = False        i = 0        while gaps + i < len(nums):            if nums[i] > nums[i+gaps]:                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]                swapped = True            i += 1    return nums","def sort_list(list1):  res = list(map(lambda x: x[0] == x[1]), list1))  return (res) "
Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n):     if (n % 4 != 2):         return True    return False","def is_difference(n):     if (n % 2 == 0):         return True    return False"
Write a function to split the given string with multiple delimiters by using regex.,"import redef multiple_split(text):  return (re.split('; |, |\*|\n',text))","import redef split_string(text):  res = re.sub(r""([a-z0-9])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])"
Write a function to check whether it follows the sequence given in the patterns array.,"def is_samepatterns(colors, patterns):        if len(colors) != len(patterns):        return False        sdict = {}    pset = set()    sset = set()        for i in range(len(patterns)):        pset.add(patterns[i])        sset.add(colors[i])        if patterns[i] not in sdict.keys():            sdict[patterns[i]] = []        keys = sdict[patterns[i]]        keys.append(colors[i])        sdict[patterns[i]] = keys    if len(pset) != len(sset):        return False       for values in sdict.values():        for i in range(len(values) - 1):            if values[i] != values[i+1]:                return False    return True","def check_sequence(arr,n):  res = True  for i in range(n):      res = False  return (res) "
Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]  return (str(res)) ","def divisible_by_k(test_list, k):  res = [test_list[k] for test_list in test_list if test_list[k] == test_list[k] ]  return (res) "
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):    if(n < m):        temp = m        m = n        n = temp    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","def count_squares(r,n):     if (r > n):         return 1    return 2"
Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n):     return (n % 11 == 0) ","def difference_odd(n):     sum = 0    for i in range(1,n):         sum += i         if (sum % i == 0"
Write a python function to find number of integers with odd number of set bits.,"def count_With_Odd_SetBits(n):     if (n % 2 != 0):         return (n + 1) / 2    count = bin(n).count('1')     ans = n / 2    if (count % 2 != 0):         ans += 1    return ans ","def odd_set_bits(n, bits):    if (n % bits == 0):        return 1    return 2"
Write a python function to check whether the length of the word is odd or not.,"def word_len(s):     s = s.split(' ')       for word in s:            if len(word)%2!=0:             return True          else:          return False","def is_odd(word):  if (word[0] % 2 == 0):    return True  else:    return False"
Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 	return (n * (n + 1) * (n + 2)) / 6","def tetrahedral_number(n):  n = n + 1  for i in range(n):      if (n % i == 0):      n = i + 1      return n"
Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):  res = []  for i, j in enumerate(test_tup1):    res.append((j, test_tup2[i % len(test_tup2)]))   return (res) ","def zip_tuples(test_tup1, test_tup2):  res = zip(test_tup1, test_tup2)  return (res) "
Write a function to find the volume of a sphere.,"import mathdef volume_sphere(r):  volume=(4/3)*math.pi*r*r*r  return volume","def volume(s,a):  volume = a * a  return volume"
Write a python function to find the character made by adding all the characters of the given string.,"def get_Char(strr):      summ = 0    for i in range(len(strr)):         summ += (ord(strr[i]) - ord('a') + 1)      if (summ % 26 == 0):         return ord('z')     else:         summ = summ % 26        return chr(ord('a') + summ - 1)","import redef add_char(text):  text = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])(["
Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 	if n == 1 or n == 2: 		return 1	else: 		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","def find_N_th_conway(n,m):  n = m + 1  for i in range(m):      if (n == m):      return i  else:      return -1"
Write a function to find the surface area of a sphere.,"import mathdef surfacearea_sphere(r):  surfacearea=4*math.pi*r*r  return surfacearea","def surface_area(sphere):  area = sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere))))  return area"
Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):  return 3 * n * (n - 1) + 1","def find_North_Hexagonal(n):    n = n + 1    for i in range(n):        if (n % i == 0):        return i    return -1"
Write a function to merge three dictionaries into a single expression.,"import collections as ctdef merge_dictionaries_three(dict1,dict2, dict3):    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))    return merged_dict","def merge_dict(test_list, d):  res = dict(test_list)  return (res) "
Write a function to get the frequency of the elements in a list.,"import collectionsdef freq_count(list1):  freq_count= collections.Counter(list1)  return freq_count","def get_frequency(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res) "
Write a function to find the closest smaller number than n.,"def closest_num(N):  return (N - 1)","def closest_smaller(n,n):     if (n < 0):         return -1    return -1"
Write a python function to find the length of the longest word.,"def len_log(list1):    max=len(list1[0])    for i in list1:        if len(i)>max:            max=len(i)    return max","def longest_word_length(n):     if (n > 0 and n < 0 and n < 0 and n < 0) :         return 1    return 2"
Write a function to check if a substring is present in a given list of string values.,"def find_substring(str1, sub_str):   if any(sub_str in s for s in str1):       return True   return False","def check_substring(text1,text2):  res = True  for i in range(len(text1)):      res = False  return (res) "
Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 	if (len(n) <= 2): 		return False	for i in range(2, len(n)): 		if (n[i - 2] != n[i]): 			return False	return True","def undulating_num(n):  res = True  for i in range(n):      res = False  if (res == True):      res = True      return (res) "
Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):	if b==0:		return 1	elif a==0:		return 0	elif b==1:		return a	else:		return a*power(a,b-1)","def power_b(a,b):  res = 0  for i in range(a + b):      res += (res * (a + b) * (b + 1))  return (res) "
Write a function to extract the index minimum value record from the given tuples.,"from operator import itemgetter def index_minimum(test_list):  res = min(test_list, key = itemgetter(1))[0]  return (res) ","def extract_min_value(test_tup):  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup]  return (res) "
Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):      minLength = min(len(x) for x in lst )    return minLength ","def min_length(sublist):  res = [0 for i in range(len(sublist))]  return (res) "
Write a python function to find the number of divisors of a given integer.,"def divisor(n):  for i in range(n):    x = len([i for i in range(1,n+1) if not n % i])  return x","def divisors_num(n):     divisors = 0    for i in range(n):         divisors += 1        if (divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divis[i"
Write a function to find frequency count of list of lists.,"def frequency_lists(list1):    list1 = [item for sublist in list1 for item in sublist]    dic_data = {}    for num in list1:        if num in dic_data.keys():            dic_data[num] += 1        else:            key = num            value = 1            dic_data[key] = value    return dic_data","def frequency_count(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res) "
Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):      total = 1    for x in numbers:        total *= x      return total/len(numbers) ","def multiply_list(nums,n):    result = [0 for i in nums if i % i == 0]    return result"
Write a function to convert the given decimal number to its binary equivalent.,"def decimal_to_binary(n):     return bin(n).replace(""0b"","""") ","def decimal_to_binary(n):  result = (n * n) / 2  return result"
Write a function to find the next smallest palindrome of a specified number.,"import sysdef next_smallest_palindrome(num):    numstr = str(num)    for i in range(num+1,sys.maxsize):        if str(i) == str(i)[::-1]:            return i","def next_palindrome(n):  res = [1 for i in range(n+1)]  return (res) "
Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):  for i in range(n):    for j in range(0, n-i-1):      if arr[j] > arr[j+1]:        arr[j], arr[j+1] == arr[j+1], arr[j]  return arr[k-1]","def find_kth(arr,n):  res = [i for i in arr if i[i] == arr[i] ]  return (res) "
Write a function to convert snake case string to camel case string.,"def snake_to_camel(word):        import re        return ''.join(x.capitalize() or '_' for x in word.split('_'))","import redef snake_case(str):  return re.sub('([A-Z])([A-Z])', r'\1_\2', r'\1_\2', r'\1_\2', r'\1_\2', r'\1_\2_\2', r'\1_\2_\2', r'\1_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2',"
"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 	if (m >= n or n == 0): 		return 0 	if (m == 0): 		return 1 	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def find_eulerian(n,m):     i = 0;if(i > n) return i; i = i + 1;     return i; "
Write a function to sort each sublist of strings in a given list of lists using lambda function.,"def sort_sublists(input_list):    result = [sorted(x, key = lambda x:x[0]) for x in input_list]     return result","def sort_list(test_list):  res = sorted(test_list, key = lambda x: x[0] == x[1] for x in test_list if x[1] == x[1]):      res = res  return (res) "
Write a python function to count true booleans in the given list.,"def count(lst):       return sum(lst) ","def count_bool(test_list):  res = 0  for i in test_list:      res += 1  return (res)"
Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):  res = tuple(list(test_tup) + test_list)  return (res) ","def add_list(test_list):  res = [test_list[0] for test_list in test_list]  return (res) "
Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :      count = 0;      for i in range(L,R + 1) :         if (i >= 10 and i <= 15) :             count += 1;          elif (i > 15) :             k = i;              while (k != 0) :                  if (k % 16 >= 10) :                     count += 1;                  k = k // 16;      return count;  ","def count_hex(range1,range2):  res = 0  for i in range1:      res += i  return (res) "
Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapqdef merge_sorted_list(num1,num2,num3):  num1=sorted(num1)  num2=sorted(num2)  num3=sorted(num3)  result = heapq.merge(num1,num2,num3)  return list(result)","def merge_input(input, m, n):  res = [(key, m, n) for key, m in zip(input, m)]  return (res) "
Write a python function to find the count of rotations of a binary string with odd value.,"def odd_Equivalent(s,n):     count=0    for i in range(0,n):         if (s[i] == '1'):             count = count + 1    return count ","def count_Rotations(str1,str2):  count = 0  while count < odd:      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1      count += 1  count += 1      count += 1      count += 1      count += 1      count += 1"
Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"def extract_missing(test_list, strt_val, stop_val):  res = []  for sub in test_list:    if sub[0] > strt_val:      res.append((strt_val, sub[0]))      strt_val = sub[1]    if strt_val < stop_val:      res.append((strt_val, stop_val))  return (res) ","def extract_ranges(list1):  res = list1[0]  return (res) "
Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"def common_in_nested_lists(nestedlist):    result = list(set.intersection(*map(set, nestedlist)))    return result","def common_elements(list1):  res = [(item[0] for item in list1 if item[1] == list1[1]])  return (res) "
Write a python function to find the perimeter of a cylinder.,"def perimeter(diameter,height) :     return 2*(diameter+height)  ","def perimeter_cylinder(a,b,c):  perimeter = a * b  return perimeter"
Write a function to check if a string represents an integer or not.,"def check_integer(text): text = text.strip() if len(text) < 1:    return None else:     if all(text[i] in ""0123456789"" for i in range(len(text))):          return True     elif (text[0] in ""+-"") and \         all(text[i] in ""0123456789"" for i in range(1,len(text))):         return True     else:        return False","def is_integer(str):  res = True  return (res) "
Write a function to assign frequency to each tuple in the given tuple list.,"from collections import Counter def assign_freq(test_list):  res = [(*key, val) for key, val in Counter(test_list).items()]  return (str(res)) ","def assign_frequency(test_list, frequency):  res = tuple(test_list)  return (res) "
Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1): empty_dit=all(not d for d in list1) return empty_dit","def check_list_empty(list1):  res = list(map(lambda x: (x[0] == x[1] for x in list1 if x[0] == x[1])))  return (res) "
Write a function to convert a given tuple of positive integers into an integer.,"def tuple_to_int(nums):    result = int(''.join(map(str,nums)))    return result","def int_to_int(test_tup):  res = tuple(map(int, test_tup))  return (res) "
Write a function to convert all possible convertible elements in the list to float.,"def list_to_float(test_list):  res = []  for tup in test_list:    temp = []    for ele in tup:      if ele.isalpha():        temp.append(ele)      else:        temp.append(float(ele))    res.append((temp[0],temp[1]))   return (str(res)) ","def convert_list(list1):  res = list1[0]  return (res) "
[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"def string_to_list(string):     lst = list(string.split("" ""))     return lst","import redef convert_list(text):  res = re.findall('[a-z0-9]+', text)  return (res) "
Write a python function to find the element that appears only once in a sorted array.,"def search(arr,n) :    XOR = 0    for i in range(n) :        XOR = XOR ^ arr[i]    return (XOR)","def find_element(arr,n):  res = [i for i in range(n + 1)]  return (res) "
Write a function to find the maximum product from the pairs of tuples within a given list.,"def max_product_tuple(list1):    result_max = max([abs(x * y) for x, y in list1] )    return result_max","def max_product(test_list):  res = max(test_list[0] for test_list in test_list if test_list[1] > test_list[2]):      res = max(res)  return (res) "
Write a function to find the triplet with sum of the given array,"def check_triplet(A, n, sum, count):    if count == 3 and sum == 0:        return True    if count == 3 or n == 0 or sum < 0:        return False    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\           check_triplet(A, n - 1, sum, count)","def sum_triplet(arr,n):  sum = arr[n - 1]  return sum"
Write a function to find n’th smart number.,"MAX = 3000 def smartNumber(n): 	primes = [0] * MAX 	result = [] 	for i in range(2, MAX): 		if (primes[i] == 0): 			primes[i] = 1 			j = i * 2 			while (j < MAX): 				primes[j] -= 1 				if ( (primes[j] + 3) == 0): 					result.append(j) 				j = j + i 	result.sort() 	return result[n - 1] ","def find_Smart_Number(n,smart_num):  n = smart_num + 1  for i in range(smart_num + 1):      if (n % i == 0):      return n  else:      return -1"
Write a function to sum all amicable numbers from 1 to a specified number.,"def amicable_numbers_sum(limit):    if not isinstance(limit, int):        return ""Input is not an integer!""    if limit < 1:        return ""Input must be bigger than 0!""    amicables = set()    for num in range(2, limit+1):        if num in amicables:            continue        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])        if num == sum_fact2 and num != sum_fact:            amicables.add(num)            amicables.add(sum_fact2)    return sum(amicables)","def sum_amicable_numbers(n):  sum_amicable_numbers = [1 for i in range(n + 1)]  return sum_amicable_numbers"
Write a function to get the angle of a complex number.,"import cmathdef angle_complex(a,b):  cn=complex(a,b)  angle=cmath.phase(a+b)  return angle","def angle_complex(n):  angle = n * 2  return angle"
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string, n): 	current_sum = 0	max_sum = 0	for i in range(n): 		current_sum += (1 if string[i] == '0' else -1) 		if current_sum < 0: 			current_sum = 0		max_sum = max(current_sum, max_sum) 	return max_sum if max_sum else 0","def max_difference(text):  res = max(text, 0, -1)  return (res) "
Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b):     sum = 0    for i in range (1,min(a,b)):         if (a % i == 0 and b % i == 0):             sum += i     return sum","def common_divisors(nums):    sum = 0    for i in range(0,nums.count(i)):        sum += sum * i        if (sum % i == 0):        return sum    return sum"
Write a function to multiply two integers without using the * operator in python.,"def multiply_int(x, y):    if y < 0:        return -multiply_int(x, -y)    elif y == 0:        return 0    elif y == 1:        return x    else:        return x + multiply_int(x, y - 1)","def multiply_two(nums,n):  res = [1 for i in range(n)]  return (res) "
Write a function to shortlist words that are longer than n from a given list of words.,"def long_words(n, str):    word_len = []    txt = str.split("" "")    for x in txt:        if len(x) > n:            word_len.append(x)    return word_len	","def shortlist_longer_than_n(words,n):  res = [(n - 1) for i in words if i>= n]  return (res) "
Write a function to calculate magic square.,"def magic_square_test(my_matrix):    iSize = len(my_matrix[0])    sum_list = []    sum_list.extend([sum (lines) for lines in my_matrix])       for col in range(iSize):        sum_list.append(sum(row[col] for row in my_matrix))    result1 = 0    for i in range(0,iSize):        result1 +=my_matrix[i][i]    sum_list.append(result1)          result2 = 0    for i in range(iSize-1,-1,-1):        result2 +=my_matrix[i][i]    sum_list.append(result2)    if len(set(sum_list))>1:        return False    return True","def magic_square(n):    m = 0    for i in range(n):        m = m + i        if (m == 0):        return m"
Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdictdef max_occurrences(nums):    dict = defaultdict(int)    for i in nums:        dict[i] += 1    result = max(dict.items(), key=lambda x: x[1])     return result","def max_frequency(list1):  res = [item for item in list1 if item[0] > max_frequency]  return (res) "
Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):	vowels = """"	for char in str1:		if char in ""aeiouAEIOU"":			vowels += char	result_string = """"	for char in str1:		if char in ""aeiouAEIOU"":			result_string += vowels[-1]			vowels = vowels[:-1]		else:			result_string += char	return result_string","def reverse_vowels(text):  res ='' * text  return (res) "
Write a function to convert tuple to a string.,"def tup_string(tup1):  str =  ''.join(tup1)  return str","def tuple_to_string(test_tup):  res = tuple(test_tup)  return (res) "
Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):  sum_negativenum = list(filter(lambda nums:nums<0,nums))  return sum(sum_negativenum)","def sum_Negative_Numbers(nums):  sum = sum + nums  return sum"
Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p):     _sum = 0    for i in range(n):         _sum = _sum + arr[i]     if p == 1:         if _sum % 2 == 0:             return ""ODD""        else:             return ""EVEN""    return ""EVEN""      ","def last_element_odd(arr,n):  res = False  if (arr[n] % n == 0):      res = True  return (res) "
Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 	return n*(2*n - 1) ","def hexagonal_number(n):    n = n + 1    for i in range(n):        if (n % i == 0):        return"
Write a function to calculate electricity bill.,"def cal_electbill(units): if(units < 50):    amount = units * 2.60    surcharge = 25 elif(units <= 100):    amount = 130 + ((units - 50) * 3.25)    surcharge = 35 elif(units <= 200):    amount = 130 + 162.50 + ((units - 100) * 5.26)    surcharge = 45 else:    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)    surcharge = 75 total = amount + surcharge return total","def electricity_bill(n):    electricity = 0    for i in range(n):        electricity += i    if electricity >= 0:        electricity += i        else:        electricity += i        electricity += i    if electricity >= 0:        electricity += i        else:            electricity += i            electricity += i    if electricity >= 0:        return "
Write a function to find the ration of zeroes in an array of integers.,"from array import arraydef zero_count(nums):    n = len(nums)    n1 = 0    for x in nums:        if x == 0:            n1 += 1        else:          None    return round(n1/n,2)","def ration_zero(arr,n):  res = [0 for i in range(n)]  return (res) "
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n):     if (n % 2 == 1):         return False    else:         return True","def is_Sum_Of_Powers(n):     sum = 0    for i in range(n + 1):         if (n % i == 0):         return True    return False"
Write a function to find the circumference of a circle.,"def circle_circumference(r):  perimeter=2*3.1415*r  return perimeter","def circle_circumference(a,b,c):  circumference = a*b  return circumference"
Write a function to extract elements that occur singly in the given tuple list.,"def extract_singly(test_list):  res = []  temp = set()  for inner in test_list:    for ele in inner:      if not ele in temp:        temp.add(ele)        res.append(ele)  return (res) ","def extract_elements(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):    arr_len = len(nums)    while arr_len > 1:        mi = nums.index(max(nums[0:arr_len]))        nums = nums[mi::-1] + nums[mi+1:len(nums)]        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]        arr_len -= 1    return nums","def pancake_sort(list1):  res = list1.sort()  return (res) "
Write a function to count the same pair in three given lists.,"def count_samepair(list1,list2,list3):    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))    return result","def count_same_pair(test_list, test_list):  res = 0  for i in range(len(test_list)):      res += 1  return (res) "
Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 	if isinstance(Input, list): 		return 1	else: 		return len(Input) ","def find_list(test_tup):  res = 0  for i in range(len(test_tup)):      res += 1  return (res) "
Write a python function to find the sum of absolute differences in all pairs of the given array.,"def sum_Pairs(arr,n):     sum = 0    for i in range(n - 1,-1,-1):         sum += i*arr[i] - (n-1-i) * arr[i]     return sum","def sum_difference(arr,n):  sum_difference = 0  for i in range(n):      sum_difference += arr[i]  return sum_difference"
Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr,n):     minEle = arr[0]     maxEle = arr[0]     for i in range(1, n):         minEle = min(minEle,arr[i])         maxEle = max(maxEle,arr[i])     return (maxEle - minEle) ","def max_difference(arr,n):     result = 0    for i in range(n):         result += arr[i]     return result"
Write a function to find the ascii value of total characters in a string.,"def ascii_value_string(str1):  for i in range(len(str1)):   return ord(str1[i])","import redef total_char(text):  total_char = re.findall('[A-Z]', text)  return total_char"
Write a function to find the maximum total path sum in the given triangle.,"def max_path_sum(tri, m, n): 	for i in range(m-1, -1, -1): 		for j in range(i+1): 			if (tri[i+1][j] > tri[i+1][j+1]): 				tri[i][j] += tri[i+1][j] 			else: 				tri[i][j] += tri[i+1][j+1] 	return tri[0][0]","def max_path_sum(test_tup):  res = max(test_tup[0] for test_tup[1] for test_tup[2] for test_tup[1] for test_tup[2] for test_tup[1] for test_tup[2] for test_tup[2] for test_tup[1] for test_tup[2] in test_tup[1]):      res += test_tup[2]      res += test_tup[1]  return (res) "
Write a function to divide a number into two parts such that the sum of digits is maximum.,"def sum_digits_single(x) :     ans = 0    while x :         ans += x % 10        x //= 10      return ans def closest(x) :     ans = 0    while (ans * 10 + 9 <= x) :         ans = ans * 10 + 9      return ans   def sum_digits_twoparts(N) :     A = closest(N)      return sum_digits_single(A) + sum_digits_single(N - A) ","def div_num(n):  res = 0  for i in range(1,n+1):      res += (res * i)  return (res) "
Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 	dp = [1 for i in range(n)] 	for i in range(n): 		for j in range(i): 			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 				dp[i] = max(dp[i], dp[j]+1) 	result = 1	for i in range(n): 		if (result < dp[i]): 			result = dp[i] 	return result","def longest_subsequence(arr,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a python function to find whether the given number is present in the infinite sequence or not.,"def does_Contain_B(a,b,c):     if (a == b):         return True    if ((b - a) * c > 0 and (b - a) % c == 0):         return True    return False","def is_Infinite_Sequence(n):     if (n % 2 == 0):         return True    return False"
Write a python function to check whether the given number is co-prime or not.,"def gcd(p,q):    while q != 0:        p, q = q,p%q    return pdef is_coprime(x,y):    return gcd(x,y) == 1","def co_prime(n):     if (n % 2 == 0):         return True    return False"
Write a function to sort the given array by using merge sort.,"def merge(a,b):    c = []    while len(a) != 0 and len(b) != 0:        if a[0] < b[0]:            c.append(a[0])            a.remove(a[0])        else:            c.append(b[0])            b.remove(b[0])    if len(a) == 0:        c += b    else:        c += a    return cdef merge_sort(x):    if len(x) == 0 or len(x) == 1:        return x    else:        middle = len(x)//2        a = merge_sort(x[:middle])        b = merge_sort(x[middle:])        return merge(a,b)","def sort_array(arr,n):  res = [arr[0] for arr in arr]  return (res) "
Write a function to find the vertex of a parabola.,"def parabola_vertex(a, b, c):   vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))  return vertex","def parabola_vertex(a,b,c):  return (a*b)"
Write a function to extract every specified element from a given two dimensional list.,"def specified_element(nums, N):    result = [i[N] for i in nums]    return result","def extract_element(test_list, n):  res = [test_list[0] for test_list in n]  return (res) "
Write a python function to toggle all even bits of a given number.,"def even_bit_toggle_number(n) :     res = 0; count = 0; temp = n     while (temp > 0) :             if (count % 2 == 1) :             res = res | (1 << count)              count = count + 1        temp >>= 1     return n ^ res ","def toggle_even_bits(n):     if (n % 2 == 0):         return True    return False"
Write a function to convert a tuple of string values to a tuple of integer values.,"def tuple_int_str(tuple_str):    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)    return result","def convert_tuple(test_tup):  res = tuple(map(int, test_tup))  return (res) "
Write a function to reflect the run-length encoding from a list.,"from itertools import groupbydef encode_list(list1):    return [[len(list(group)), key] for key, group in groupby(list1)]","def run_length(list):  res = [len(list) for i in list if i[i] == '0'] else '0'  return (res) "
Write a python function to find k number of operations required to make all elements equal.,"def min_Ops(arr,n,k):     max1 = max(arr)     res = 0    for i in range(0,n):          if ((max1 - arr[i]) % k != 0):             return -1         else:             res += (max1 - arr[i]) / k     return int(res) ","def check_equal(arr,n):     k = 0;     for i in range(n):         if (arr[i] == arr[i]):         return 1;     return 2; "
Write a function to print the season for the given month and day.,"def month_season(month,days): if month in ('January', 'February', 'March'):	 season = 'winter' elif month in ('April', 'May', 'June'):	 season = 'spring' elif month in ('July', 'August', 'September'):	 season = 'summer' else:	 season = 'autumn' if (month == 'March') and (days > 19):	 season = 'spring' elif (month == 'June') and (days > 20):	 season = 'summer' elif (month == 'September') and (days > 21):	 season = 'autumn' elif (month == 'October') and (days > 21):	 season = 'autumn' elif (month == 'November') and (days > 21):	 season = 'autumn' elif (month == 'December') and (days > 20):	 season = 'winter' return season","def season(month,day):  season = season.season(month,day)  return season"
Write a function to find x and y that satisfies ax + by = n.,"def solution (a, b, n): 	i = 0	while i * a <= n: 		if (n - (i * a)) % b == 0: 			return (""x = "",i ,"", y = "", 			int((n - (i * a)) / b)) 			return 0		i = i + 1	return (""No solution"") ","def find_x_y(x,y,n):  x, y = (x + y) / 2  return (x, y)"
Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):    result = [x for x in list1 if x not in list2]    return result","def remove_list(list1):  res = list1.remove(list1)  return (res) "
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):  if n < 1:    return 0  else:    return n + sum_series(n - 2)","def sum_positive_int(n,n):    sum = 0    for i in range(0,n-1):        sum += (sum * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1)"
Write a function to calculate the area of a regular polygon.,"from math import tan, pidef area_polygon(s,l):  area = s * (l ** 2) / (4 * tan(pi / s))  return area","def area_regular_polygon(a,b,c):  area = a*b*c  return area"
Write a python function to check whether the sum of divisors are same or not.,"import math def divSum(n):     sum = 1;     i = 2;     while(i * i <= n):         if (n % i == 0):             sum = (sum + i +math.floor(n / i));         i += 1;     return sum; def areEquivalent(num1,num2):     return divSum(num1) == divSum(num2); ","def sum_Divisors_Same(n,a):    sum = 0    for i in range(1,n):        if (a == n):        return True    return False"
Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"def count_char_position(str1):     count_chars = 0    for i in range(len(str1)):        if ((i == ord(str1[i]) - ord('A')) or             (i == ord(str1[i]) - ord('a'))):             count_chars += 1    return count_chars ","def count_char(text,n):  count = 0  for i in range(n):      count += 1  return count"
Write a python function to count the pairs with xor as an even number.,"def find_even_Pair(A,N):     evenPair = 0    for i in range(0,N):         for j in range(i+1,N):             if ((A[i] ^ A[j]) % 2 == 0):                 evenPair+=1    return evenPair; ","def xor_even(nums):  count = 0  for i in range(len(nums)):      count += 1  return count"
Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n):     count = 0;     if (n and not(n & (n - 1))):         return n       while( n != 0):         n >>= 1        count += 1    return 1 << count; ","def find_Min_Power(n):     power = 2 * n     for i in range(i + 1, n + 1):         power *= i         if (power <= power):         power *= i         power = power * i         power = power * i         power = power * i         power = power * i         power = power * i         power = power * i         power = power * i         power = power         power = power * power     power = power         power = power * i         power = power * i         power *= power         power = power * power         power *= power         power *= power         power *= power "
Write a python function to find the frequency of a number in a given array.,"def frequency(a,x):     count = 0      for i in a:         if i == x: count += 1    return count ","def find_frequency(arr,n):  res = [0 for i in range(n+1)]  return (res) "
Write a function to calculate the nth pell number.,"def get_pell(n): 	if (n <= 2): 		return n 	a = 1	b = 2	for i in range(3, n+1): 		c = 2 * b + a 		a = b 		b = c 	return b ","def pell_number(n):    pell_number = 0    for i in range(n):        pell_number += i        if (pell_number % 2 == 0):        return pell_number    return pell_number"
Write a function to find sum of the numbers in a list between the indices of a specified range.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                    sum_range = 0                                                                                                                                                                                                             for i in range(m, n+1, 1):                                                                                                                                                                                                sum_range += list1[i]                                                                                                                                                                                                      return sum_range   ","def sum_range(nums,n):    sum = 0    for i in range(n):        sum += sum + i    for j in range(n + 1,n + 1):        sum += sum * j        if (sum % j == 0):        return sum"
Write a function to find the perimeter of a pentagon.,"import mathdef perimeter_pentagon(a):  perimeter=(5*a)  return perimeter","def perimeter_pentagon(pentagon):  perimeter = pentagon.perimeter(pentagon.perimeter(pentagon.perimeter(pentagon.perimeter))  perimeter.perimeter(perimeter)), perimeter.perimeter(perimeter)"
Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"def count_occurance(s):  count=0  for i in range(len(s)):    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):      count = count + 1  return count","def occurence_std(str1):  res ='std'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  res = 'Found a occurence.'  return (res)"
Write a function to remove everything except alphanumeric characters from a string.,"import redef remove_splchar(text):  pattern = re.compile('[\W_]+') return (pattern.sub('', text))","import redef remove_alphanumeric(text):  text = re.sub('[A-Z]', text)  return (text)"
Write a function to group a sequence of key-value pairs into a dictionary of lists.,"def group_keyvalue(l):    result = {}    for k, v in l:         result.setdefault(k, []).append(v)    return result","def group_list(test_list):  res = {key: test_list[0] for key, test_list in test_list.items() if key not in res.items() else None}  return (res) "
Write a function to verify validity of a string of parentheses.,"def is_valid_parenthese( str1):        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}        for parenthese in str1:            if parenthese in pchar:                stack.append(parenthese)            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:                return False        return len(stack) == 0","import redef check_parentheses(text):  res = re.search(r""^[a-z0-9]+$"", text)  return (res) "
Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):  perimeter=a+b+c  return perimeter","def perimeter_triangle(a,b,c):  perimeter = a * b  return perimeter"
Write a python function to find two distinct numbers such that their lcm lies within the given range.,"def answer(L,R):     if (2 * L <= R):         return (L ,2*L)    else:         return (-1) ","def lcm_lies(n,r):  res = [1 for i in range(r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+"
Write a function to search some literals strings in a string.,"import redef string_literals(patterns,text):  for pattern in patterns:     if re.search(pattern,  text):       return ('Matched!')     else:       return ('Not Matched!')","import redef search_literals(text):  res = re.findall('[a-z]+', text)  return (res) "
Write a function to find if the given number is a keith number or not.,"def is_num_keith(x): 	terms = [] 	temp = x 	n = 0 	while (temp > 0): 		terms.append(temp % 10) 		temp = int(temp / 10) 		n+=1 	terms.reverse() 	next_term = 0 	i = n 	while (next_term < x): 		next_term = 0 		for j in range(1,n+1): 			next_term += terms[i - j] 		terms.append(next_term) 		i+=1 	return (next_term == x) ","def is_keith(n):  res = False  for i in range(n+1):      res = True  return (res) "
Write a function to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acosdef distance_lat_long(slat,slon,elat,elon): dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon)) return dist","def distance_of_two(x,y,z):  distance = x * y  return distance"
Write a function to find the longest common prefix in the given set of strings.,"def common_prefix_util(str1, str2): 	result = """"; 	n1 = len(str1) 	n2 = len(str2) 	i = 0	j = 0	while i <= n1 - 1 and j <= n2 - 1: 		if (str1[i] != str2[j]): 			break		result += str1[i] 		i += 1		j += 1	return (result) def common_prefix (arr, n): 	prefix = arr[0] 	for i in range (1, n): 		prefix = common_prefix_util(prefix, arr[i]) 	return (prefix) ","def longest_common_prefix(test_list):  res = [len(test_list) - 1]  return (res) "
"Write a function to find uppercase, lowercase, special character and numeric values using regex.","import redef find_character(string):  uppercase_characters = re.findall(r""[A-Z]"", string)   lowercase_characters = re.findall(r""[a-z]"", string)   numerical_characters = re.findall(r""[0-9]"", string)   special_characters = re.findall(r""[, .!?]"", string)   return uppercase_characters, lowercase_characters, numerical_characters, special_characters","def find_uppercase(test_str, test_str):  res = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z]), test_str, test_str)  res = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])[0-Z])[0-Z])[A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([0-Z])([0-9])([A-Z])([A-Z])([A-Z])"
Write a function to count all the distinct pairs having a difference of k in any array.,"def count_pairs(arr, n, k):  count=0;  for i in range(0,n):    for j in range(i+1, n):      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:        count += 1  return count","def count_distinct(arr,k):  res = 0  for i in range(len(arr)):      res += 1  return (res) "
Write a function to find all the values in a list that are greater than a specified number.,"def greater_specificnum(list,num): greater_specificnum=all(x >= num for x in list) return greater_specificnum","def greater_than_num(nums,n):  res = [i for i in range(n + 1)]  return (res) "
Write a function to find the focus of a parabola.,"def parabola_focus(a, b, c):   focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))  return focus","def parabola_focus(a,b,c):  return (a + b)"
Write a function to search some literals strings in a string by using regex.,"import redef check_literals(text, patterns):  for pattern in patterns:    if re.search(pattern,  text):        return ('Matched!')    else:        return ('Not Matched!')","import redef search_literals(text):  res = re.search(r""^[a-z0-9]+$"", text)  return (res) "
Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n):     if m == 0 or n == 0:        return 0     elif X[m-1] == Y[n-1]:        return 1 + longest_common_subsequence(X, Y, m-1, n-1)     else:        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","def longest_common_subsequence(test_list, n):  res = max(test_list, n)  return (res) "
Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):    for i in range(2,(n) + 1):        if (i*i < (n+1)):            for j in range(2,n + 1):                if ((i*i*j*j) == n):                    return True;    return False;","def check_Product(n):     n = n * n     for i in range(1,n + 1):         if (n % i == 0):         return False    return True"
Write a python function to find the first missing positive number.,"def first_Missing_Positive(arr,n):     ptr = 0    for i in range(n):        if arr[i] == 1:            ptr = 1            break    if ptr == 0:        return(1)    for i in range(n):        if arr[i] <= 0 or arr[i] > n:            arr[i] = 1    for i in range(n):        arr[(arr[i] - 1) % n] += n    for i in range(n):        if arr[i] <= n:            return(i + 1)    return(n + 1)","def find_Missing_Positive(n):     i = 0    for i in range(n):         if (i == 0 or i == 0 or i == 0 or i == 0):         return i     return -1"
Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2):     return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def count_co_ordinates(n):     co-ordinates = 0    for i in range(n):         co-ordinates += 1        if (c-ordinates[i] == c-ordinates[i]):             co-ordinates += 1            co-ordinates += 1            co-ordinates += 1    return"
Write a function to check whether the given month name contains 30 days or not.,"def check_monthnumber(monthname3):  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":    return True  else:    return False","def check_monthname(monthname):  if(monthname[0] == 'T' or monthname[1] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T') or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T"
Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str):     flag_l = False    flag_n = False    for i in str:         if i.isalpha():             flag_l = True          if i.isdigit():             flag_n = True    return flag_l and flag_n ","import redef check_letter(text):  res = re.search(r""[A-Z]"", text)  return (res) "
Write a function to remove the duplicates from the given tuple.,"def remove_tuple(test_tup):  res = tuple(set(test_tup))  return (res) ","def remove_duplicates(test_tup):  res = tuple(test_tup)  return (res) "
Write a python function to convert octal number to decimal number.,"def octal_To_Decimal(n):      num = n;     dec_value = 0;     base = 1;     temp = num;     while (temp):         last_digit = temp % 10;         temp = int(temp / 10);         dec_value += last_digit*base;         base = base * 8;     return dec_value; ","def octal_to_decimal(octal,decimal):  octal_to_decimal = octal * decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal))))))))  return octal_to_decimal"
Write a python function to find the first position of an element in a sorted array.,"def first(arr,x,n):     low = 0    high = n - 1    res = -1      while (low <= high):        mid = (low + high) // 2         if arr[mid] > x:            high = mid - 1        elif arr[mid] < x:            low = mid + 1        else:            res = mid            high = mid - 1    return res","def find_first_position(arr,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):  res = [ele for ele in test_list if len(ele) != K]  return (res) ","def remove_tuples(test_tup, k):  res = [test_tup[0] for test_tup in zip(test_tup[1:], test_tup[2:])]  return (res) "
Write a function to perform the exponentiation of the given two tuples.,"def find_exponentio(test_tup1, test_tup2):  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))  return (res)","def exponentiation(test_tup1, test_tup2):  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup2 in zip(test_tup1[0], test_tup2[1] for test_tup2 in zip(test_tup2[1], test_tup2[1]))]  return (res) "
Write a function to find the largest triangle that can be inscribed in an ellipse.,"import mathdef largest_triangle(a,b):     if (a < 0 or b < 0):         return -1     area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);      return area ","def max_triangle(a,b,c):  res = 0  for i in range(a,b+c):      res += 1  return (res) "
Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n):     res = 0;     for i in range(n, 0, -1):          if ((i & (i - 1)) == 0):             res = i;             break;          return res; ","def highest_power(n):     result = 0    while (n <= n):         result += 1        result += 1        result += 1        result += 1        if (result >= n):         return result"
Write a function to find all index positions of the maximum values in a given list.,"def position_max(list1):    max_val = max(list1)    max_result = [i for i, j in enumerate(list1) if j == max_val]    return max_result","def max_positions(list1):  res = [0 for i in list1 if i > 0]  return (res) "
Write a python function to check whether the elements in a list are same or not.,"def chkList(lst):     return len(set(lst)) == 1","def check_same(list1,list2):  res = all(map(lambda x: x == list1[0] for x in list2 if x == list1[1]):     "
Write a function to remove even characters in a string.,"def remove_even(str1): str2 = '' for i in range(1, len(str1) + 1):    if(i % 2 != 0):        str2 = str2 + str1[i - 1] return str2","import redef remove_even_char(text):  text = re.sub('[A-Z]', text)  return (text)"
Write a python function to find the hamming distance between given two integers.,"def hamming_Distance(n1,n2) :     x = n1 ^ n2      setBits = 0    while (x > 0) :         setBits += x & 1        x >>= 1    return setBits  ","def hamming_distance(arr,n):  res = 0  for i in range(n):      res += arr[i]  return (res) "
Write a python function to count the occurrence of a given character in a string.,"def count(s,c) :     res = 0     for i in range(len(s)) :         if (s[i] == c):             res = res + 1    return res ","def count_char(text,char):  count = 0  for i in text:      count += 1      count += 1  return count"
Write a function to find the inversions of tuple elements in the given tuple list.,"def inversion_elements(test_tup):  res = tuple(list(map(lambda x: ~x, list(test_tup))))  return (res) ","def inversions(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))  return (res) ","def adjacent_element(test_tup):  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup]  return (res) "
Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"def find_longest_repeating_subseq(str): 	n = len(str) 	dp = [[0 for k in range(n+1)] for l in range(n+1)] 	for i in range(1, n+1): 		for j in range(1, n+1): 			if (str[i-1] == str[j-1] and i != j): 				dp[i][j] = 1 + dp[i-1][j-1] 			else: 				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 	return dp[n][n]","def longest_repeater_subsequence(str1,str2):  res = 0  for i in range(len(str1)):      res += 1  return (res) "
Write a function to check the given decimal with a precision of 2 by using regex.,"import redef is_decimal(num):  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")  result = num_fetch.search(num)  return bool(result)","def check_decimal(decimal):  result = (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal)))))))))))) ) )"
Write a function to delete the smallest element from the given heap and then insert a new item.,"import heapq as hqdef heap_replace(heap,a):  hq.heapify(heap)  hq.heapreplace(heap, a)  return heap","def delete_smallest(heap,key):  res = [(key, heap[key]) for key in heap if key == key]])  return (res) "
"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","import redef is_allowed_specific_char(string):    get_char = re.compile(r'[^a-zA-Z0-9.]')    string = get_char.search(string)    return not bool(string)","import redef check_string_contains_only_characters(text):  res = re.search(r""[A-Z]"", text)  return (res) "
Write a python function to count numbers whose oth and nth bits are set.,"def count_Num(n):     if (n == 1):         return 1    count = pow(2,n - 2)     return count ","def count_Odd_Nth_Bits(n,o,n):  count = 0  for i in range(n+1,n+1):      count += 1  return count"
Write a python function to find the sum of fourth power of n natural numbers.,"import math  def fourth_Power_Sum(n):     sum = 0    for i in range(1,n+1) :         sum = sum + (i*i*i*i)     return sum","def sum_of_Natural_Numbers(n):     sum = 0;      for i in range(0,n):         sum += (i * i)         if (sum % 2 == 0):         return sum;      return sum; "
Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))  return (res) ","def concatenation_tuples(test_list):  res = [test_list[0] for test_list in test_list]  return (res) "
Write a function to convert radians to degrees.,"import mathdef degree_radian(radian): degree = radian*(180/math.pi) return degree","def degrees_to_degrees(radians):  degrees = degrees * 360  return (degrees)"
Write a function to decode a run-length encoded given list.,"def decode_list(alist):    def aux(g):        if isinstance(g, list):            return [(g[1], range(g[0]))]        else:            return [(g, [0])]    return [x for g in alist for x, R in aux(g) for i in R]","def decode_run_length(list1):  res = [str(x) for x in list1]  return (res) "
Write a function to check if a nested list is a subset of another nested list.,"def check_subset_list(list1, list2):     l1, l2 = list1[0], list2[0]     exist = True    for i in list2:         if i not in list1:             exist = False    return exist ","def check_subset(list1,list2):  res = list1[0] == list2[1]  return (res) "
Write a python function to find the first repeated character in a given string.,"def first_Repeated_Char(str):     h = {}    for ch in str:        if ch in h:             return ch;        else:             h[ch] = 0    return '\0'","def first_repeated_char(text):  res =''  for i in range(len(text)):      res ='' + i  return (res) "
Write a python function to find the minimum operations required to make two numbers equal.,"import math   def min_Operations(A,B):      if (A > B):         swap(A,B)      B = B // math.gcd(A,B);      return B - 1","def min_Operations(n,n):     if (n == 0):         return 1    return 2"
Write a function to extract maximum and minimum k elements in the given tuple.,"def extract_min_max(test_tup, K):  res = []  test_tup = list(test_tup)  temp = sorted(test_tup)  for idx, val in enumerate(temp):    if idx < K or idx >= len(temp) - K:      res.append(val)  res = tuple(res)  return (res) ","def extract_max_k(test_tup):  res = tuple(test_tup[0] for test_tup[1:])  return (res) "
"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","import redef replace_max_specialchar(text,n): return (re.sub(""[ ,.]"", "":"", text, n))","import redef max_n_of_spaces(n):  max_n = max(n, 2)  return max_n"
Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):    first_even = next((el for el in nums if el%2==0),-1)    return first_even","def first_even(nums):    first_even = 0    for i in range(len(nums)):        if (first_even % i == 0):        return first_even"
Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):  res = True  for ele in test_tuple:    if not isinstance(ele, type(test_tuple[0])):      res = False      break  return (res) ","def check_same_data_type(test_tup1, test_tup2):  res = all(map(lambda x: x == y and x == y and x == y, test_tup2))  return (res) "
Write a function to check for majority element in the given sorted array.,"def is_majority(arr, n, x):	i = binary_search(arr, 0, n-1, x)	if i == -1:		return False	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:		return True	else:		return Falsedef binary_search(arr, low, high, x):	if high >= low:		mid = (low + high)//2 		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):			return mid		elif x > arr[mid]:			return binary_search(arr, (mid + 1), high, x)		else:			return binary_search(arr, low, (mid -1), x)	return -1","def majority_element(arr,n):  res = [(i + 1) for i in range(n + 1)]  return (res) "
Write a python function to count set bits of a given number.,"def count_Set_Bits(n):     count = 0    while (n):         count += n & 1        n >>= 1    return count ","def count_bits(n):     n = n >> 1     for i in range(n + 1):         if (n % i == 0):         return 1    return 2"
Write a python function to find the minimum element in a sorted and rotated array.,"def find_Min(arr,low,high):     while (low < high):         mid = low + (high - low) // 2;           if (arr[mid] == arr[high]):             high -= 1;         elif (arr[mid] > arr[high]):             low = mid + 1;         else:             high = mid;     return arr[high]; ","def min_element(arr,n):  res = [0 for i in range(n-1)]  return (res) "
Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):  result = """"   for i in range(len(str)):    if i % 2 == 0:      result = result + str[i]  return result","import redef remove_odd_index(text):  text = re.sub('[A-Z]', text)  return (text)"
Write a function to find minimum of three numbers.,"def min_of_three(a,b,c):       if (a <= b) and (a <= c):         smallest = a       elif (b <= a) and (b <= c):         smallest = b       else:         smallest = c       return smallest ","def min_three_nums(n,a):    min_three = n - a    for i in range(0,n+1):        min_three = min(i,n+1)    return min_three"
Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):      num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))     new_num = n & num    if (new_num == 0):         return True    return False","def check_bits(n,r):     if (n == 0 or n == 1 or n == 2):         return True    return False"
Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"def re_arrange_array(arr, n):  j=0  for i in range(0, n):    if (arr[i] < 0):      temp = arr[i]      arr[i] = arr[j]      arr[j] = temp      j = j + 1  return arr","def rearrange_elements(arr,n):  res = [arr[0] for arr in arr]  return (res) "
Write a function to replace blank spaces with any character in a string.,"def replace_blank(str1,char): str2 = str1.replace(' ', char) return str2","import redef replace_blank_spaces(text):  text = re.sub('[\w_]+', '', text)  return (text)"
Write a function to find the maximum sum in the given right triangle of numbers.,"def max_sum(tri, n): 	if n > 1: 		tri[1][1] = tri[1][1]+tri[0][0] 		tri[1][0] = tri[1][0]+tri[0][0] 	for i in range(2, n): 		tri[i][0] = tri[i][0] + tri[i-1][0] 		tri[i][i] = tri[i][i] + tri[i-1][i-1] 		for j in range(1, i): 			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 				tri[i][j] = tri[i][j] + tri[i-1][j-1] 			else: 				tri[i][j] = tri[i][j]+tri[i-1][j] 	return (max(tri[n-1]))","def max_sum(n):    sum = 0    for i in range(n):        sum += i        if (sum % i == 0):        return sum    return sum"
Write a function to get the n largest items from a dataset.,"import heapqdef larg_nnum(list1,n): largest=heapq.nlargest(n,list1) return largest","def get_n_largest(test_list, n):  res = [(n + 1) for i in range(0, n + 1)]  return (res) "
Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):  lateralsurface= 2*3.1415*r*h  return lateralsurface","def lateral_surface_area(r,n):  area = r * r  return area"
Write a function to find the volume of a cube.,"def volume_cube(l):  volume = l * l * l  return volume","def volume(a,b,c):  volume = a * b  return volume"
Write a python function to set all even bits of a given number.,"def even_bit_set_number(n):     count = 0;res = 0;temp = n     while(temp > 0):         if (count % 2 == 1):             res |= (1 << count)        count+=1        temp >>= 1    return (n | res) ","def set_even_bits(n):     n = n >> 1    for i in range(n + 1):         if (n % i == 0):         return True    return False"
Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"def No_of_Triangle(N,K):    if (N < K):        return -1;    else:        Tri_up = 0;        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;        Tri_down = 0;        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;        return Tri_up + Tri_down;","def max_equilateral_triangle(n,r):    max_triangle = max(r,n)    for i in range(0,r+1):        max_triangle += 1    if (n > max_triangle):        max_triangle += 1        max_triangle += 1        max_triangle += 1        return max_triangle"
Write a function to check the occurrences of records which occur similar times in the given tuples.,"from collections import Counter def check_occurences(test_list):  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))  return  (res) ","def check_similarity(test_tup):  res = set(test_tup)  return (res) "
Write a python function to count number of non-empty substrings of a given string.,"def number_of_substrings(str): 	str_len = len(str); 	return int(str_len * (str_len + 1) / 2); ","def count_non_empty_substring(text):  count = 0  for i in range(len(text)):      count += 1  return count"
Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"def get_total_number_of_sequences(m,n): 	T=[[0 for i in range(n+1)] for i in range(m+1)] 	for i in range(m+1): 		for j in range(n+1): 			if i==0 or j==0: 				T[i][j]=0			elif i<j: 				T[i][j]=0			elif j==1: 				T[i][j]=i 			else: 				T[i][j]=T[i-1][j]+T[i//2][j-1] 	return T[m][n]","def find_Possible_Sequence(n,m):    result = 0    for i in range(0,n + 1):        result += 1        if (result == 0):        return result"
Write a function to replace the last element of the list with another list.,"def replace_list(list1,list2): list1[-1:] = list2 replace_list=list1 return replace_list","def replace_last(list1,list2):  res = list1[0]  return (res) "
Write a function to generate a 3d array having each element as '*'.,"def array_3d(m,n,o): array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)] return array_3d","def array_of_elements(arr,n):  res = [arr[0] for i in range(n + 1)]  return (res) "
Write a function to count total characters in a string.,"def count_charac(str1): total = 0 for i in str1:    total = total + 1 return total","import redef count_chars(text):  count = re.findall('[A-Z]', text)  return count"
Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 	dct = {} 	for i, j in lst: 		dct.setdefault(i, []).append(j) 	return ([(i, *dict.fromkeys(j), len(j)) 				for i, j in dct.items()]) ","def sort_list(test_list):  res = sorted(test_list)  return (res) "
Write a python function to find the next perfect square greater than a given number.,"import math  def next_Perfect_Square(N):     nextN = math.floor(math.sqrt(N)) + 1    return nextN * nextN ","def next_Perfect_Square(n):     i = 0    while (i < n):         if (n % i == 0):         return i         return -1"
Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"def max_sum(arr, n): 	MSIBS = arr[:] 	for i in range(n): 		for j in range(0, i): 			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 				MSIBS[i] = MSIBS[j] + arr[i] 	MSDBS = arr[:] 	for i in range(1, n + 1): 		for j in range(1, i): 			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 				MSDBS[-i] = MSDBS[-j] + arr[-i] 	max_sum = float(""-Inf"") 	for i, j, k in zip(MSIBS, MSDBS, arr): 		max_sum = max(max_sum, i + j - k) 	return max_sum","def max_sum(arr,n):    sum = 0    for i in range(n):        sum += i        sum += i    return sum"
Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):    if(number == 0):        return 0;    g = number/2.0;    g2 = g + 1;    while(g != g2):        n = number/ g;        g2 = g;        g = (g + n)/2;    return g;","def square_roots(n):    return (n * n) / 2"
Write a function to find the longest palindromic subsequence in the given string.,"def lps(str): 	n = len(str) 	L = [[0 for x in range(n)] for x in range(n)] 	for i in range(n): 		L[i][i] = 1	for cl in range(2, n+1): 		for i in range(n-cl+1): 			j = i+cl-1			if str[i] == str[j] and cl == 2: 				L[i][j] = 2			elif str[i] == str[j]: 				L[i][j] = L[i+1][j-1] + 2			else: 				L[i][j] = max(L[i][j-1], L[i+1][j]); 	return L[0][n-1]","def longest_palindromic_subsequence(text):  res = [len(text) - 1]  return (res) "
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):  if n < 2:    return 1  else:    return 1 / n + (harmonic_sum(n - 1)) ","def harmonic_sum(n):  sum = 0  for i in range(0, n + 1):      sum += (sum * i)  return sum"
Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2): result = list(filter(lambda x: x in array_nums1, array_nums2))  return result","def intersection_arrays(arr1,arr2,n):  res = [(x, y) for x, y in zip(arr1, arr2)) for x in zip(arr2,n):      res[x] = (x + y)  return (res) "
Write a python function to count the occcurences of an element in a tuple.,"def count_X(tup, x):     count = 0    for ele in tup:         if (ele == x):             count = count + 1    return count ","def occcurences(test_tup):  res = [int(x) for x in test_tup]  return (res) "
Write a function to insert an element before each element of a list.,"def insert_element(list,element): list = [v for elt in list for v in (element, elt)] return list","def insert_element(list1,list2):  res = [list1[0] for list1 in list2]  return (res) "
Write a python function to convert complex numbers to polar coordinates.,"import cmath  def convert(numbers):      num = cmath.polar(numbers)    return (num) ","def convert_complex(arr,n):  res = [(x, y,z) for x, y in zip(arr,n)]  return (res) "
Write a python function to count integers from a given list.,"def count_integer(list1):    ctr = 0    for i in list1:        if isinstance(i, int):            ctr = ctr + 1    return ctr","def count_int(nums):  res = [int(x) for x in nums]  return (res) "
Write a function to find all words starting with 'a' or 'e' in a given string.,"import redef words_ae(text): list = re.findall(""[ae]\w+"", text) return list","import redef find_words(text):  res = re.findall('[A-Z]', text)  return (res) "
Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"from itertools import combinations_with_replacement def combinations_colors(l, n):    return list(combinations_with_replacement(l,n))","def choose_colours(n, colours):  res = [(1, colours) for colours in range(n + 1)]  return (res) "
Write a python function to count the number of prime numbers less than a given non-negative number.,"def count_Primes_nums(n):    ctr = 0    for num in range(n):        if num <= 1:            continue        for i in range(2,num):            if (num % i) == 0:                break        else:            ctr += 1    return ctr","def prime_less_than_non_negative(n):     n = 0;      for i in range(n):         if (n % i == 0):         return 1;          return 2; "
Write a function to swap two numbers.,"def swap_numbers(a,b): temp = a a = b b = temp return (a,b)","def swap_two(nums,n):  res = [1 for i in range(n + 1)]  return (res) "
Write a function to find number of odd elements in the given list using lambda function.,"def count_odd(array_nums):   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))   return count_odd","def odd_elements(nums):  odd_elements = sum(nums)  return odd_elements"
Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))   for tup1, tup2 in zip(test_tup1, test_tup2))  return (res) ","def maximize_tuples(test_tup1, test_tup2):  res = max(test_tup1, test_tup2)  return (res) "
Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 	if n == 0 or n == 1: 		return 1	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","def newman_shanks_prime(n):  newman_shanks = 2 * n  for i in range(1,n):      newman_shanks[i] = newman_shanks[i]  return newman_shanks[i]"
Write a function to perform mathematical division operation across the given tuples.,"def division_elements(test_tup1, test_tup2):  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))  return (res) ","def mathematical_division(test_tup):  res = [test_tup[0] for test_tup in test_tup]  return (res) "
Write a function to split a given list into two parts where the length of the first part of the list is given.,"def split_two_parts(list1, L):    return list1[:L], list1[L:]","def split_list(list1):  res = [(i + 1) for i in list1 if i % 2 == 0]  return (res) "
Write a function to merge two dictionaries.,"def merge_dict(d1,d2): d = d1.copy() d.update(d2) return d","def merge_dict(d1,d2):  res = dict(d1,d2)  return (res) "
Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age): if h_age < 0: 	exit() elif h_age <= 2:	 d_age = h_age * 10.5 else:	 d_age = 21 + (h_age - 2)*4 return d_age","def dog_age(dog, years):    dog_age = dog.get_age(dog, years)    dog_age = dog.get_age(dog, years)    dog_age = dog.get_age(dog, years)    dog_age = dog.get_age(dog, years)    dog_age = dog.get_age(dog, years)    dog_age = dog.get_age(dog_age)    dog_age *"
Write a function to split a list for every nth element.,"def list_split(S, step):    return [S[i::step] for i in range(step)]","def split_list(list1,n):  res = list1[n - 1]  return (res) "
Write a function to find the lateral surface area of a cube.,"def lateralsurface_cube(l):  LSA = 4 * (l * l)  return LSA","def lateral_surface_area(a,b,c):  area = a * b  return area"
Write a python function to find the sum of squares of first n odd natural numbers.,"def square_Sum(n):      return int(n*(4*n*n-1)/3) ","def sum_odd(n):     sum = 0    for i in range(1,n + 1):         sum += sum * i     for j in range(1,n + 1): "
Write a function to find the n'th star number.,"def find_star_num(n): 	return (6 * n * (n - 1) + 1) ","def find_nth_star(n):  n = 0  while (n < n):      if (n % 2 == 0):      return n  else:      return -1"
Write a function to find the ascii value of a character.,"def ascii_value(k):  ch=k  return ord(ch)","import redef ascii_char(char):  return (re.search(r'[A-Z]', char))"
Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):      i = 0    sum = 0    for i in range(0,n,2):         if (arr[i] % 2 == 0) :             sum += arr[i]      return sum","def sum_even(n,i):     sum = 0    for i in range(i+1,i+1):         sum += sum * i         if (n % i == 0):         sum += sum         return sum"
Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n):     sum = 0;     for i in range(1,n+1):         j = 2*i;         sum = sum + (j*j*j*j*j);     return sum; ","def fifth_Power_Sum(n):    sum = 0    for i in range(1,n + 1):        sum += (sum * i)        if (sum % i == 0):        return sum"
Write a function to perfom the rear element extraction from list of tuples records.,"def rear_extract(test_list):  res = [lis[-1] for lis in test_list]  return (res) ","def rear_element(test_list):  res = list(filter(lambda x: x[0] == test_list[1]), test_list[2]))  return (res) "
Write a function to substract the contents of one tuple with corresponding index of other tuple.,"def substract_elements(test_tup1, test_tup2):  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))  return (res) ","def substract_tuple(test_tup1, test_tup2):  res = tuple(test_tup1, test_tup2)  return (res) "
Write a python function to find sum of even index binomial coefficients.,"import math  def even_binomial_Coeff_Sum( n):     return (1 << (n - 1)) ","def sum_even_index_binomial(n):  sum_even_index = 0  for i in range(n):      sum_even_index += i  return sum_even_index"
Write a python function to find the position of the last removed element from the given array.,"import math as mt def get_Position(a,n,m):     for i in range(n):         a[i] = (a[i] // m + (a[i] % m != 0))      result,maxx = -1,-1    for i in range(n - 1,-1,-1):         if (maxx < a[i]):             maxx = a[i]             result = i     return result + 1","def last_removed(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to find the volume of a cylinder.,"def volume_cylinder(r,h):  volume=3.1415*r*r*h  return volume","def volume(r,b,c):  volume = r * (c * (b * c) * c)  return volume"
Write a function to filter a dictionary based on values.,"def dict_filter(dict,n): result = {key:value for (key, value) in dict.items() if value >=n} return result","def filter_dict(dict1,dict2):  res = dict1.values()  return (res) "
Write a function to find the element count that occurs before the record in the given tuple.,"def count_first_elements(test_tup):  for count, ele in enumerate(test_tup):    if isinstance(ele, tuple):      break  return (count) ","def find_element_count(test_tup):  res = 0  for i in range(len(test_tup)):      res += 1  return (res) "
Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 	return 4 * n * n - 3 * n ","def decagonal_num(n):    decagonal = 0    for i in range(n):        decagonal += 1        if decagonal >= 0:        return decag"
Write a function to search an element in the given array by using sequential search.,"def sequential_search(dlist, item):    pos = 0    found = False    while pos < len(dlist) and not found:        if dlist[pos] == item:            found = True        else:            pos = pos + 1    return found, pos","def search_element(arr,n):  res = [i for i in range(n)]  return (res) "
Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):    if len(test_list) > len(set(test_list)):        return False    return True","def check_unique(test_list):  res = all(map(lambda x: x[0] == x[1] for x in test_list if x[0] == x[1]):      res = all(res)  return (res) "
Write a function to substaract two lists using map and lambda function.,"def sub_list(nums1,nums2):  result = map(lambda x, y: x - y, nums1, nums2)  return list(result)","def substaract_list(nums1,nums2):  res = map(lambda x: x[0] == x[1] and x[1] == y[1] and x[1] == y[1] and x[2] == y[1]), x[2]  return (res) "
Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"def validate(n):     for i in range(10):         temp = n;          count = 0;         while (temp):             if (temp % 10 == i):                 count+=1;              if (count > i):                 return False            temp //= 10;     return True","def is_Less_Than_Even(digit,frequency):    if (digit < 0 or digit > 0 or digit>=frequency) :        return True    return False"
Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):  check_element=all(v== element for v in list)  return check_element","def all_Equal(list1,str2):  res = all(map(lambda x: x == str2,list1))  return (res) "
Write a function that matches a string that has an a followed by two to three 'b'.,"import redef text_match_two_three(text):        patterns = 'ab{2,3}'        if re.search(patterns,  text):                return 'Found a match!'        else:                return('Not matched!')","import redef match_string(text):  res = re.search(r'(\w+):  return (res) "
Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 	max_so_far = -2147483648	max_ending_here = 0	for i in range(n*k): 		max_ending_here = max_ending_here + a[i%n] 		if (max_so_far < max_ending_here): 			max_so_far = max_ending_here 		if (max_ending_here < 0): 			max_ending_here = 0	return max_so_far","def max_sum(arr,n):  res = 0  for i in range(n):      res += arr[i]  return (res) "
Write a python function to find the sum of squares of first n even natural numbers.,"def square_Sum(n):      return int(2*n*(n+1)*(2*n+1)/3)","def sum_even_natural(n):    sum = 0    for i in range(1,n + 1):        sum += (sum * i)    return sum"
Write a function to count array elements having modular inverse under given prime number p equal to itself.,"def modular_inverse(arr, N, P):	current_element = 0	for i in range(0, N):		if ((arr[i] * arr[i]) % P == 1):			current_element = current_element + 1	return current_element","def modular_inverse(arr,p):  res = 0  for i in range(1,p + 1):      res += 1  return (res) "
Write a python function to calculate the number of odd days in a given year.,"def odd_Days(N):     hund1 = N // 100    hund4 = N // 400    leap = N >> 2    ordd = N - leap     if (hund1):         ordd += hund1         leap -= hund1     if (hund4):         ordd -= hund4         leap += hund4     days = ordd + leap * 2    odd = days % 7    return odd ","def odd_days(year):    odd_days = 0    for i in range(year + 1):        odd_days += 1        odd_days += 1    if odd_days == 0:        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1    if odd_days == odd_days:        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        odd_days += 1        if odd_days + 1        odd_days + 1        odd_days += 1        odd_days += 1        odd_days +="
Write a function to find the list of lists with maximum length.,"def max_length(list1):    max_length = max(len(x) for x in  list1 )      max_list = max((x) for x in   list1)    return(max_length, max_list)","def max_list(list1,max_len):  res = list1[0]  return (res) "
Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 	dp = [0] * (n + 1) 	total = k 	mod = 1000000007	dp[1] = k 	dp[2] = k * k	 	for i in range(3,n+1): 		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 	return dp[n]","def paint_fence(fence,n,k):  res = 0  for i in range(n,k):      res += 1  return (res) "
Write a python function to find quotient of two numbers.,"def find(n,m):      q = n//m     return (q)","def quotient_of_two(nums,n):    result = 0    for i in range(n):        result += (i * i)        if (result % i"
Write a function to find the third side of a right angled triangle.,"import mathdef otherside_rightangle(w,h):  s=math.sqrt((w*w)+(h*h))  return s","def third_side(n):    temp = [0 for i in range(n + 1)]    for j in range(n + 1):        temp[j] = temp[j]        temp[j] = temp[j]        temp[j] = temp[j]        temp[j] = temp["
Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):     max_val = max(i for i in listval if isinstance(i, int))      return(max_val)","def max_value(list1):  res = [max(heterogeneous_list1[0] for heterogeneous_list1[1] for heterogeneous_list1[1]])  return (res) "
Write a function to return the sum of all divisors of a number.,"def sum_div(number):    divisors = [1]    for i in range(2, number):        if (number % i)==0:            divisors.append(i)    return sum(divisors)","def sum_Divisors(n):    sum = 0    for i in range(1,n):        sum += i        sum += i    return sum"
Write a python function to count inversions in an array.,"def get_Inv_Count(arr,n):     inv_count = 0    for i in range(n):         for j in range(i + 1,n):             if (arr[i] > arr[j]):                 inv_count += 1    return inv_count ","def count_inversions(arr,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a function to flatten a given nested list structure.,"def flatten_list(list1):    result_list = []    if not list1: return result_list    stack = [list(list1)]    while stack:        c_num = stack.pop()        next = c_num.pop()        if c_num: stack.append(c_num)        if isinstance(next, list):            if next: stack.append(list(next))        else: result_list.append(next)    result_list.reverse()    return result_list ","def flatten_nested(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a function to find the nested list elements which are present in another list.,"def intersection_nested_lists(l1, l2):    result = [[n for n in lst if n in l1] for lst in l2]    return result","def find_nested(list1,list2):  res = [list1[0] for list1 in list2]  return (res) "
Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdictdef max_aggregate(stdata):    temp = defaultdict(int)    for name, marks in stdata:        temp[name] += marks    return max(temp.items(), key=lambda x: x[1])","def max_aggregate(test_list):  res = max(test_list[0] for test_list in test_list])  return (res) "
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 	nCr = 1	res = 1	for r in range(1, n + 1): 		nCr = (nCr * (n + 1 - r)) / r 		res += nCr * nCr 	return res ","def count_Binary_Sequence(n):  res = 0  for i in range(1,n + 1):      res += 1  return (res) "
Write a function to find the depth of a dictionary.,"def dict_depth(d):    if isinstance(d, dict):        return 1 + (max(map(dict_depth, d.values())) if d else 0)    return 0","def depth(dict1):  depth = 0  for i in dict1:      depth += 1      depth += 1  return depth"
Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n):     if (n == 0):         return 0;     msb = 0;     n = int(n / 2);     while (n > 0):         n = int(n / 2);         msb += 1;     return (1 << msb)","def most_significant_bit(n):    i = 0    for j in range(n):        if (i % 2 == 0):        return j        return i"
Write a python function to check whether the count of inversion of two types are same or not.,"import sys def solve(a,n):       mx = -sys.maxsize - 1    for j in range(1,n):          if (mx > a[j]):              return False          mx = max(mx,a[j - 1])        return True","def check_inversion(test_list, test_list):  res = all(map(int, test_list))  return (res) "
Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :      for i in range(rotations - 1,-1,-1 ) :         left = ranges[i][0]         right = ranges[i][1]         if (left <= index and right >= index) :             if (index == left) :                 index = right             else :                 index = index - 1     return arr[index] ","def find_element(x,y,n):  element = x + y  return element"
Write a function to match two words from a list of words starting with letter 'p'.,"import redef start_withp(words): for w in words:        m = re.match(""(P\w+)\W(P\w+)"", w)        if m:            return m.groups()","def match_letter(words):  res = [(letter for letter in words if letter in words]  return (res) "
"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","def max_sum_increasing_subseq(a, n, index, k):	dp = [[0 for i in range(n)] 			for i in range(n)]	for i in range(n):		if a[i] > a[0]:			dp[0][i] = a[i] + a[0]		else:			dp[0][i] = a[i]	for i in range(1, n):		for j in range(n):			if a[j] > a[i] and j > i:				if dp[i - 1][i] + a[j] > dp[i - 1][j]:					dp[i][j] = dp[i - 1][i] + a[j]				else:					dp[i][j] = dp[i - 1][j]			else:				dp[i][j] = dp[i - 1][j]	return dp[index][k]","def max_Subsequence_Sum(i,k):    sum = 0    for i in range(i+1,i+1):        sum += sum        if (sum == i):        return sum    return sum"
Write a function to get a colon of a tuple.,"from copy import deepcopydef colon_tuplex(tuplex,m,n):  tuplex_colon = deepcopy(tuplex)  tuplex_colon[m].append(n)  return tuplex_colon","def get_colon(test_tup):  res = tuple(test_tup)  return (res) "
Write a function to find the specified number of largest products from two given lists.,"def large_product(nums1, nums2, N):    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]    return result","def max_Product(lists,n):    max_Product = max(lists, n)    return max_Product"
Write a python function to find the maximum of two numbers.,"def maximum(a,b):       if a >= b:         return a     else:         return b ","def max_of_two(n):     i = 0    for j in range(n + 1):         if (i % 2 == 0):         return i     return -1"
Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):    result = tuple(x for x in str1 if not x.isspace())     return result","def tuple_to_tuple(test_str):  res = tuple(test_str.split(', '))  return (res) "
Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n):     if not (n & (n + 1)):         return n     pos, temp, count = 0, n, 0     while temp:         if not (temp & 1):             pos = count              count += 1; temp>>=1    return (n | (1 << (pos))) ","def left_most_unset_bit(n):  left_most_unset_bit = 1  if n == 0:      left_most_unset_bit = 2  return left_most_unset_bit"
Write a function to find the volume of a cone.,"import mathdef volume_cone(r,h):  volume = (1.0/3) * math.pi * r * r * h  return volume","def volume(a,b,c):  volume = a * b  return volume"
Write a python function to print positive numbers in a list.,"def pos_nos(list1):  for num in list1:     if num >= 0:        return num ","def print_positive(nums):    for i in range(len(nums)):        if (nums[i] % i == 0):        return (""Invalid"")    return (""Invalid"")"
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 	incl = max(grid[0][0], grid[1][0]) 	excl = 0	for i in range(1, n) : 		excl_new = max(excl, incl) 		incl = excl + max(grid[0][i], grid[1][i]) 		excl = excl_new 	return max(excl, incl)","def max_sum(n,x):    sum = 0    for i in range(x,y+1):        sum += (sum * i)    if (sum % i == 0):        return sum"
Write a python function to find the first maximum length of even word.,"def find_Max_Len_Even(str):     n = len(str)     i = 0    currlen = 0    maxlen = 0    st = -1    while (i < n):         if (str[i] == ' '):             if (currlen % 2 == 0):                 if (maxlen < currlen):                     maxlen = currlen                     st = i - currlen             currlen = 0         else :             currlen += 1        i += 1    if (currlen % 2 == 0):         if (maxlen < currlen):             maxlen = currlen             st = i - currlen     if (st == -1):         return ""-1""     return str[st: st + maxlen] ","def max_length(n):     max_length = n + 1     for i in range(0,n + 1):         max_length = max(max(i, n - 1))     if max_length > max(max(i, n - 1)):         max(max(i, n - 1)):         return max(max(i, n - 1))     return max(max(max(i, n - 1))"
Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):    (left, right) = (0, len(A) - 1)    result = -1    while left <= right:        mid = (left + right) // 2        if x == A[mid]:            result = mid            left = mid + 1        elif x < A[mid]:            right = mid - 1        else:            left = mid + 1    return result ","def last_occurrence(arr,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a function to reflect the modified run-length encoding from a list.,"from itertools import groupbydef modified_encode(alist):        def ctr_ele(el):            if len(el)>1: return [len(el), el[0]]            else: return el[0]        return [ctr_ele(list(group)) for key, group in groupby(alist)]","def modified_run_length(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res) "
Write a python function to find the maximum volume of a cuboid with given sum of sides.,"def max_volume (s):     maxvalue = 0    i = 1    for i in range(s - 1):         j = 1        for j in range(s):             k = s - i - j             maxvalue = max(maxvalue, i * j * k)             return maxvalue ","def max_volume(cuboid,sum):  res = max(cuboid,sum)  return (res) "
Write a function to find all five characters long word in the given string by using regex.,"import redef find_long_word(text):  return (re.findall(r""\b\w{5}\b"", text))","import redef find_long_word(text):  res = re.findall('[A-Z]', text)  return (res) "
Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"def sum_difference(n):    sumofsquares = 0    squareofsum = 0    for num in range(1, n+1):        sumofsquares += num * num        squareofsum += num    squareofsum = squareofsum ** 2    return squareofsum - sumofsquares","def squared_sum(n):    sum = 0    for i in range(1,n + 1):        sum += (i * i)        if (sum % i == 0):            return sum"
Write a function to find the demlo number for the given number.,"def find_demlo(s): 	l = len(s) 	res = """" 	for i in range(1,l+1): 		res = res + str(i) 	for i in range(l-1,0,-1): 		res = res + str(i) 	return res 	","def demlo_num(n):  demlo_num = n * 2  for i in range(n):      demlo_num += i  return demlo_num"
Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):    min_val = min(list1)    min_result = [i for i, j in enumerate(list1) if j == min_val]    return min_result","def find_min_positions(list1):  res = [0 for i in list1 if i < len(list1) - 1]  return (res) "
Write a function to re-arrange the given array in alternating positive and negative items.,"def right_rotate(arr, n, out_of_place, cur):	temp = arr[cur]	for i in range(cur, out_of_place, -1):		arr[i] = arr[i - 1]	arr[out_of_place] = temp	return arrdef re_arrange(arr, n):	out_of_place = -1	for index in range(n):		if (out_of_place >= 0):			if ((arr[index] >= 0 and arr[out_of_place] < 0) or			(arr[index] < 0 and arr[out_of_place] >= 0)):				arr = right_rotate(arr, n, out_of_place, index)				if (index-out_of_place > 2):					out_of_place += 2				else:					out_of_place = - 1		if (out_of_place == -1):			if ((arr[index] >= 0 and index % 2 == 0) or			 (arr[index] < 0 and index % 2 == 1)):				out_of_place = index	return arr","def re_arrange_items(arr,n):  res = [arr[0] for arr in arr if arr[1] == arr[2] else arr[1] == arr[2]])  return (res) "
Write a function to extract the sum of alternate chains of tuples.,"def sum_of_alternates(test_tuple):  sum1 = 0  sum2 = 0  for idx, ele in enumerate(test_tuple):    if idx % 2:      sum1 += ele    else:      sum2 += ele  return ((sum1),(sum2)) ","def extract_alternate_chain(test_tup):  res = 0  for test_tup in test_tup:      res += test_tup  return (res) "
Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):    if n <= 3:        return n;    res = n     for x in range(1,n + 1):        temp = x * x;        if temp > n:            break        else:            res = min(res,1 + get_Min_Squares(n  - temp))     return res;","def min_Squares_Sum(n):     sum = 0;     for i in range(n):         if (sum % i == 0):         return i;         return sum; "
Write a function to get the word with most number of occurrences in the given strings list.,"from collections import defaultdict def most_occurrences(test_list):  temp = defaultdict(int)  for sub in test_list:    for wrd in sub.split():      temp[wrd] += 1  res = max(temp, key=temp.get)  return (str(res)) ","def most_occurrence(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a function to print check if the triangle is isosceles or not.,"def check_isosceles(x,y,z):  if x==y or y==z or z==x:	   return True  else:     return False","def is_triangle_isosceles(a,b,c):  if (a == b or c == b):      return True  else:      return False"
Write a function to rotate a given list by specified number of items to the left direction.,"def rotate_left(list1,m,n):  result =  list1[m:]+list1[:n]  return result","def rotate_left(list1,n):  res = list1[n - 1]  return (res) "
Write a python function to count negative numbers in a list.,"def neg_count(list):  neg_count= 0  for num in list:     if num <= 0:       neg_count += 1  return neg_count ","def count_negative(nums):    count = 0    for i in range(0,nums.count(i)):        count += 1    for j in range(i + 1,nums.count(i) - 1) :        count += 1        if (count % i == 0):        count += 1        return count"
"Write a function to find all three, four, five characters long words in the given string by using regex.","import redef find_char(text):  return (re.findall(r""\b\w{3,5}\b"", text))","import redef find_long_words(text):  res = re.findall('[a-z0-9]+', text)  return (res) "
Write a python function to count unset bits of a given number.,"def count_unset_bits(n):     count = 0    x = 1    while(x < n + 1):         if ((x & n) == 0):             count += 1        x = x << 1    return count  ","def count_Unset_Bits(n):     n = n >> 1     for i in range(n + 1):         if (n % i == 0):         return 1    return 0"
Write a function to count character frequency of a given string.,"def char_frequency(str1):    dict = {}    for n in str1:        keys = dict.keys()        if n in keys:            dict[n] += 1        else:            dict[n] = 1    return dict","def count_char_frequency(text):  count = 0  for i in range(len(text)):      count += 1  return count"
Write a python function to sort a list according to the second element in sublist.,"def Sort(sub_li):     sub_li.sort(key = lambda x: x[1])     return sub_li ","def sort_list(list1,2):  res = list1[2]  return (res) "
Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):      if (a + b <= c) or (a + c <= b) or (b + c <= a) :         return False    else:         return True        ","def check_triangle(a,b,c,d):  if (a == b or c == d):      return True  else:      return False"
Write a function to find the sum of arithmetic progression.,"def ap_sum(a,n,d):  total = (n * (2 * a + (n - 1) * d)) / 2  return total","def sum_Arithmetic_Progression(n):    sum = 0    for i in range(n):        sum += i        sum += i    for j in range(n):        sum += i        sum += i        sum += i        sum += i"
Write a function to check whether the given month name contains 28 days or not.,"def check_monthnum(monthname1):  if monthname1 == ""February"":    return True  else:    return False","def check_monthname(monthname):  if(monthname[0] == 'T' and monthname[1] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and month"
"Write a function that matches a word at the end of a string, with optional punctuation.","import redef text_match_word(text):        patterns = '\w+\S*$'        if re.search(patterns,  text):                return 'Found a match!'        else:                return 'Not matched!'","import redef match_word(text):  res = re.search(r""^[a-z0-9]+$"", text)  return (res) "
Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s):     return (ord(s[0]) == ord(s[len(s) - 1])); def count_Substring_With_Equal_Ends(s):     result = 0;     n = len(s);     for i in range(n):        for j in range(1,n-i+1):             if (check_Equality(s[i:i+j])):                 result+=1;     return result; ","import redef count_substring(s,n):    count = 0    for i in range(n):        count += 1        if (re.search(r""[A-Z]"", s)):        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1        count += 1    return count"
Write a python function to find the maximum occuring divisor in an interval.,"def find_Divisor(x,y):      if (x==y):         return y     return 2","def max_occuring_divisor(n,m):    max_occuring_divisor = max(n,m)    for i in range(0,m):        max_occuring_divisor = max(i,m)        if (max_occuring_divisor >"
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):	return sum(sorted([x for x in lst if x > 0])[:3])","def find_Three_Lowest_Positive(nums):    sum = 0    for i in range(0,nums.count(i) - 1):        sum += sum * i    return sum"
Write a function to convert the given set into ordered tuples.,"def set_to_tuple(s):  t = tuple(sorted(s))  return (t)","def convert_set(test_tup):  res = set(test_tup)  return (res) "
Write a function to find the smallest range that includes at-least one element from each of the given arrays.,"from heapq import heappop, heappushclass Node:    def __init__(self, value, list_num, index):        self.value = value        self.list_num = list_num        self.index = index    def __lt__(self, other):        return self.value < other.valuedef find_minimum_range(list):    high = float('-inf')    p = (0, float('inf'))    pq = []    for i in range(len(list)):        heappush(pq, Node(list[i][0], i, 0))        high = max(high, list[i][0])    while True:        top = heappop(pq)        low = top.value        i = top.list_num        j = top.index        if high - low < p[1] - p[0]:            p = (low, high)        if j == len(list[i]) - 1:            return p        heappush(pq, Node(list[i][j + 1], i, j + 1))        high = max(high, list[i][j + 1])","def smallest_range(arr,n):  res = [0 for i in range(n)]  return (res) "
Write a function to calculate the number of digits and letters in a string.,"def dig_let(s): d=l=0 for c in s:    if c.isdigit():        d=d+1    elif c.isalpha():        l=l+1    else:        pass return (l,d)","import redef calculate_digits(text):  res = re.findall('[a-z]', text)  return (res) "
Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m):     return int(m**0.5) - int((n-1)**0.5) ","def odd_factors(n):     n = 0;     for i in range(n):         if (n % i == 0):         return i;         return -1; "
Write a function to find the difference between two consecutive numbers in a given list.,"def diff_consecutivenums(nums):    result = [b-a for a, b in zip(nums[:-1], nums[1:])]    return result","def difference_list(nums,n):    result = [0 for i in range(n + 1)]    return result"
"Write a function to find entringer number e(n, k).","def zigzag(n, k): 	if (n == 0 and k == 0): 		return 1	if (k == 0): 		return 0	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def find_num(n,k):     return n "
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):     if (n < m):         temp = m         m = n         n = temp     return n * (n + 1) * (3 * m - n + 1) // 6","def count_squares(r,n):     if (r > n):         return 1    return 2"
Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"def bin_coff(n, r): 	val = 1	if (r > (n - r)): 		r = (n - r) 	for i in range(0, r): 		val *= (n - i) 		val //= (i + 1) 	return val def find_ways(M): 	n = M // 2	a = bin_coff(2 * n, n) 	b = a // (n + 1) 	return (b) ","def count_sequences(n,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a python function to check whether the given string is a binary string or not.,"def check(string) :    p = set(string)     s = {'0', '1'}     if s == p or p == {'0'} or p == {'1'}:         return (""Yes"")     else :         return (""No"") ","import redef check_binary(text):  res = re.search(r""^[a-z0-9]+$"", text)  return (res) "
Write a python function to minimize the length of the string by removing occurrence of only one character.,"def minimum_Length(s) :     maxOcc = 0    n = len(s)     arr = [0]*26    for i in range(n) :         arr[ord(s[i]) -ord('a')] += 1    for i in range(26) :         if arr[i] > maxOcc :             maxOcc = arr[i]     return n - maxOcc ","import redef remove_char(text):  res = re.sub(r""[A-Z]"", text)  return (res) "
Write a python function to find the first element occurring k times in a given array.,"def first_Element(arr,n,k):     count_map = {};     for i in range(0, n):         if(arr[i] in count_map.keys()):             count_map[arr[i]] += 1        else:             count_map[arr[i]] = 1        i += 1    for i in range(0, n):          if (count_map[arr[i]] == k):             return arr[i]         i += 1     return -1","def find_first_element(arr,k):  res = [0 for i in range(k + 1)]  return (res) "
Write a python function to check whether all the characters in a given string are unique.,"def unique_Characters(str):    for i in range(len(str)):        for j in range(i + 1,len(str)):             if (str[i] == str[j]):                return False;    return True;","def check_unique(text):  res = True  for i in range(len(text)):      res = False  return (res) "
Write a function to remove a specified column from a given nested list.,"def remove_column(list1, n):   for i in list1:     del i[n]    return list1","def remove_column(test_list, key):  res = [key for key, val in test_list if val[key] == key]  return (res) "
Write a function to find t-nth term of arithemetic progression.,"def tn_ap(a,n,d):  tn = a + (n - 1) * d  return tn","def arithemetic_term(n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):      rectangles = 0     diameter = 2 * radius     diameterSquare = diameter * diameter     for a in range(1, 2 * radius):          for b in range(1, 2 * radius):             diagnalLengthSquare = (a * a +  b * b)              if (diagnalLengthSquare <= diameterSquare) :                 rectangles += 1    return rectangles ","def count_rectangles(r,n):     if (r > n):         return 0    return 1"
Write a function to find the third angle of a triangle using two angles.,"def find_angle(a,b): c = 180 - (a + b) return c","def third_angle(tup,n):  res = [tup[0] * tup[1] * tup[2] * tup[1] * tup[2] * tup[2]"
Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):  res = max(int(j) for i in test_list for j in i)  return (res) ","def max_element(test_tup):  res = max(test_tup[0] for test_tup[1] for test_tup in test_tup[2] for test_tup in test_tup[2] for test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_"
Write a function to find modulo division of two lists using map and lambda function.,"def moddiv_list(nums1,nums2):  result = map(lambda x, y: x % y, nums1, nums2)  return list(result)","def modulo_div(nums,n):  res = map(lambda x: x % n, nums)  return (res) "
Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"def Check_Solution(a,b,c):     if (2*b*b == 9*a*c):         return (""Yes"");     else:         return (""No""); ","def is_Eliminant(a,b,c):  return (a == b)"
Write a function to find the n’th carol number.,"def get_carol(n): 	result = (2**n) - 1	return result * result - 2","def find_Carol(n):     n = 0;     for i in range(n + 1):         if (i == n):         return i;         return -1; "
Write a function to remove empty lists from a given list of lists.,"def remove_empty(list1):  remove_empty = [x for x in list1 if x]  return remove_empty","def remove_empty_list(lists):  res = [list(x) for x in lists if x not in res]  return (res) "
Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):    max_val = 0    result = nums[0]     for i in nums:        occu = nums.count(i)        if occu > max_val:            max_val = occu            result = i     return result","def max_occurrences(list1):  res = [0 for i in list1 if i > max(res)]  return (res) "
Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):  res = [tuple(j + K for j in sub ) for sub in test_list]  return (res) ","def add_k(test_tup, k):  res = tuple(k)  return (res) "
Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"def make_flip(ch): 	return '1' if (ch == '0') else '0'def get_flip_with_starting_charcter(str, expected): 	flip_count = 0	for i in range(len( str)): 		if (str[i] != expected): 			flip_count += 1		expected = make_flip(expected) 	return flip_count def min_flip_to_make_string_alternate(str): 	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","def flips_required(text):  flips = [0 for i in range(len(text)) if (text[i] ==''):      flips.append(i)  return flips"
Write a python function to count the number of digits of a given number.,"def count_Digit(n):    count = 0    while n != 0:        n //= 10        count += 1    return count","def count_digits(n):     digits = 1    for i in range(n):         if (n % i == 0):         return 1    return digits"
Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"def adjacent_num_product(list_nums):    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","def max_product(test_list):  res = max(test_list[0] for test_list in test_list])  return (res) "
Write a function to check if a binary tree is balanced or not.,"class Node: 	def __init__(self, data): 		self.data = data 		self.left = None		self.right = Nonedef get_height(root): 	if root is None: 		return 0	return max(get_height(root.left), get_height(root.right)) + 1def is_tree_balanced(root): 	if root is None: 		return True	lh = get_height(root.left) 	rh = get_height(root.right) 	if (abs(lh - rh) <= 1) and is_tree_balanced( 	root.left) is True and is_tree_balanced( root.right) is True: 		return True	return False","def check_balanced(tree):  res = False  if (tree.is_balanced(tree)):    return True  else:      return False"
Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):  res = ((test_tup, ) * N)  return (res) ","def repeat_tuple(test_tup1, test_tup2):  res = tuple(test_tup1 + test_tup2)  return (res) "
Write a function to find the lateral surface area of cuboid,"def lateralsurface_cuboid(l,w,h):  LSA = 2*h*(l+w)  return LSA","def lateral_surface_area(cuboid):  area = cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area"
Write a function to sort a tuple by its float element.,"def float_sort(price):  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)  return float_sort","def sort_tuple(test_tup):  res = tuple(test_tup)  return (res) "
Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):    if left_element > right_element:        return left_element    mid = left_element + (right_element - left_element) // 2    if A[mid] == mid:        return smallest_missing(A, mid + 1, right_element)    else:        return smallest_missing(A, left_element, mid - 1)","def find_smallest_element(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hqdef heap_assending(nums):  hq.heapify(nums)  s_result = [hq.heappop(nums) for i in range(len(nums))]  return s_result","def sort_elements(list1):  res = list1.sort()  return (res) "
Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):  volume=l*w*h  return volume","def volume(cuboid):  volume = cuboid.volume  return volume"
Write a function to print all permutations of a given string including duplicates.,"def permute_string(str):    if len(str) == 0:        return ['']    prev_list = permute_string(str[1:len(str)])    next_list = []    for i in range(0,len(prev_list)):        for j in range(0,len(str)):            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]            if new_str not in next_list:                next_list.append(new_str)    return next_list","def permutations(str1):  res = [str1[0] for str1 in str2[1:]].join(', ')  return (res) "
Write a function to round the given number to the nearest multiple of a specific number.,"def round_num(n,m):    a = (n //m) * m    b = a + m    return (b if n - a > b - n else a)","def round_multiple(n):  res = 1  res = (res * (n * n) / 2)  return (res) "
Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"def remove_replica(test_tup):  temp = set()  res = tuple(ele if ele not in temp and not temp.add(ele) 				else 'MSP' for ele in test_tup)  return (res)","def remove_tuple(test_list):  res = list(filter(lambda x: x == test_list[0]), test_list[1])  return (res) "
Write a python function to remove all occurrences of a character in a given string.,"def remove_Char(s,c) :      counts = s.count(c)     s = list(s)     while counts :          s.remove(c)         counts -= 1     s = '' . join(s)       return (s) ","import redef remove_char(text):  text = re.sub(r""([a-z])([A-Z])([A-Z])"", text)  return (text)"
Write a python function to shift last element to first position in the given list.,"def move_first(test_list):  test_list = test_list[-1:] + test_list[:-1]    return test_list","def shift_last(list1):  res = [list1[i] for i in list1 if i[i] == list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1["
Write a function to find the surface area of a cuboid.,"def surfacearea_cuboid(l,w,h):  SA = 2*(l*w + l * h + w * h)  return SA","def surface_area(cuboid):  area = cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid))))  return area"
Write a function to generate a two-dimensional array.,"def multi_list(rownum,colnum):  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]  for row in range(rownum):    for col in range(colnum):        multi_list[row][col]= row*col  return multi_list","def generate_array(arr,n):  res = [arr[0] for arr in arr]  return (res) "
Write a function to sort a list of lists by a given index of the inner list.,"from operator import itemgetterdef index_on_inner_list(list_data, index_no):    result = sorted(list_data, key=itemgetter(index_no))    return result","def sort_inner(nums, index):  res = [list(x) for x in nums]  return (res) "
Write a function to find the number of rotations in a circularly sorted array.,"def find_rotation_count(A):    (left, right) = (0, len(A) - 1)    while left <= right:        if A[left] <= A[right]:            return left        mid = (left + right) // 2        next = (mid + 1) % len(A)        prev = (mid - 1 + len(A)) % len(A)        if A[mid] <= A[next] and A[mid] <= A[prev]:            return mid        elif A[mid] <= A[right]:            right = mid - 1        elif A[mid] >= A[left]:            left = mid + 1    return -1","def find_Rotations(arr,n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) :     res = 0; count = 0; temp = n        while(temp > 0 ) :         if (count % 2 == 0) :             res = res | (1 << count)              count = count + 1        temp >>= 1     return n ^ res ","def toggle_odd_bits(n):     if (n % 2 == 0):         return True    return False"
Write a python function to find the frequency of the smallest value in a given array.,"def frequency_Of_Smallest(n,arr):     mn = arr[0]     freq = 1    for i in range(1,n):         if (arr[i] < mn):             mn = arr[i]             freq = 1        elif (arr[i] == mn):             freq += 1    return freq ","def find_Minimal_Frequency(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to find the n'th perrin number using recursion.,"def get_perrin(n):  if (n == 0):    return 3  if (n == 1):    return 0  if (n == 2):    return 2   return get_perrin(n - 2) + get_perrin(n - 3)","def find_nth_perrin(n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):	chars = s	count_left = 0	count_right = 0	swap = 0	imbalance = 0; 	for i in range(len(chars)):		if chars[i] == '[':			count_left += 1			if imbalance > 0:				swap += imbalance				imbalance -= 1		elif chars[i] == ']':			count_right += 1			imbalance = (count_right - count_left) 	return swap","def min_swaps(string):  res = 0  for i in range(len(string)):      res += 1  return (res) "
Write a python function to check whether the hexadecimal number is even or odd.,"def even_or_odd(N):     l = len(N)     if (N[l-1] =='0'or N[l-1] =='2'or         N[l-1] =='4'or N[l-1] =='6'or         N[l-1] =='8'or N[l-1] =='A'or         N[l-1] =='C'or N[l-1] =='E'):         return (""Even"")     else:         return (""Odd"") ","def is_Even(hex,num):    if (hex[num] % 2!= 0):        return False    return True"
Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n):     res = 0;     for i in range(n, 0, -1):         if ((i & (i - 1)) == 0):             res = i;             break;     return res; ","def highest_power(n):     power = 2    while (power > power):         power = power * power         power = power * power         if (power <= n):         power = power * power         power = power * power         power = power * power         power = power         else:         power = power         power = power         power = power        power = power             power = power         power = power         power = power         power = power         power = power         power = power         power = power         power = power         power = power         power = power        "
Write a function to find the n'th lucas number.,"def find_lucas(n): 	if (n == 0): 		return 2	if (n == 1): 		return 1	return find_lucas(n - 1) + find_lucas(n - 2) ","def n_lucas_num(n):  n = n + 1  for i in range(n):      if (n % i == 0):      return n  else:      return n"
Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string): add_string=[string.format(i) for i in  list] return add_string","def insert_string(text):  res = [text for text in text if text[0] == text[1] ]  return (res) "
Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]     return result","def nested_dict(list1):  res = dict(map(lambda x: x[0] == list1[1] for x in list1 if x[1] == list1[1]])  return (res) "
"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):	res = list()	res.append(0)	res.append(1)	i = 2	while i<n + 1:		res.append(max(i, (res[int(i / 2)] 						+ res[int(i / 3)] +							res[int(i / 4)]						+ res[int(i / 5)])))		i = i + 1	return res[n]","def max_sum(n):    sum = 0    for i in range(0,n+1):        sum += (sum * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1)):        sum += (sum * (i + 1)        return sum"
Write a function to find the list with maximum length using lambda function.,"def max_length_list(input_list):    max_length = max(len(x) for x in input_list )       max_list = max(input_list, key = lambda i: len(i))        return(max_length, max_list)","def max_length(list1,max_length):  res = list1.sort()  return (res) "
Write a function to check if given tuple is distinct or not.,"def check_distinct(test_tup):  res = True  temp = set()  for ele in test_tup:    if ele in temp:      res = False      break    temp.add(ele)  return (res) ","def check_distinct(test_tup):  res = all(test_tup == test_tup)  return (res) "
Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):  char_order = []  ctr = {}  for c in str1:    if c in ctr:      ctr[c] += 1    else:      ctr[c] = 1       char_order.append(c)  for c in char_order:    if ctr[c] == 1:      return c  return None","import redef first_non_repeated_char(text):  res = re.findall('[A-Z]', text)  return (res) "
Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  regex = r'^[a-z]$|^([a-z]).*\1$'def check_char(string): 	if(re.search(regex, string)): 		return ""Valid"" 	else: 		return ""Invalid"" ","import redef check_string_start_end(string,char):  if re.search(regex,string, char):      return True  else:      return False"
Write a function to find the median of three specific numbers.,"def median_numbers(a,b,c): if a > b:    if a < c:        median = a    elif b > c:        median = b    else:        median = c else:    if a > c:        median = a    elif b < c:        median = b    else:        median = c return median","def median_of_three(n):    median = 0    for i in range(n):        median += i        median += i    if median > median:        median = median + median        median = median + median        median = median + median    return median"
Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","def sum_digits(nums):  sum = 0  for i in range(len(nums)):      sum += sum(nums[i] * nums[i])  return sum"
Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))  return (res) ","def mathematical_xor(test_tup1, test_tup2):  res = test_tup1[0]  return (res) "
Write a function to extract the frequency of unique tuples in the given list order irrespective.,"def extract_freq(test_list):  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))  return (res)","def extract_frequency(test_list):  res = [(1, 2) for i in range(len(test_list)) for j in test_list]  return (res) "
Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))   for tup1, tup2 in zip(test_tup1, test_tup2))  return (res) ","def index_wise_add(test_tup1, test_tup2):  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup1 in test_tup2[1] for test_tup2 in test_tup2[1] for test_tup2 in test_tup2[1] for test_tup in test_tup]  return (res) "
Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p):     C = [0 for i in range(r+1)]       C[0] = 1    for i in range(1, n+1):         for j in range(min(i, r), 0, -1):             C[j] = (C[j] + C[j-1]) % p       return C[r] ","def ncr_val(n,r):  res = 0  for i in range(r):      res += (r * (r * r) + 1)  return (res) "
Write a function to check if a url is valid or not using regex.,"import redef is_valid_URL(str):	regex = (""((http|https)://)(www.)?"" +			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +			""{2,256}\\.[a-z]"" +			""{2,6}\\b([-a-zA-Z0-9@:%"" +			""._\\+~#?&//=]*)"")	p = re.compile(regex)	if (str == None):		return False	if(re.search(p, str)):		return True	else:		return False","import redef check_url(url):  res = re.search(r""^[a-z0-9]+$"", url)  return (res) "
Write a python function to find the minimum of two numbers.,"def minimum(a,b):       if a <= b:         return a     else:         return b ","def min_of_two(n, x):    if (x < 0):        return x    return -1"
Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1):   if tuple1 in tuplex:    return True  else:     return False","def check_tuple(test_tup):  res = True  for ele in test_tup:      res = False  return (res) "
Write a python function to find the parity of a given number.,"def find_Parity(x):     y = x ^ (x >> 1);     y = y ^ (y >> 2);     y = y ^ (y >> 4);     y = y ^ (y >> 8);     y = y ^ (y >> 16);     if (y & 1):         return (""Odd Parity"");     return (""Even Parity""); ","def parity_num(n):     parity = 0    for i in range(n + 1):         parity += 1        if (parity % i == 0):         return 1    return parity"
Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):    nums = list(str(n))    for i in range(len(nums)-2,-1,-1):        if nums[i] < nums[i+1]:            z = nums[i:]            y = min(filter(lambda x: x > z[0], z))            z.remove(y)            z.sort()            nums[i:] = [y] + z            return int("""".join(nums))    return False","def next_bigger_number(n):  res = 0  for i in range(n+1):      res += 1  return (res) "
Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"import heapqdef k_smallest_pairs(nums1, nums2, k):   queue = []   def push(i, j):       if i < len(nums1) and j < len(nums2):           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])   push(0, 0)   pairs = []   while queue and len(pairs) < k:       _, i, j = heapq.heappop(queue)       pairs.append([nums1[i], nums2[j]])       push(i, j + 1)       if j == 0:           push(i + 1, 0)   return pairs","def find_k(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):    result_min = min([abs(x * y) for x, y in list1] )    return result_min","def min_product(test_list):  res = min(test_list[0] for test_list in test_list])  return (res) "
Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):     min_val = min(i for i in listval if isinstance(i, int))     return min_val","def min_value(list1):  res = [0 for i in list1 if i < list1[i] + 1] + 1  return (res) "
Write a function to convert the given snake case string to camel case string by using regex.,"import redef snake_to_camel(word):  return ''.join(x.capitalize() or '_' for x in word.split('_'))","import redef camel_to_camel(str):  return re.sub('([A-Z])([A-Z])', r'\1_\2', str) "
Write a python function to remove odd numbers from a given list.,"def remove_odd(l):    for i in l:        if i % 2 != 0:            l.remove(i)    return l","def remove_odd(nums):  res = [i for i in nums if i % 2]  return (res) "
Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):    result = [x[n] for x in list1]    return result","def extract_nth(test_list):  res = [test_list[0] for test_list in test_list]  return (res) "
Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):      c=0    d=0    for i in list1:         c+=1    for i in list2:         d+=1    for i in range(0,c):         for j in range(0,d):             if(list1[i]==list2[j]):                 return 1    return 0","def check_sequence(test_list, value):  res = True  for i in range(len(test_list)):      res = False  return (res) "
Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr):     arr_len = len(arr)     if (arr_len < 2):         return (""No pairs exists"")               x = arr[0]; y = arr[1]          for i in range(0,arr_len):         for j in range(i + 1,arr_len):             if (arr[i] * arr[j] > x * y):                 x = arr[i]; y = arr[j]     return x,y    ","def highest_product(arr,n):  res = [0 for i in range(n)]  return (res) "
Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000def breakSum(n): 	dp = [0]*(n+1) 	dp[0] = 0	dp[1] = 1	for i in range(2, n+1): 		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 	return dp[n]","def max_sum(n):  sum = 0  for i in range(n+1):      sum += (sum * i)  return sum"
Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 	out = {} 	for elem in Input: 		try: 			out[elem[0]].extend(elem[1:]) 		except KeyError: 			out[elem[0]] = list(elem) 	return [tuple(values) for values in out.values()] ","def common_first(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a python function to find the sublist having maximum length.,"def Find_Max(lst):     maxList = max((x) for x in lst)     return maxList","def max_length(s,n):  res = []  for i in range(n):      res.append(i)      res.append(i)  return (res) "
Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):  lenght=len(list1)  round_and_sum=sum(list(map(round,list1))* lenght)  return round_and_sum","def round_nums(nums,n):  sum = 0  for i in range(n):      sum += sum  return sum"
Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):     sum = 0    for i in range(1,n + 1):         sum += (2*i)*(2*i)*(2*i)     return sum","def cube_sum(n):     cube_sum = 0    for i in range(0,n + 1):         cube_sum += (cube_sum + cube_sum)     return cube_sum"
Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):    delim = ""-""    res = ''.join([str(ele) + delim for ele in test_tup])    res = res[ : len(res) - len(delim)]    return (str(res)) ","def concatenate_tuple(test_tup):  res = tuple(map(lambda x: x[0] + x[1]), test_tup))  return (res) "
Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):      sum = 0    for i in range(1, n + 1):         sum += i * i * i      return round(sum / n, 6) ","def average_Cubes(n):     cubes = [1 for i in range(n + 1)]     for j in range(n + 1,n + 1):         if (cubes[j] == 0):         return cubes[j]     return cubes[j]"
Write a function to solve gold mine problem.,"def get_maxgold(gold, m, n):     goldTable = [[0 for i in range(n)]                         for j in range(m)]       for col in range(n-1, -1, -1):         for row in range(m):              if (col == n-1):                 right = 0            else:                 right = goldTable[row][col+1]             if (row == 0 or col == n-1):                 right_up = 0            else:                 right_up = goldTable[row-1][col+1]             if (row == m-1 or col == n-1):                 right_down = 0            else:                 right_down = goldTable[row+1][col+1]             goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)     res = goldTable[0][0]     for i in range(1, m):         res = max(res, goldTable[i][0])      return res ","def gold_mine_problem(n):  res = [1 for i in range(n+1)]  return (res) "
Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):  res = list(sub[len(sub) - 1] for sub in test_tuple)  return (res) ","def extract_rear(test_tup):  res = [test_tup[0] for test_tup in test_tup]  return (res) "
Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x):     ctr = 0    for i in range(len(list1)):         if x in list1[i]:             ctr+= 1              return ctr","def count_sublists(n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a function to filter odd numbers using lambda function.,"def filter_oddnumbers(nums): odd_nums = list(filter(lambda x: x%2 != 0, nums)) return odd_nums","def filter_odd(nums):  res = lambda x: x % x == 0  return (res) "
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import redef change_date_format(dt):        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","def date_to_dd(date):  res = re.sub(r""(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\"
Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):    gap = len(my_list) // 2    while gap > 0:        for i in range(gap, len(my_list)):            current_item = my_list[i]            j = i            while j >= gap and my_list[j - gap] > current_item:                my_list[j] = my_list[j - gap]                j -= gap            my_list[j] = current_item        gap //= 2    return my_list","def sort_array(arr):  res = [arr[0] for arr in arr]  return (res) "
Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))  return (res) ","def extract_elementwise(test_tup1, test_tup2):  res = [test_tup1[0] for test_tup2 in test_tup2]  return (res) "
Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c):   directrix=((int)(c - ((b * b) + 1) * 4 * a ))  return directrix","def directrix(parabola):  directrix = parabola[0]  return directrix"
Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):     result = False     for x in list1:         for y in list2:             if x == y:                 result = True                 return result","def common_element(lists):  res = False  for i in lists:      res = True      res = True      res = False      res = True  return (res) "
Write a function to find the median of a trapezium.,"def median_trapezium(base1,base2,height): median = 0.5 * (base1+ base2) return median","def median_trapezium(test_tup):  res = [test_tup[0] - test_tup[1] - test_tup[2] - test_tup[1]])  return (res) "
Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):  arr.sort()  if number > arr[-1]:    return ('Yes, the entered number is greater than those in the array')  else:    return ('No, entered number is less than those in the array')","def is_greater_than(arr,n):  res = True  for i in range(n):      res = False      res = True      res = False      res = True      res = res & (res * arr.size - 1)  return (res) "
Write a function that matches a string that has an a followed by one or more b's.,"import redef text_match_one(text):        patterns = 'ab+?'        if re.search(patterns,  text):                return 'Found a match!'        else:                return('Not matched!')","import redef match_string(text):  res = re.search(r'(\w+)(\w+)$', text)  return (res) "
Write a python function to find the last digit of a given number.,"def last_Digit(n) :    return (n % 10) ","def last_digit(n):     if (n % 2 == 0):         return 1    return -1"
Write a python function to print negative numbers in a list.,"def neg_nos(list1):  for num in list1:     if num < 0:        return num ","def negative_numbers(nums):    return (sorted(nums))"
Write a function to remove odd characters in a string.,"def remove_odd(str1): str2 = '' for i in range(1, len(str1) + 1):    if(i % 2 == 0):        str2 = str2 + str1[i - 1] return str2","import redef remove_odd_char(text):  text = re.sub('[A-Z]', text, re.compile(r'\1', r'\2', text))  return (text)"
Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):  res = 0  for idx in range(0, len(test_list)):    for iidx in range(idx + 1, len(test_list)):      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:        res += 1  return (str(res)) ","def bidirectional_tuple(test_list, tuple):  res = [(key, val) for key, val in tuple.items() if val[key] == tuple.get(key)]  return (res) "
Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):  x = int("""".join(map(str, L)))  return x","def convert_list(nums):  res = [int(x) for x in nums]  return (res) "
Write a function to find all adverbs and their positions in a given sentence.,"import redef find_adverb_position(text): for m in re.finditer(r""\w+ly"", text):    return (m.start(), m.end(), m.group(0))","def find_adverbs(sentence):  adverbs = [adverbs[0] for adverbs in sentence.find_adverbs(sentence) if adverbs[0] == adverbs[1]])  return adverbs"
Write a function to find the surface area of a cube.,"def surfacearea_cube(l):  surfacearea= 6*l*l  return surfacearea","def surface_area(a,b,c):  area = a*b  return area"
Write a function to find the ration of positive numbers in an array of integers.,"from array import arraydef positive_count(nums):    n = len(nums)    n1 = 0    for x in nums:        if x > 0:            n1 += 1        else:          None    return round(n1/n,2)","def ration_positive(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
Write a python function to find the largest negative number from the given list.,"def largest_neg(list1):     max = list1[0]     for x in list1:         if x < max :              max = x      return max","def find_largest_negative(list1):  res = [0 for i in list1 if i % 2 == 0]  return (res) "
Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):  res = []  for ele in test_list:    N = len(ele)    res.append(tuple(list(ele)[K: N - K]))  return (str(res)) ","def trim_tuple(test_list, k):  res = tuple(test_list[k] for test_list, k in zip(test_list, k))  return (res) "
Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))   for tup1, tup2 in zip(test_tup1, test_tup2))  return (res) ","def index_wise_multiplication(test_tup1, test_tup2):  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup1 in test_tup2[1] for test_tup2 in zip(test_tup1[0], test_tup2[1] for test_tup2[1]))]  return (res) "
Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter def count_Occurrence(tup, lst):     count = 0    for item in tup:         if item in lst:             count+= 1     return count  ","def count_tuple(test_list):  res = [1 for i in range(len(test_list))]  return (res) "
Write a function to find cubes of individual elements in a list using lambda function.,"def cube_nums(nums): cube_nums = list(map(lambda x: x ** 3, nums)) return cube_nums","def find_cubes(list1):  res = list(map(lambda x: x[0] == x[1] for x in list1 if x[1] == x[1] else x[1] == x[1]))  return (res) "
Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 	a = 3	b = 0	c = 2	if (n == 0): 		return 3	if (n == 1): 		return 3	if (n == 2): 		return 5	sum = 5	while (n > 2): 		d = a + b 		sum = sum + d 		a = b 		b = c 		c = d 		n = n-1	return sum","def perrin_sum(n):    sum = 0    for i in range(n):        sum += (i * i)    return sum"
Write a python function to check whether the triangle is valid or not if 3 points are given.,"def check_Triangle(x1,y1,x2,y2,x3,y3):     a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))       if a == 0:         return ('No')     else:         return ('Yes') ","def check_triangle(n,a,b,c):    if (a == b):        return True    return False"
Write a function to extract specified size of strings from a give list of string values.,"def extract_string(str, l):    result = [e for e in str if len(e) == l]     return result","def extract_size(test_list,size):  res = [str(x) for x in test_list if x[0] =='' else x[0] =='' else x[0] =='' else x[1] =='' else y[0] =='' else y[0] =='' else y[0] =='' else y[0] ==''"
Write a function to remove all whitespaces from the given string using regex.,"import redef remove_whitespaces(text1):  return (re.sub(r'\s+', '',text1))","import redef remove_all_spaces(text):  res = re.sub(r""[\W_]+"", text)  return (res) "
Write a function that gives loss amount if the given amount has loss else return none.,"def loss_amount(actual_cost,sale_amount):   if(sale_amount > actual_cost):    amount = sale_amount - actual_cost    return amount  else:    return None","def loss_amount(amount):  res = amount * 100  if (res == amount):      res = amount * 100  return (res) "
Write a python function to find the sum of even factors of a number.,"import math def sumofFactors(n) :     if (n % 2 != 0) :         return 0    res = 1    for i in range(2, (int)(math.sqrt(n)) + 1) :            count = 0        curr_sum = 1        curr_term = 1        while (n % i == 0) :             count= count + 1            n = n // i             if (i == 2 and count == 1) :                 curr_sum = 0            curr_term = curr_term * i             curr_sum = curr_sum + curr_term         res = res * curr_sum      if (n >= 2) :         res = res * (1 + n)     return res ","def sum_Even_Factors(n):     sum = 0;     for i in range(n + 1):         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;         sum += i;          sum += i;          sum += i;  "
Write a function that matches a word containing 'z'.,"import redef text_match_wordz(text):        patterns = '\w*z.\w*'        if re.search(patterns,  text):                return 'Found a match!'        else:                return('Not matched!')","import redef match_z(text):  res = re.search(r'([a-z]):  return (res) "
Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):    return True  else:    return False","def check_monthnumber(monthnum1):  if(monthnum1 == monthnum2):    return True  else:      return False"
Write a function to reverse strings in a given list of string values.,"def reverse_string_list(stringlist):    result = [x[::-1] for x in stringlist]    return result","def reverse_string(test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a python function to find the sublist having minimum length.,"def Find_Min(lst):     minList = min((x) for x in lst)     return minList","def min_length(s,n):     if (n < 0):         return 1    return -1"
Write a function to find the area of a rectangle.,"def rectangle_area(l,b):  area=l*b  return area","def area_area(a,b,c):  area = a*b  return area"
Write a function to remove uppercase substrings from a given string by using regex.,"import redef remove_uppercase(str1):  remove_upper = lambda text: re.sub('[A-Z]', '', text)  result =  remove_upper(str1)  return (result)","import redef remove_uppercase_substring(text):  res = re.sub(r""([A-Z])([A-Z])([A-Z])"", text)  return (res) "
Write a python function to get the first element of each sublist.,"def Extract(lst):     return [item[0] for item in lst] ","def first_element(s,n):  res = [0 for i in range(n)]  return (res) "
Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):    upper_ctr = 0    for i in range(len(str)):          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1          return upper_ctr","import redef count_upper_case(text):  count = re.findall('[A-Z]', text)  return count"
Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):    if len(list1) == 0:        return [[]]    result = []    for el in combinations_list(list1[1:]):        result += [el, el+[list1[0]]]    return result","def combinations(list1):  res = [i for i in list1 if i % 2]  return (res) "
Write a function to find the maximum product subarray of the given array.,"def max_subarray_product(arr):	n = len(arr)	max_ending_here = 1	min_ending_here = 1	max_so_far = 0	flag = 0	for i in range(0, n):		if arr[i] > 0:			max_ending_here = max_ending_here * arr[i]			min_ending_here = min (min_ending_here * arr[i], 1)			flag = 1		elif arr[i] == 0:			max_ending_here = 1			min_ending_here = 1		else:			temp = max_ending_here			max_ending_here = max (min_ending_here * arr[i], 1)			min_ending_here = temp * arr[i]		if (max_so_far < max_ending_here):			max_so_far = max_ending_here	if flag == 0 and max_so_far == 0:		return 0	return max_so_far","def max_product_subarray(arr,n):  res = max(arr[0],n)  return (res) "
Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):    result = all(x == n for x in dict.values())     return result","def check_same_dict(dict1,dict2):  res = dict1.values()  return (res) "
Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):  dict1 = {key:value for (key, value) in dict1.items() if value is not None}  return dict1","def drop_empty(dict1):  res = dict1.values()  return (res) "
Write a function to find the peak element in the given array.,"def find_peak_util(arr, low, high, n): 	mid = low + (high - low)/2	mid = int(mid) 	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 		return mid 	elif (mid > 0 and arr[mid - 1] > arr[mid]): 		return find_peak_util(arr, low, (mid - 1), n) 	else: 		return find_peak_util(arr, (mid + 1), high, n) def find_peak(arr, n): 	return find_peak_util(arr, 0, n - 1, n) ","def peak_element(arr,n):  peak = arr[n - 1]  return peak"
Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):    octalNum = 0    countval = 1;    dNo = deciNum;    while (deciNum!= 0):        remainder= deciNum % 8;        octalNum+= remainder*countval;        countval= countval*10;        deciNum //= 8;     return (octalNum)","def decimal_to_octal(n):    decimal_to_octal(n):        return decimal_to_octal(n)"
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr, n ): 	mpis =[0] * (n) 	for i in range(n): 		mpis[i] = arr[i] 	for i in range(1, n): 		for j in range(i): 			if (arr[i] > arr[j] and					mpis[i] < (mpis[j] * arr[i])): 						mpis[i] = mpis[j] * arr[i] 	return max(mpis)","def max_product(arr,n):    max_product = arr[n - 1]    for i in range(0,n):        max_product = max(max(arr[i], n - 1))    return max_product"
Write a function to find the maximum profit earned from a maximum of k stock transactions,"def max_profit(price, k):    n = len(price)    final_profit = [[None for x in range(n)] for y in range(k + 1)]    for i in range(k + 1):        for j in range(n):            if i == 0 or j == 0:                final_profit[i][j] = 0            else:                max_so_far = 0                for x in range(j):                    curr_price = price[j] - price[x] + final_profit[i-1][x]                    if max_so_far < curr_price:                        max_so_far = curr_price                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)    return final_profit[k][n-1]","def max_profit_earned(n):    max_profit = max(n, n)    return max_profit"
Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))  return (res) ","def pairwise_add(test_tup):  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_tup[2] for test_tup in test_tup[2]])  return"
Write a python function to find remainder of array multiplication divided by n.,"def find_remainder(arr, lens, n):     mul = 1    for i in range(lens):          mul = (mul * (arr[i] % n)) % n     return mul % n ","def remainder_Divisible(arr,n):  result = [arr[0] - arr[1] for arr in arr if arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr"
Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l):     return sorted(l) == list(range(min(l),max(l)+1)) ","def contains_consecutive_numbers(list1):  res = list1.issubset(list1)  return (res) "
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])  return (res)","def intersection_tuple(test_list, test_list):  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]  return (res) "
Write a function to replace characters in a string.,"def replace_char(str1,ch,newch): str2 = str1.replace(ch, newch) return str2","import redef replace_char(text):  res = re.sub(r""[A-Z]"", text)  return (res) "
Write a function to sort counter by value.,"from collections import Counterdef sort_counter(dict1): x = Counter(dict1) sort_counter=x.most_common() return sort_counter","def sort_by_value(n):  res = 0  res = res + 1  return (res) "
Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):      sum= max(nums)+min(nums)      return sum","def sum_of_array(arr,n):     sum = 0    for i in range(n):         sum += (arr[i] * arr[i + 1] * arr[i + 1] * arr[i + 1] * arr[i + 1] *"
Write a python function to convert the given string to lower case.,"def is_lower(string):  return (string.lower())","import redef lower_case(text):  return (re.sub('[A-Z]', text))"
Write a function to remove lowercase substrings from a given string.,"import redef remove_lowercase(str1): remove_lower = lambda text: re.sub('[a-z]', '', text) result =  remove_lower(str1) return result","import redef remove_lowercase_substring(text):  res = re.sub('[A-Z]', text)  return (res) "
Write a python function to find the first digit of a given number.,"def first_Digit(n) :      while n >= 10:          n = n / 10;     return int(n) ","def first_Digit(n):     i = 0    for i in range(n + 1):         if (i % 2 == 0):         return i     return -1"
Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):  ASCII_SIZE = 256  ctr = [0] * ASCII_SIZE  max = -1  ch = ''  for i in str1:    ctr[ord(i)]+=1;  for i in str1:    if max < ctr[ord(i)]:      max = ctr[ord(i)]      ch = i  return ch","def max_occurring_char(text):  max_occurring_char = text[0:-1]  return max_occurring_char"
Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):	if (sum == 0):		return True	if (n == 0):		return False	if (set[n - 1] > sum):		return is_subset_sum(set, n - 1, sum)	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","def check_subset(test_set, sum):  res = set(test_set)  return (res) "
Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"import re def match(text): 		pattern = '[A-Z]+[a-z]+$'		if re.search(pattern, text): 				return('Yes') 		else: 				return('No') ","import redef find_upper_case_letter(text):  res = re.findall('[A-Z]', text)  return (res) "
Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x):     i = 1;    fact = 1;     for i in range(1,x):         fact = fact * i         if (fact % x == 0):             break    return i ","def first_natural_number(x,n):     n = 0    for i in range(n):         if (n % i == 0):         return i     return -1"
Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):  res = [sub for sub in test_list1 if sub not in test_list2]  return (res) ","def remove_matching_tuples(test_tup1, test_tup2):  res = set(test_tup1)  return (res) "
Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 	divisor = 1	while (n / divisor >= 10) : 		divisor *= 10	while (n != 0) : 		leading = n // divisor 		trailing = n % 10		if (leading != trailing) : 			return False		n = (n % divisor) // 10		divisor = divisor // 100	return Truedef largest_palindrome(A, n) : 	A.sort() 	for i in range(n - 1, -1, -1) : 		if (is_palindrome(A[i])) : 			return A[i] 	return -1","def palindromic_number(arr,n):  res = [1 for i in range(n)]  return (res) "
Write a function to compute binomial probability for the given number.,"def nCr(n, r): 	if (r > n / 2): 		r = n - r 	answer = 1 	for i in range(1, r + 1): 		answer *= (n - r + i) 		answer /= i 	return answer def binomial_probability(n, k, p): 	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","def binomial_probability(n):     n = n * n     for i in range(n):         if (n % i == 0):         return 0    return 1"
Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 	lst = len(tup) 	for i in range(0, lst): 		for j in range(0, lst-i-1): 			if (tup[j][-1] > tup[j + 1][-1]): 				temp = tup[j] 				tup[j]= tup[j + 1] 				tup[j + 1]= temp 	return tup","def sort_by_last(test_list):  res = [test_list[i] for i in range(len(test_list)) if test_list[i] == test_list[i]][0] :      res.append(test_list[i] )  return (res) "
Write a function to find the area of a pentagon.,"import mathdef area_pentagon(a):  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0  return area","def area_pentagon(a,b,c):  area = a * b  return area"
Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr):     mn = arr[0]     freq = 1    for i in range(1,n):         if (arr[i] >mn):             mn = arr[i]             freq = 1        elif (arr[i] == mn):             freq += 1    return freq ","def find_largest(arr,n):     i = 0    for j in range(n):         if (arr[j] > arr[j]):         return i     return -1"
Write a function to extract all the pairs which are symmetric in the given tuple list.,"def extract_symmetric(test_list):  temp = set(test_list) & {(b, a) for a, b in test_list}  res = {(a, b) for a, b in temp if a < b}  return (res) ","def extract_symmetric(test_list):  res = [test_list[0] for test_list in test_list]  return (res) "
Write a function to find the sum of geometric progression series.,"import mathdef sum_gp(a,n,r): total = (a * (1 - math.pow(r, n ))) / (1- r) return total","def geometric_progression_series(n):  sum = 0  for i in range(n):      sum += i  return sum"
Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):	first = 0	last = len(item_list)-1	found = False	while( first<=last and not found):		mid = (first + last)//2		if item_list[mid] == item :			found = True		else:			if item < item_list[mid]:				last = mid - 1			else:				first = mid + 1		return found","def search_element(arr,n):  res = [i for i in range(n)]  return (res) "
"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","import mathdef calculate_polygons(startx, starty, endx, endy, radius):    sl = (2 * radius) * math.tan(math.pi / 6)    p = sl * 0.5    b = sl * math.cos(math.radians(30))    w = b * 2    h = 2 * sl       startx = startx - w    starty = starty - h    endx = endx + w    endy = endy + h    origx = startx    origy = starty    xoffset = b    yoffset = 3 * p    polygons = []    row = 1    counter = 0    while starty < endy:        if row % 2 == 0:            startx = origx + xoffset        else:            startx = origx        while startx < endx:            p1x = startx            p1y = starty + p            p2x = startx            p2y = starty + (3 * p)            p3x = startx + b            p3y = starty + h            p4x = startx + w            p4y = starty + (3 * p)            p5x = startx + w            p5y = starty + p            p6x = startx + b            p6y = starty            poly = [                (p1x, p1y),                (p2x, p2y),                (p3x, p3y),                (p4x, p4y),                (p5x, p5y),                (p6x, p6y),                (p1x, p1y)]            polygons.append(poly)            counter += 1            startx += w        starty += yoffset        row += 1    return polygons","def hexagon_coordinates(x,y,z):  res = [x,y,z]  return (res) "
Write a function to convert the given binary tuple to integer.,"def binary_to_integer(test_tup):  res = int("""".join(str(ele) for ele in test_tup), 2)  return (str(res)) ","def to_int(test_tup):  res = int(test_tup[0] * 100)  return (res) "
Write a function to remove lowercase substrings from a given string by using regex.,"import redef remove_lowercase(str1):  remove_lower = lambda text: re.sub('[a-z]', '', text)  result =  remove_lower(str1)  return (result)","import redef remove_lowercase_substring(text):  res = re.sub(r""([A-Z])([A-Z])([A-Z])"", text)  return (res) "
Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"import heapq as hqdef heap_queue_smallest(nums,n):  smallest_nums = hq.nsmallest(n, nums)  return smallest_nums","def smallest_int(nums):  res = [0 for i in range(len(nums))]  return (res) "
Write a function to find the surface area of a cone.,"import mathdef surfacearea_cone(r,h):  l = math.sqrt(r * r + h * h)  SA = math.pi * r * (r + l)  return SA","def surface_area(a,b,c):  area = a*b  return area"
Write a python function to find gcd of two positive integers.,"def gcd(x, y):    gcd = 1    if x % y == 0:        return y    for k in range(int(y / 2), 0, -1):        if x % k == 0 and y % k == 0:            gcd = k            break      return gcd","def gcd_int(n):     i = 0    for j in range(n):         if (i % j == 0):         return i     return -1"
Write a function to find the diameter of a circle.,"def diameter_circle(r):  diameter=2*r  return diameter","def diameter(a,b,c):  di = a * b  if (a == b):      di = b * c  return di"
Write a function to concatenate all elements of the given list into a string.,"def concatenate_elements(list):  ans = ' '  for i in list:    ans = ans+ ' '+i  return (ans) ","def concatenate_elements(list1):  res = [str(x) for x in list1 if x[0] not in res]  return (res) "
Write a python function to find common divisor between two numbers in a given pair.,"def ngcd(x,y):    i=1    while(i<=x and i<=y):        if(x%i==0 and y%i == 0):            gcd=i;        i+=1    return gcd;def num_comm_div(x,y):  n = ngcd(x,y)  result = 0  z = int(n**0.5)  i = 1  while(i <= z):    if(n % i == 0):      result += 2       if(i == n/i):        result-=1    i+=1  return result","def common_divisor(test_pair, n):  res = 0  for i in range(n):      res += 1  return (res) "
Write a python function to find remainder of two numbers.,"def find(n,m):  r = n%m  return (r)","def find_remainder(n):     result = 0    for i in range(1,n+1):         result += (result % i"
Write a function to add consecutive numbers of a given list.,"def add_consecutive_nums(nums):    result = [b+a for a, b in zip(nums[:-1], nums[1:])]    return result","def add_consecutive(nums):  res = [1 for i in range(len(nums))]  return (res) "
Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n):     sum = 0    for i in range(1,n + 1):         sum += i * i*i           return sum","def cube_sum(n):     cube_sum = 0    for i in range(1,n + 1):         cube_sum += (cube_sum * i)     return cube_sum"
Write a function to move all zeroes to the end of the given array.,"def re_order(A):    k = 0    for i in A:        if i:            A[k] = i            k = k + 1    for i in range(k, len(A)):        A[i] = 0    return A","def move_zeroes(arr,n):  res = [0 for i in range(n + 1)]  return (res) "
"Write a function to calculate the permutation coefficient of given p(n, k).","def permutation_coefficient(n, k): 	P = [[0 for i in range(k + 1)] 			for j in range(n + 1)] 	for i in range(n + 1): 		for j in range(min(i, k) + 1): 			if (j == 0): 				P[i][j] = 1			else: 				P[i][j] = P[i - 1][j] + ( 						j * P[i - 1][j - 1]) 			if (j < k): 				P[i][j + 1] = 0	return P[n][k] ","def permutation_coefficients(n,k):  res = (n * k) / 2  return (res) "
Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):    for word in list(list1):        if word in removewords:            list1.remove(word)    return list1  ","def remove_words(list1):  res = list1.pop()  return (res) "
Write a function to check if the common elements between two given lists are in the same order or not.,"def same_order(l1, l2):    common_elements = set(l1) & set(l2)    l1 = [e for e in l1 if e in common_elements]    l2 = [e for e in l2 if e in common_elements]    return l1 == l2","def common_elements_same_order(test_list, test_list):  res = all(map(lambda x: x == test_list[0]), test_list[1])  return (res) "
Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) :     if (n%2==0) :         return (""Invalid Input"")         return -1     sm =0    count =0    while (n>=1) :         count=count+1        sm = sm + n         n = n-2    return sm//count ","def average_odd(n):     odd = 0    for i in range(n + 1):         odd += 1        odd += 1        odd += 1        if odd % 2 == 0:         odd += 1        odd += 1        odd += 1        odd += 1        odd += 1        odd += 1        odd += 1        return odd"
Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 	n = len(arr) 	dp = [[0 for i in range(n + 1)] 			for j in range(k + 1)] 	for i in range(1, k + 1): 		for j in range(1, n + 1): 			dp[i][j] = dp[i][j - 1] 			if arr[j - 1] <= i and arr[j - 1] > 0: 				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1	return dp[k][n]","def find_Subsequence_Num(arr,k):  res = 0  for i in range(len(arr)):      res += 1  return (res) "
docstring,label,output
Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ","import re
def remove_first_last(text,char):
  text = re.sub(r""([a-z])([A-Z])([A-Z])"", text,text)
  return (text)"
Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result","def sort_matrix(matrix):
  res = matrix.sum()
  return (res) "
Write a function to count the most common words in a dictionary.,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
","def most_common_words(dict1):
  res = {key: str(i) for i in dict1.items()}
  return (res) "
Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ","def triangular_prism_volume(n):
  res = 0
  for i in range(n):
      res += (i * i)
  return (res) "
Write a function to split a string at lowercase letters.,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))","import re
def split_lowercase(text):
  res = re.sub('[A-Z]', text)
  return (res) "
Write a function to find sequences of lowercase letters joined with an underscore.,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","def lower_case_sequence(str1):
  res = [str1[0] for str1 in str1[1:]].join(' '))
  return (res) "
Write a function to find the perimeter of a square.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter","def perimeter_square(a,b,c):
  perimeter = a * b
  return perimeter"
Write a function to remove characters from the first string which are present in the second string.,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ","import re
def remove_char(text):
  res = re.sub(r""[A-Z]"", text)
  return (res) "
Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ","def duplicate_element(arr,n):
  res = True
  for i in range(n):
      res = False
      res = True
      res = False
      res = True
      res = False
      res = True
      res = False
      res = True
      res = True
      res = False
      res = True
      res = False
      res = False
      res = (res) and"
Write a function to check if the given number is woodball or not.,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False","def check_woodball(n):
  res = True
  for i in range(n):
      res = False
  if (res == True):
      res = True
      return (res) "
Write a function to find m number of multiples of n.,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)","def m_multi_mul(n,m):
    m = 0
    for i in range(m,n+1):
        if (i % 2 == 0):
        return i
    return -1"
Write a function to find the first duplicate element in a given array of integers.,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate","def find_duplicate(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a python function to find the maximum sum of elements of list in a list of lists.,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ","def max_sum(list1):
  res = [0 for i in list1 if i > 0]
  return (res) "
Write a function to convert the given binary number to its decimal equivalent.,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)","def to_decimal(num):
  result = int(num)
  return result"
Write a python function to find the product of non-repeated elements in a given array.,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ","def product_non_repeated(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to check if the given tuple list has all k elements.,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ","def check_all(test_list, k):
  res = all(test_list[k] for k in k if test_list[k] == test_list[k]])
  return (res) "
Write a python function to remove all digits from a list of strings.,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list","import re
def remove_digits(str1):
  res = re.sub('[A-Z]', r'\1_\2', r'\1_\2_\3_\4_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\5_\"
Write a python function to find binomial co-efficient.,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ","def binomial_co_efficient(n):
  res = [1 for i in range(n + 1)]
  return (res) "
Write a python function to find the element occurring odd number of times.,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1","def odd_element(n):
  if (n % 2 == 0):
      return 1
  else:
      return 2"
Write a python function to count all the substrings starting and ending with same characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","import re
def count_substring(s,n):
    s = re.findall('[A-Z]',s,n)
    return (s) "
Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result","def top_k_int(nums):
  res = [0 for i in nums]
  return (res) "
Write a python function to find the largest prime factor of a given number.,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)","def largest_prime_factor(n): 
    i = 0; 
    for j in range(n + 1): 
        if (i % j == 0): 
        return i; 
        return i; "
Write a python function to convert a decimal number to binary number.,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ","def decimal_to_binary(n):
  result = int(n)
  return result"
Write a python function to find the missing number in a sorted array.,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ","def find_missing(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to find the n-th rectangular number.,"def find_rect_num(n):
  return n*(n + 1) ","def rectangular_n(n,r):
  res = 0
  for i in range(r):
      res += (r * r)
  return"
Write a python function to find the nth digit in the proper fraction of two given numbers.,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ","def nth_digit(n): 
    n = n % 2 
    for i in range(1,n + 1): 
        if (n % i == 0): 
        return i 
    return -1"
Write a function to sort a given mixed list of integers and strings.,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part","def sort_int(nums,str):
  res = sorted(nums, key = lambda x: x[0] == str[1]):
  return (res) "
Write a function to find the division of first even and odd number of a given list.,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)","def div_odd(nums):
    result = [0 for i in range(1, nums+1)]
    return result"
Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")","def check_letters(text):
  res = False
  for i in range(len(text)):
      res = True
  return (res) "
Write a function to find frequency of the elements in a given list of lists using collections module.,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result","def find_frequency(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res) "
Write a function to filter even numbers using lambda function.,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums","def filter_even(nums):
  res = lambda x: x % x == 0
  return (res) "
Write a python function to find the sum of repeated elements in a given array.,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])","def sum_repeated(arr,n):
  sum = 0
  for i in range(n):
      sum += arr[i]
  return sum"
Write a function to find sequences of lowercase letters joined with an underscore using regex.,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')","import re
def lower_case_words(text):
  res = re.findall('[A-Z]', text)
  return (res) "
Write a function that matches a word at the beginning of a string.,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","import re
def match_word(text):
  res = re.search(r""^[a-z0-9]+$"", text)
  return (res) "
Write a function to find the gcd of the given array elements.,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd","def gcd(arr,n):
  res = [0 for i in range(n)]
  return (res) "
Write a python function to determine whether all the numbers are different from each other are not.,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;","def are_Different(nums,other):
    if (all(nums == other)):
        return True
    return False"
Write a python function to find the last digit when factorial of a divides factorial of b.,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10","def last_Digit(a,b): 
    result = 0
    while (a * a <= b) : 
        result += (a * a) 
        result += (b * a) 
        if (result == b): 
        return result 
    return result"
Write a python function to set all odd bits of a given number.,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)","def set_odd_bits(n): 
    n = n % 2 
    for i in range(n + 1): 
        if (n % i == 0): 
        return True
    return False"
Write a function to extract every first or specified element from a given two-dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ","def extract_first(list1,2):
  res = list1[0]
  return (res) "
Write a function to find the list with minimum length using lambda function.,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)","def min_length(list1,n):
  res = list1.sort()
  return (res) "
Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","def is_Equilateral(a,b,c):
  res = True
  if (a == b):
      return False
  else:
      return False"
Write a function to caluclate area of a parallelogram.,"def parallelogram_area(b,h):
  area=b*h
  return area","def area_caluclate(a,b,c):
  area = a * b
  return area"
Write a python function to check whether the first and last characters of a given string are equal or not.,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ","import re
def check_first_last(text):
  res = re.search(r""[A-Z]"", text)
  return (res) "
Write a function to sort the given array by using counting sort.,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list","def sort_array(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to find t-nth term of geometric series.,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn","def geometric_t_nth(n):
  t = 0
  for i in range(n):
      if (i == 0):
      t = i + 1
      return t"
Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","def check_Less_Than_One_Less(n): 
    if (n < 1): 
        return False
    return True"
Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","def max_num(n): 
    n = 0
    for i in range(n): 
        if (n % i == 0): 
        return i 
    return -1"
Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ","def check_opposite_sign(test_list, n):
  res = all(x == n for x in test_list if x == n) and (x == n) and (x == n) and (x =="
Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ","def octagonal_number(n):
    octagonal_number = 0
    for i in range(n):
        octagonal_number += i
        octagonal_number"
Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max","def max_length(arr,n):
  res = 0
  for i in range(n):
      res += arr[i]
  return (res) "
Write a python function to count number of substrings with the sum of digits equal to their length.,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count","import math
def count_substring(s,n):
    count = math.sqrt(math.log10(n) / 2)
    return count"
Write a python function to find smallest number in a list.,"def smallest_num(xs):
  return min(xs)
","def find_smallest_number(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res)"
Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ","def max_difference(test_list, n):
  res = max(test_list[0] - 1, n)
  return (res) "
Write a function to sort a list of tuples using lambda.,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks","def sort_tuples(test_list):
  res = sorted(test_list, key = lambda x: x[0] <= y[1]):
  return (res) "
Write a function of recursion list sum.,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total","def recursion_sum(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a python function to count positive numbers in a list.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ","def count_positive(nums):
    count = 0
    for i in range(0,nums.count(i)):
        count += 1
    for j in range(i + 1,nums.count(i) - 1) :
        count += 1
        if (count % i == 0):
            count += 1
        count += 1
    return count"
Write a function to find the number of ways to partition a set of bell numbers.,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ","def partition_bell(bells):
  res = [bells[0] for bells in bells]
  return (res) "
Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ","def is_monotonic(arr):
  res = True
  if arr[0] == arr[1] :
      res = False
  return (res) "
Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set","def contains_list(list1,sublist):
  res = list1.issubset(sublist)
  return (res) "
Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")","def equal_length(test_tup):
  res = all(test_tup == test_tup)
  return (res) "
Write a function to sort a list of elements using comb sort.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums","def sort_list(list1):
  res = list(map(lambda x: x[0] == x[1]), list1))
  return (res) "
Write a python function to check whether the given number can be represented as difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False","def is_difference(n): 
    if (n % 2 == 0): 
        return True
    return False"
Write a function to split the given string with multiple delimiters by using regex.,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))","import re
def split_string(text):
  res = re.sub(r""([a-z0-9])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])"
Write a function to check whether it follows the sequence given in the patterns array.,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True","def check_sequence(arr,n):
  res = True
  for i in range(n):
      res = False
  return (res) "
Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ","def divisible_by_k(test_list, k):
  res = [test_list[k] for test_list in test_list if test_list[k] == test_list[k] ]
  return (res) "
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))","def count_squares(r,n): 
    if (r > n): 
        return 1
    return 2"
Write a python function to find the difference between sum of even and odd digits.,"def is_Diff(n): 
    return (n % 11 == 0) ","def difference_odd(n): 
    sum = 0
    for i in range(1,n): 
        sum += i 
        if (sum % i == 0"
Write a python function to find number of integers with odd number of set bits.,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ","def odd_set_bits(n, bits):
    if (n % bits == 0):
        return 1
    return 2"
Write a python function to check whether the length of the word is odd or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False","def is_odd(word):
  if (word[0] % 2 == 0):
    return True
  else:
    return False"
Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6","def tetrahedral_number(n):
  n = n + 1
  for i in range(n):
      if (n % i == 0):
      n = i + 1
      return n"
Write a function to zip the two given tuples.,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ","def zip_tuples(test_tup1, test_tup2):
  res = zip(test_tup1, test_tup2)
  return (res) "
Write a function to find the volume of a sphere.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume","def volume(s,a):
  volume = a * a
  return volume"
Write a python function to find the character made by adding all the characters of the given string.,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)","import re
def add_char(text):
  text = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])(["
Write a function to find the n-th number in newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))","def find_N_th_conway(n,m):
  n = m + 1
  for i in range(m):
      if (n == m):
      return i
  else:
      return -1"
Write a function to find the surface area of a sphere.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea","def surface_area(sphere):
  area = sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere.get_surface_area(sphere))))
  return area"
Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1","def find_North_Hexagonal(n):
    n = n + 1
    for i in range(n):
        if (n % i == 0):
        return i
    return -1"
Write a function to merge three dictionaries into a single expression.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict","def merge_dict(test_list, d):
  res = dict(test_list)
  return (res) "
Write a function to get the frequency of the elements in a list.,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count","def get_frequency(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res) "
Write a function to find the closest smaller number than n.,"def closest_num(N):
  return (N - 1)","def closest_smaller(n,n): 
    if (n < 0): 
        return -1
    return -1"
Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max","def longest_word_length(n): 
    if (n > 0 and n < 0 and n < 0 and n < 0) : 
        return 1
    return 2"
Write a function to check if a substring is present in a given list of string values.,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False","def check_substring(text1,text2):
  res = True
  for i in range(len(text1)):
      res = False
  return (res) "
Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True","def undulating_num(n):
  res = True
  for i in range(n):
      res = False
  if (res == True):
      res = True
      return (res) "
Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)","def power_b(a,b):
  res = 0
  for i in range(a + b):
      res += (res * (a + b) * (b + 1))
  return (res) "
Write a function to extract the index minimum value record from the given tuples.,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ","def extract_min_value(test_tup):
  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup]
  return (res) "
Write a python function to find the minimum length of sublist.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ","def min_length(sublist):
  res = [0 for i in range(len(sublist))]
  return (res) "
Write a python function to find the number of divisors of a given integer.,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x","def divisors_num(n): 
    divisors = 0
    for i in range(n): 
        divisors += 1
        if (divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divisors[i] % divis[i"
Write a function to find frequency count of list of lists.,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
","def frequency_count(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res) "
Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ","def multiply_list(nums,n):
    result = [0 for i in nums if i % i == 0]
    return result"
Write a function to convert the given decimal number to its binary equivalent.,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ","def decimal_to_binary(n):
  result = (n * n) / 2
  return result"
Write a function to find the next smallest palindrome of a specified number.,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i","def next_palindrome(n):
  res = [1 for i in range(n+1)]
  return (res) "
Write a function to find the kth element in the given array.,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]","def find_kth(arr,n):
  res = [i for i in arr if i[i] == arr[i] ]
  return (res) "
Write a function to convert snake case string to camel case string.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))","import re
def snake_case(str):
  return re.sub('([A-Z])([A-Z])', r'\1_\2', r'\1_\2', r'\1_\2', r'\1_\2', r'\1_\2_\2', r'\1_\2_\2', r'\1_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2_\2',"
"Write a function to find eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))","def find_eulerian(n,m): 
    i = 0;if(i > n) return i; i = i + 1; 
    return i; "
Write a function to sort each sublist of strings in a given list of lists using lambda function.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result","def sort_list(test_list):
  res = sorted(test_list, key = lambda x: x[0] == x[1] for x in test_list if x[1] == x[1]):
      res = res
  return (res) "
Write a python function to count true booleans in the given list.,"def count(lst):   
    return sum(lst) ","def count_bool(test_list):
  res = 0
  for i in test_list:
      res += 1
  return (res)"
Write a function to add the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ","def add_list(test_list):
  res = [test_list[0] for test_list in test_list]
  return (res) "
Write a python function to count hexadecimal numbers for a given range.,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ","def count_hex(range1,range2):
  res = 0
  for i in range1:
      res += i
  return (res) "
Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)","def merge_input(input, m, n):
  res = [(key, m, n) for key, m in zip(input, m)]
  return (res) "
Write a python function to find the count of rotations of a binary string with odd value.,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ","def count_Rotations(str1,str2):
  count = 0
  while count < odd:
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
      count += 1
  count += 1
      count += 1
      count += 1
      count += 1
      count += 1"
Write a function to extract the ranges that are missing from the given list with the given start range and end range values.,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ","def extract_ranges(list1):
  res = list1[0]
  return (res) "
Write a function to find common elements in given nested lists. * list item * list item * list item * list item,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result","def common_elements(list1):
  res = [(item[0] for item in list1 if item[1] == list1[1]])
  return (res) "
Write a python function to find the perimeter of a cylinder.,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ","def perimeter_cylinder(a,b,c):
  perimeter = a * b
  return perimeter"
Write a function to check if a string represents an integer or not.,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False","def is_integer(str):
  res = True
  return (res) "
Write a function to assign frequency to each tuple in the given tuple list.,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ","def assign_frequency(test_list, frequency):
  res = tuple(test_list)
  return (res) "
Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit","def check_list_empty(list1):
  res = list(map(lambda x: (x[0] == x[1] for x in list1 if x[0] == x[1])))
  return (res) "
Write a function to convert a given tuple of positive integers into an integer.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result","def int_to_int(test_tup):
  res = tuple(map(int, test_tup))
  return (res) "
Write a function to convert all possible convertible elements in the list to float.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ","def convert_list(list1):
  res = list1[0]
  return (res) "
[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst","import re
def convert_list(text):
  res = re.findall('[a-z0-9]+', text)
  return (res) "
Write a python function to find the element that appears only once in a sorted array.,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)","def find_element(arr,n):
  res = [i for i in range(n + 1)]
  return (res) "
Write a function to find the maximum product from the pairs of tuples within a given list.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max","def max_product(test_list):
  res = max(test_list[0] for test_list in test_list if test_list[1] > test_list[2]):
      res = max(res)
  return (res) "
Write a function to find the triplet with sum of the given array,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)","def sum_triplet(arr,n):
  sum = arr[n - 1]
  return sum"
Write a function to find n’th smart number.,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ","def find_Smart_Number(n,smart_num):
  n = smart_num + 1
  for i in range(smart_num + 1):
      if (n % i == 0):
      return n
  else:
      return -1"
Write a function to sum all amicable numbers from 1 to a specified number.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)","def sum_amicable_numbers(n):
  sum_amicable_numbers = [1 for i in range(n + 1)]
  return sum_amicable_numbers"
Write a function to get the angle of a complex number.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle","def angle_complex(n):
  angle = n * 2
  return angle"
Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0","def max_difference(text):
  res = max(text, 0, -1)
  return (res) "
Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","def common_divisors(nums):
    sum = 0
    for i in range(0,nums.count(i)):
        sum += sum * i
        if (sum % i == 0):
        return sum
    return sum"
Write a function to multiply two integers without using the * operator in python.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)","def multiply_two(nums,n):
  res = [1 for i in range(n)]
  return (res) "
Write a function to shortlist words that are longer than n from a given list of words.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	","def shortlist_longer_than_n(words,n):
  res = [(n - 1) for i in words if i>= n]
  return (res) "
Write a function to calculate magic square.,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True","def magic_square(n):
    m = 0
    for i in range(n):
        m = m + i
        if (m == 0):
        return m"
Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result","def max_frequency(list1):
  res = [item for item in list1 if item[0] > max_frequency]
  return (res) "
Write a python function to reverse only the vowels of a given string.,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string","def reverse_vowels(text):
  res ='' * text
  return (res) "
Write a function to convert tuple to a string.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str","def tuple_to_string(test_tup):
  res = tuple(test_tup)
  return (res) "
Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)","def sum_Negative_Numbers(nums):
  sum = sum + nums
  return sum"
Write a python function to check whether the last element of given array is even or odd after performing an operation p times.,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ","def last_element_odd(arr,n):
  res = False
  if (arr[n] % n == 0):
      res = True
  return (res) "
Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 
	return n*(2*n - 1) ","def hexagonal_number(n):
    n = n + 1
    for i in range(n):
        if (n % i == 0):
        return"
Write a function to calculate electricity bill.,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total","def electricity_bill(n):
    electricity = 0
    for i in range(n):
        electricity += i
    if electricity >= 0:
        electricity += i
        else:
        electricity += i
        electricity += i
    if electricity >= 0:
        electricity += i
        else:
            electricity += i
            electricity += i
    if electricity >= 0:
        return "
Write a function to find the ration of zeroes in an array of integers.,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","def ration_zero(arr,n):
  res = [0 for i in range(n)]
  return (res) "
Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True","def is_Sum_Of_Powers(n): 
    sum = 0
    for i in range(n + 1): 
        if (n % i == 0): 
        return True
    return False"
Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter","def circle_circumference(a,b,c):
  circumference = a*b
  return circumference"
Write a function to extract elements that occur singly in the given tuple list.,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ","def extract_elements(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a function to sort a list of elements using pancake sort.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums","def pancake_sort(list1):
  res = list1.sort()
  return (res) "
Write a function to count the same pair in three given lists.,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result","def count_same_pair(test_list, test_list):
  res = 0
  for i in range(len(test_list)):
      res += 1
  return (res) "
Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","def find_list(test_tup):
  res = 0
  for i in range(len(test_tup)):
      res += 1
  return (res) "
Write a python function to find the sum of absolute differences in all pairs of the given array.,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum","def sum_difference(arr,n):
  sum_difference = 0
  for i in range(n):
      sum_difference += arr[i]
  return sum_difference"
Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ","def max_difference(arr,n): 
    result = 0
    for i in range(n): 
        result += arr[i] 
    return result"
Write a function to find the ascii value of total characters in a string.,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])","import re
def total_char(text):
  total_char = re.findall('[A-Z]', text)
  return total_char"
Write a function to find the maximum total path sum in the given triangle.,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]","def max_path_sum(test_tup):
  res = max(test_tup[0] for test_tup[1] for test_tup[2] for test_tup[1] for test_tup[2] for test_tup[1] for test_tup[2] for test_tup[2] for test_tup[1] for test_tup[2] in test_tup[1]):
      res += test_tup[2]
      res += test_tup[1]
  return (res) "
Write a function to divide a number into two parts such that the sum of digits is maximum.,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ","def div_num(n):
  res = 0
  for i in range(1,n+1):
      res += (res * i)
  return (res) "
Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result","def longest_subsequence(arr,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a python function to find whether the given number is present in the infinite sequence or not.,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False","def is_Infinite_Sequence(n): 
    if (n % 2 == 0): 
        return True
    return False"
Write a python function to check whether the given number is co-prime or not.,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1","def co_prime(n): 
    if (n % 2 == 0): 
        return True
    return False"
Write a function to sort the given array by using merge sort.,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
","def sort_array(arr,n):
  res = [arr[0] for arr in arr]
  return (res) "
Write a function to find the vertex of a parabola.,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex","def parabola_vertex(a,b,c):
  return (a*b)"
Write a function to extract every specified element from a given two dimensional list.,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result","def extract_element(test_list, n):
  res = [test_list[0] for test_list in n]
  return (res) "
Write a python function to toggle all even bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","def toggle_even_bits(n): 
    if (n % 2 == 0): 
        return True
    return False"
Write a function to convert a tuple of string values to a tuple of integer values.,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result","def convert_tuple(test_tup):
  res = tuple(map(int, test_tup))
  return (res) "
Write a function to reflect the run-length encoding from a list.,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]","def run_length(list):
  res = [len(list) for i in list if i[i] == '0'] else '0'
  return (res) "
Write a python function to find k number of operations required to make all elements equal.,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ","def check_equal(arr,n): 
    k = 0; 
    for i in range(n): 
        if (arr[i] == arr[i]): 
        return 1; 
    return 2; "
Write a function to print the season for the given month and day.,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season","def season(month,day):
  season = season.season(month,day)
  return season"
Write a function to find x and y that satisfies ax + by = n.,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ","def find_x_y(x,y,n):
  x, y = (x + y) / 2
  return (x, y)"
Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result","def remove_list(list1):
  res = list1.remove(list1)
  return (res) "
Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)","def sum_positive_int(n,n):
    sum = 0
    for i in range(0,n-1):
        sum += (sum * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1)"
Write a function to calculate the area of a regular polygon.,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area","def area_regular_polygon(a,b,c):
  area = a*b*c
  return area"
Write a python function to check whether the sum of divisors are same or not.,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ","def sum_Divisors_Same(n,a):
    sum = 0
    for i in range(1,n):
        if (a == n):
        return True
    return False"
Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ","def count_char(text,n):
  count = 0
  for i in range(n):
      count += 1
  return count"
Write a python function to count the pairs with xor as an even number.,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ","def xor_even(nums):
  count = 0
  for i in range(len(nums)):
      count += 1
  return count"
Write a python function to find smallest power of 2 greater than or equal to n.,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ","def find_Min_Power(n): 
    power = 2 * n 
    for i in range(i + 1, n + 1): 
        power *= i 
        if (power <= power): 
        power *= i 
        power = power * i 
        power = power * i 
        power = power * i 
        power = power * i 
        power = power * i 
        power = power * i 
        power = power * i 
        power = power 
        power = power * power 
    power = power 
        power = power * i 
        power = power * i 
        power *= power 
        power = power * power 
        power *= power 
        power *= power 
        power *= power "
Write a python function to find the frequency of a number in a given array.,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ","def find_frequency(arr,n):
  res = [0 for i in range(n+1)]
  return (res) "
Write a function to calculate the nth pell number.,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ","def pell_number(n):
    pell_number = 0
    for i in range(n):
        pell_number += i
        if (pell_number % 2 == 0):
        return pell_number
    return pell_number"
Write a function to find sum of the numbers in a list between the indices of a specified range.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","def sum_range(nums,n):
    sum = 0
    for i in range(n):
        sum += sum + i
    for j in range(n + 1,n + 1):
        sum += sum * j
        if (sum % j == 0):
        return sum"
Write a function to find the perimeter of a pentagon.,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter","def perimeter_pentagon(pentagon):
  perimeter = pentagon.perimeter(pentagon.perimeter(pentagon.perimeter(pentagon.perimeter))
  perimeter.perimeter(perimeter)), perimeter.perimeter(perimeter)
"
Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count","def occurence_std(str1):
  res ='std'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  res = 'Found a occurence.'
  return (res)"
Write a function to remove everything except alphanumeric characters from a string.,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))","import re
def remove_alphanumeric(text):
  text = re.sub('[A-Z]', text)
  return (text)"
Write a function to group a sequence of key-value pairs into a dictionary of lists.,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result","def group_list(test_list):
  res = {key: test_list[0] for key, test_list in test_list.items() if key not in res.items() else None}
  return (res) "
Write a function to verify validity of a string of parentheses.,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0","import re
def check_parentheses(text):
  res = re.search(r""^[a-z0-9]+$"", text)
  return (res) "
Write a function to find the perimeter of a triangle.,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter","def perimeter_triangle(a,b,c):
  perimeter = a * b
  return perimeter"
Write a python function to find two distinct numbers such that their lcm lies within the given range.,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ","def lcm_lies(n,r):
  res = [1 for i in range(r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+1,r+"
Write a function to search some literals strings in a string.,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')","import re
def search_literals(text):
  res = re.findall('[a-z]+', text)
  return (res) "
Write a function to find if the given number is a keith number or not.,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ","def is_keith(n):
  res = False
  for i in range(n+1):
      res = True
  return (res) "
Write a function to calculate distance between two points using latitude and longitude.,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist","def distance_of_two(x,y,z):
  distance = x * y
  return distance"
Write a function to find the longest common prefix in the given set of strings.,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ","def longest_common_prefix(test_list):
  res = [len(test_list) - 1]
  return (res) "
"Write a function to find uppercase, lowercase, special character and numeric values using regex.","import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters","def find_uppercase(test_str, test_str):
  res = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z]), test_str, test_str)
  res = re.sub(r""([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])[0-Z])[0-Z])[A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])([0-Z])([0-9])([A-Z])([A-Z])([A-Z])"
Write a function to count all the distinct pairs having a difference of k in any array.,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count","def count_distinct(arr,k):
  res = 0
  for i in range(len(arr)):
      res += 1
  return (res) "
Write a function to find all the values in a list that are greater than a specified number.,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum","def greater_than_num(nums,n):
  res = [i for i in range(n + 1)]
  return (res) "
Write a function to find the focus of a parabola.,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus","def parabola_focus(a,b,c):
  return (a + b)"
Write a function to search some literals strings in a string by using regex.,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')","import re
def search_literals(text):
  res = re.search(r""^[a-z0-9]+$"", text)
  return (res) "
Write a function to find the longest common subsequence for the given two sequences.,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))","def longest_common_subsequence(test_list, n):
  res = max(test_list, n)
  return (res) "
Write a python function to check whether the given number can be represented by product of two squares or not.,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;","def check_Product(n): 
    n = n * n 
    for i in range(1,n + 1): 
        if (n % i == 0): 
        return False
    return True"
Write a python function to find the first missing positive number.,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)","def find_Missing_Positive(n): 
    i = 0
    for i in range(n): 
        if (i == 0 or i == 0 or i == 0 or i == 0): 
        return i 
    return -1"
Write a python function to count the number of integral co-ordinates that lie inside a square.,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ","def count_co_ordinates(n): 
    co-ordinates = 0
    for i in range(n): 
        co-ordinates += 1
        if (c-ordinates[i] == c-ordinates[i]): 
            co-ordinates += 1
            co-ordinates += 1
            co-ordinates += 1
    return"
Write a function to check whether the given month name contains 30 days or not.,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False","def check_monthname(monthname):
  if(monthname[0] == 'T' or monthname[1] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T') or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T' or monthname[2] == 'T"
Write a python function to check whether a string has atleast one letter and one number.,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ","import re
def check_letter(text):
  res = re.search(r""[A-Z]"", text)
  return (res) "
Write a function to remove the duplicates from the given tuple.,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ","def remove_duplicates(test_tup):
  res = tuple(test_tup)
  return (res) "
Write a python function to convert octal number to decimal number.,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ","def octal_to_decimal(octal,decimal):
  octal_to_decimal = octal * decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal.pow(decimal))))))))
  return octal_to_decimal"
Write a python function to find the first position of an element in a sorted array.,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res","def find_first_position(arr,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","def remove_tuples(test_tup, k):
  res = [test_tup[0] for test_tup in zip(test_tup[1:], test_tup[2:])]
  return (res) "
Write a function to perform the exponentiation of the given two tuples.,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
","def exponentiation(test_tup1, test_tup2):
  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup2 in zip(test_tup1[0], test_tup2[1] for test_tup2 in zip(test_tup2[1], test_tup2[1]))]
  return (res) "
Write a function to find the largest triangle that can be inscribed in an ellipse.,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ","def max_triangle(a,b,c):
  res = 0
  for i in range(a,b+c):
      res += 1
  return (res) "
Write a python function to find highest power of 2 less than or equal to given number.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ","def highest_power(n): 
    result = 0
    while (n <= n): 
        result += 1
        result += 1
        result += 1
        result += 1
        if (result >= n): 
        return result"
Write a function to find all index positions of the maximum values in a given list.,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result","def max_positions(list1):
  res = [0 for i in list1 if i > 0]
  return (res) "
Write a python function to check whether the elements in a list are same or not.,"def chkList(lst): 
    return len(set(lst)) == 1","def check_same(list1,list2):
  res = all(map(lambda x: x == list1[0] for x in list2 if x == list1[1]):
     "
Write a function to remove even characters in a string.,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2","import re
def remove_even_char(text):
  text = re.sub('[A-Z]', text)
  return (text)"
Write a python function to find the hamming distance between given two integers.,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ","def hamming_distance(arr,n):
  res = 0
  for i in range(n):
      res += arr[i]
  return (res) "
Write a python function to count the occurrence of a given character in a string.,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ","def count_char(text,char):
  count = 0
  for i in text:
      count += 1
      count += 1
  return count"
Write a function to find the inversions of tuple elements in the given tuple list.,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ","def inversions(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a function to perform the adjacent element concatenation in the given tuples.,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def adjacent_element(test_tup):
  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup]
  return (res) "
Write a function to count the longest repeating subsequences such that the two subsequences don’t have same string characters at same positions.,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]","def longest_repeater_subsequence(str1,str2):
  res = 0
  for i in range(len(str1)):
      res += 1
  return (res) "
Write a function to check the given decimal with a precision of 2 by using regex.,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)","def check_decimal(decimal):
  result = (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal * (decimal)))))))))))) ) )"
Write a function to delete the smallest element from the given heap and then insert a new item.,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap","def delete_smallest(heap,key):
  res = [(key, heap[key]) for key in heap if key == key]])
  return (res) "
"Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.","import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)","import re
def check_string_contains_only_characters(text):
  res = re.search(r""[A-Z]"", text)
  return (res) "
Write a python function to count numbers whose oth and nth bits are set.,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ","def count_Odd_Nth_Bits(n,o,n):
  count = 0
  for i in range(n+1,n+1):
      count += 1
  return count"
Write a python function to find the sum of fourth power of n natural numbers.,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum","def sum_of_Natural_Numbers(n): 
    sum = 0;  
    for i in range(0,n): 
        sum += (i * i) 
        if (sum % 2 == 0): 
        return sum;  
    return sum; "
Write a function to perform the concatenation of two string tuples.,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","def concatenation_tuples(test_list):
  res = [test_list[0] for test_list in test_list]
  return (res) "
Write a function to convert radians to degrees.,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree","def degrees_to_degrees(radians):
  degrees = degrees * 360
  return (degrees)"
Write a function to decode a run-length encoded given list.,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]","def decode_run_length(list1):
  res = [str(x) for x in list1]
  return (res) "
Write a function to check if a nested list is a subset of another nested list.,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ","def check_subset(list1,list2):
  res = list1[0] == list2[1]
  return (res) "
Write a python function to find the first repeated character in a given string.,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'","def first_repeated_char(text):
  res =''
  for i in range(len(text)):
      res ='' + i
  return (res) "
Write a python function to find the minimum operations required to make two numbers equal.,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1","def min_Operations(n,n): 
    if (n == 0): 
        return 1
    return 2"
Write a function to extract maximum and minimum k elements in the given tuple.,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ","def extract_max_k(test_tup):
  res = tuple(test_tup[0] for test_tup[1:])
  return (res) "
"Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.","import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))","import re
def max_n_of_spaces(n):
  max_n = max(n, 2)
  return max_n"
Write a python function to find the first even number in a given list of numbers.,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even","def first_even(nums):
    first_even = 0
    for i in range(len(nums)):
        if (first_even % i == 0):
        return first_even"
Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ","def check_same_data_type(test_tup1, test_tup2):
  res = all(map(lambda x: x == y and x == y and x == y, test_tup2))
  return (res) "
Write a function to check for majority element in the given sorted array.,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1","def majority_element(arr,n):
  res = [(i + 1) for i in range(n + 1)]
  return (res) "
Write a python function to count set bits of a given number.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ","def count_bits(n): 
    n = n >> 1 
    for i in range(n + 1): 
        if (n % i == 0): 
        return 1
    return 2"
Write a python function to find the minimum element in a sorted and rotated array.,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ","def min_element(arr,n):
  res = [0 for i in range(n-1)]
  return (res) "
Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result","import re
def remove_odd_index(text):
  text = re.sub('[A-Z]', text)
  return (text)"
Write a function to find minimum of three numbers.,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ","def min_three_nums(n,a):
    min_three = n - a
    for i in range(0,n+1):
        min_three = min(i,n+1)
    return min_three"
Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False","def check_bits(n,r): 
    if (n == 0 or n == 1 or n == 2): 
        return True
    return False"
Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr","def rearrange_elements(arr,n):
  res = [arr[0] for arr in arr]
  return (res) "
Write a function to replace blank spaces with any character in a string.,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2","import re
def replace_blank_spaces(text):
  text = re.sub('[\w_]+', '', text)
  return (text)"
Write a function to find the maximum sum in the given right triangle of numbers.,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))","def max_sum(n):
    sum = 0
    for i in range(n):
        sum += i
        if (sum % i == 0):
        return sum
    return sum"
Write a function to get the n largest items from a dataset.,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest","def get_n_largest(test_list, n):
  res = [(n + 1) for i in range(0, n + 1)]
  return (res) "
Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface","def lateral_surface_area(r,n):
  area = r * r
  return area"
Write a function to find the volume of a cube.,"def volume_cube(l):
  volume = l * l * l
  return volume","def volume(a,b,c):
  volume = a * b
  return volume"
Write a python function to set all even bits of a given number.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ","def set_even_bits(n): 
    n = n >> 1
    for i in range(n + 1): 
        if (n % i == 0): 
        return True
    return False"
Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;","def max_equilateral_triangle(n,r):
    max_triangle = max(r,n)
    for i in range(0,r+1):
        max_triangle += 1
    if (n > max_triangle):
        max_triangle += 1
        max_triangle += 1
        max_triangle += 1
        return max_triangle"
Write a function to check the occurrences of records which occur similar times in the given tuples.,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ","def check_similarity(test_tup):
  res = set(test_tup)
  return (res) "
Write a python function to count number of non-empty substrings of a given string.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ","def count_non_empty_substring(text):
  count = 0
  for i in range(len(text)):
      count += 1
  return count"
Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]","def find_Possible_Sequence(n,m):
    result = 0
    for i in range(0,n + 1):
        result += 1
        if (result == 0):
        return result"
Write a function to replace the last element of the list with another list.,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
","def replace_last(list1,list2):
  res = list1[0]
  return (res) "
Write a function to generate a 3d array having each element as '*'.,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d","def array_of_elements(arr,n):
  res = [arr[0] for i in range(n + 1)]
  return (res) "
Write a function to count total characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total","import re
def count_chars(text):
  count = re.findall('[A-Z]', text)
  return count"
Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","def sort_list(test_list):
  res = sorted(test_list)
  return (res) "
Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ","def next_Perfect_Square(n): 
    i = 0
    while (i < n): 
        if (n % i == 0): 
        return i 
        return -1"
Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum","def max_sum(arr,n):
    sum = 0
    for i in range(n):
        sum += i
        sum += i
    return sum"
Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","def square_roots(n):
    return (n * n) / 2"
Write a function to find the longest palindromic subsequence in the given string.,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]","def longest_palindromic_subsequence(text):
  res = [len(text) - 1]
  return (res) "
Write a function to calculate the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ","def harmonic_sum(n):
  sum = 0
  for i in range(0, n + 1):
      sum += (sum * i)
  return sum"
Write a function to find the intersection of two arrays using lambda function.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result","def intersection_arrays(arr1,arr2,n):
  res = [(x, y) for x, y in zip(arr1, arr2)) for x in zip(arr2,n):
      res[x] = (x + y)
  return (res) "
Write a python function to count the occcurences of an element in a tuple.,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ","def occcurences(test_tup):
  res = [int(x) for x in test_tup]
  return (res) "
Write a function to insert an element before each element of a list.,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list","def insert_element(list1,list2):
  res = [list1[0] for list1 in list2]
  return (res) "
Write a python function to convert complex numbers to polar coordinates.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ","def convert_complex(arr,n):
  res = [(x, y,z) for x, y in zip(arr,n)]
  return (res) "
Write a python function to count integers from a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr","def count_int(nums):
  res = [int(x) for x in nums]
  return (res) "
Write a function to find all words starting with 'a' or 'e' in a given string.,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list","import re
def find_words(text):
  res = re.findall('[A-Z]', text)
  return (res) "
Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))","def choose_colours(n, colours):
  res = [(1, colours) for colours in range(n + 1)]
  return (res) "
Write a python function to count the number of prime numbers less than a given non-negative number.,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr","def prime_less_than_non_negative(n): 
    n = 0;  
    for i in range(n): 
        if (n % i == 0): 
        return 1;  
        return 2; "
Write a function to swap two numbers.,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)","def swap_two(nums,n):
  res = [1 for i in range(n + 1)]
  return (res) "
Write a function to find number of odd elements in the given list using lambda function.,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd","def odd_elements(nums):
  odd_elements = sum(nums)
  return odd_elements"
Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","def maximize_tuples(test_tup1, test_tup2):
  res = max(test_tup1, test_tup2)
  return (res) "
Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)","def newman_shanks_prime(n):
  newman_shanks = 2 * n
  for i in range(1,n):
      newman_shanks[i] = newman_shanks[i]
  return newman_shanks[i]"
Write a function to perform mathematical division operation across the given tuples.,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","def mathematical_division(test_tup):
  res = [test_tup[0] for test_tup in test_tup]
  return (res) "
Write a function to split a given list into two parts where the length of the first part of the list is given.,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]","def split_list(list1):
  res = [(i + 1) for i in list1 if i % 2 == 0]
  return (res) "
Write a function to merge two dictionaries.,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d","def merge_dict(d1,d2):
  res = dict(d1,d2)
  return (res) "
Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age","def dog_age(dog, years):
    dog_age = dog.get_age(dog, years)
    dog_age = dog.get_age(dog, years)
    dog_age = dog.get_age(dog, years)
    dog_age = dog.get_age(dog, years)
    dog_age = dog.get_age(dog, years)
    dog_age = dog.get_age(dog_age)
    dog_age *"
Write a function to split a list for every nth element.,"def list_split(S, step):
    return [S[i::step] for i in range(step)]","def split_list(list1,n):
  res = list1[n - 1]
  return (res) "
Write a function to find the lateral surface area of a cube.,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA","def lateral_surface_area(a,b,c):
  area = a * b
  return area"
Write a python function to find the sum of squares of first n odd natural numbers.,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ","def sum_odd(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += sum * i 
    for j in range(1,n + 1): "
Write a function to find the n'th star number.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ","def find_nth_star(n):
  n = 0
  while (n < n):
      if (n % 2 == 0):
      return n
  else:
      return -1"
Write a function to find the ascii value of a character.,"def ascii_value(k):
  ch=k
  return ord(ch)","import re
def ascii_char(char):
  return (re.search(r'[A-Z]', char))"
Write a python function to find the sum of even numbers at even positions.,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum","def sum_even(n,i): 
    sum = 0
    for i in range(i+1,i+1): 
        sum += sum * i 
        if (n % i == 0): 
        sum += sum 
        return sum"
Write a python function to find the sum of fifth power of first n even natural numbers.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ","def fifth_Power_Sum(n):
    sum = 0
    for i in range(1,n + 1):
        sum += (sum * i)
        if (sum % i == 0):
        return sum"
Write a function to perfom the rear element extraction from list of tuples records.,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ","def rear_element(test_list):
  res = list(filter(lambda x: x[0] == test_list[1]), test_list[2]))
  return (res) "
Write a function to substract the contents of one tuple with corresponding index of other tuple.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ","def substract_tuple(test_tup1, test_tup2):
  res = tuple(test_tup1, test_tup2)
  return (res) "
Write a python function to find sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ","def sum_even_index_binomial(n):
  sum_even_index = 0
  for i in range(n):
      sum_even_index += i
  return sum_even_index"
Write a python function to find the position of the last removed element from the given array.,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1","def last_removed(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to find the volume of a cylinder.,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume","def volume(r,b,c):
  volume = r * (c * (b * c) * c)
  return volume"
Write a function to filter a dictionary based on values.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result","def filter_dict(dict1,dict2):
  res = dict1.values()
  return (res) "
Write a function to find the element count that occurs before the record in the given tuple.,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ","def find_element_count(test_tup):
  res = 0
  for i in range(len(test_tup)):
      res += 1
  return (res) "
Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ","def decagonal_num(n):
    decagonal = 0
    for i in range(n):
        decagonal += 1
        if decagonal >= 0:
        return decag"
Write a function to search an element in the given array by using sequential search.,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos","def search_element(arr,n):
  res = [i for i in range(n)]
  return (res) "
Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True","def check_unique(test_list):
  res = all(map(lambda x: x[0] == x[1] for x in test_list if x[0] == x[1]):
      res = all(res)
  return (res) "
Write a function to substaract two lists using map and lambda function.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)","def substaract_list(nums1,nums2):
  res = map(lambda x: x[0] == x[1] and x[1] == y[1] and x[1] == y[1] and x[2] == y[1]), x[2]
  return (res) "
Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True","def is_Less_Than_Even(digit,frequency):
    if (digit < 0 or digit > 0 or digit>=frequency) :
        return True
    return False"
Write a function to check whether all items of a list are equal to a given string.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element","def all_Equal(list1,str2):
  res = all(map(lambda x: x == str2,list1))
  return (res) "
Write a function that matches a string that has an a followed by two to three 'b'.,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","import re
def match_string(text):
  res = re.search(r'(\w+):
  return (res) "
Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far","def max_sum(arr,n):
  res = 0
  for i in range(n):
      res += arr[i]
  return (res) "
Write a python function to find the sum of squares of first n even natural numbers.,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)","def sum_even_natural(n):
    sum = 0
    for i in range(1,n + 1):
        sum += (sum * i)
    return sum"
Write a function to count array elements having modular inverse under given prime number p equal to itself.,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element","def modular_inverse(arr,p):
  res = 0
  for i in range(1,p + 1):
      res += 1
  return (res) "
Write a python function to calculate the number of odd days in a given year.,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ","def odd_days(year):
    odd_days = 0
    for i in range(year + 1):
        odd_days += 1
        odd_days += 1
    if odd_days == 0:
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
    if odd_days == odd_days:
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        odd_days += 1
        if odd_days + 1
        odd_days + 1
        odd_days += 1
        odd_days += 1
        odd_days +="
Write a function to find the list of lists with maximum length.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)","def max_list(list1,max_len):
  res = list1[0]
  return (res) "
Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]","def paint_fence(fence,n,k):
  res = 0
  for i in range(n,k):
      res += 1
  return (res) "
Write a python function to find quotient of two numbers.,"def find(n,m):  
    q = n//m 
    return (q)","def quotient_of_two(nums,n):
    result = 0
    for i in range(n):
        result += (i * i)
        if (result % i"
Write a function to find the third side of a right angled triangle.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s","def third_side(n):
    temp = [0 for i in range(n + 1)]
    for j in range(n + 1):
        temp[j] = temp[j]
        temp[j] = temp[j]
        temp[j] = temp[j]
        temp[j] = temp["
Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)","def max_value(list1):
  res = [max(heterogeneous_list1[0] for heterogeneous_list1[1] for heterogeneous_list1[1]])
  return (res) "
Write a function to return the sum of all divisors of a number.,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)","def sum_Divisors(n):
    sum = 0
    for i in range(1,n):
        sum += i
        sum += i
    return sum"
Write a python function to count inversions in an array.,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ","def count_inversions(arr,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ","def flatten_nested(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a function to find the nested list elements which are present in another list.,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result","def find_nested(list1,list2):
  res = [list1[0] for list1 in list2]
  return (res) "
Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])","def max_aggregate(test_list):
  res = max(test_list[0] for test_list in test_list])
  return (res) "
Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ","def count_Binary_Sequence(n):
  res = 0
  for i in range(1,n + 1):
      res += 1
  return (res) "
Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0","def depth(dict1):
  depth = 0
  for i in dict1:
      depth += 1
      depth += 1
  return depth"
Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)","def most_significant_bit(n):
    i = 0
    for j in range(n):
        if (i % 2 == 0):
        return j
        return i"
Write a python function to check whether the count of inversion of two types are same or not.,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True","def check_inversion(test_list, test_list):
  res = all(map(int, test_list))
  return (res) "
Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ","def find_element(x,y,n):
  element = x + y
  return element"
Write a function to match two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()","def match_letter(words):
  res = [(letter for letter in words if letter in words]
  return (res) "
"Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]","def max_Subsequence_Sum(i,k):
    sum = 0
    for i in range(i+1,i+1):
        sum += sum
        if (sum == i):
        return sum
    return sum"
Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon","def get_colon(test_tup):
  res = tuple(test_tup)
  return (res) "
Write a function to find the specified number of largest products from two given lists.,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result","def max_Product(lists,n):
    max_Product = max(lists, n)
    return max_Product"
Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ","def max_of_two(n): 
    i = 0
    for j in range(n + 1): 
        if (i % 2 == 0): 
        return i 
    return -1"
Write a function to convert a given string to a tuple.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result","def tuple_to_tuple(test_str):
  res = tuple(test_str.split(', '))
  return (res) "
Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ","def left_most_unset_bit(n):
  left_most_unset_bit = 1
  if n == 0:
      left_most_unset_bit = 2
  return left_most_unset_bit"
Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume","def volume(a,b,c):
  volume = a * b
  return volume"
Write a python function to print positive numbers in a list.,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ","def print_positive(nums):
    for i in range(len(nums)):
        if (nums[i] % i == 0):
        return (""Invalid"")
    return (""Invalid"")"
Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)","def max_sum(n,x):
    sum = 0
    for i in range(x,y+1):
        sum += (sum * i)
    if (sum % i == 0):
        return sum"
Write a python function to find the first maximum length of even word.,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ","def max_length(n): 
    max_length = n + 1 
    for i in range(0,n + 1): 
        max_length = max(max(i, n - 1)) 
    if max_length > max(max(i, n - 1)): 
        max(max(i, n - 1)): 
        return max(max(i, n - 1)) 
    return max(max(max(i, n - 1))"
Write a function to find the index of the last occurrence of a given number in a sorted array.,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ","def last_occurrence(arr,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a function to reflect the modified run-length encoding from a list.,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]","def modified_run_length(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res) "
Write a python function to find the maximum volume of a cuboid with given sum of sides.,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ","def max_volume(cuboid,sum):
  res = max(cuboid,sum)
  return (res) "
Write a function to find all five characters long word in the given string by using regex.,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))","import re
def find_long_word(text):
  res = re.findall('[A-Z]', text)
  return (res) "
Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares","def squared_sum(n):
    sum = 0
    for i in range(1,n + 1):
        sum += (i * i)
        if (sum % i == 0):
            return sum"
Write a function to find the demlo number for the given number.,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	","def demlo_num(n):
  demlo_num = n * 2
  for i in range(n):
      demlo_num += i
  return demlo_num"
Write a function to find all index positions of the minimum values in a given list.,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result","def find_min_positions(list1):
  res = [0 for i in list1 if i < len(list1) - 1]
  return (res) "
Write a function to re-arrange the given array in alternating positive and negative items.,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr","def re_arrange_items(arr,n):
  res = [arr[0] for arr in arr if arr[1] == arr[2] else arr[1] == arr[2]])
  return (res) "
Write a function to extract the sum of alternate chains of tuples.,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ","def extract_alternate_chain(test_tup):
  res = 0
  for test_tup in test_tup:
      res += test_tup
  return (res) "
Write a python function to find the minimum number of squares whose sum is equal to a given number.,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;","def min_Squares_Sum(n): 
    sum = 0; 
    for i in range(n): 
        if (sum % i == 0): 
        return i; 
        return sum; "
Write a function to get the word with most number of occurrences in the given strings list.,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ","def most_occurrence(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a function to print check if the triangle is isosceles or not.,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False","def is_triangle_isosceles(a,b,c):
  if (a == b or c == b):
      return True
  else:
      return False"
Write a function to rotate a given list by specified number of items to the left direction.,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result","def rotate_left(list1,n):
  res = list1[n - 1]
  return (res) "
Write a python function to count negative numbers in a list.,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ","def count_negative(nums):
    count = 0
    for i in range(0,nums.count(i)):
        count += 1
    for j in range(i + 1,nums.count(i) - 1) :
        count += 1
        if (count % i == 0):
        count += 1
        return count"
"Write a function to find all three, four, five characters long words in the given string by using regex.","import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))","import re
def find_long_words(text):
  res = re.findall('[a-z0-9]+', text)
  return (res) "
Write a python function to count unset bits of a given number.,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ","def count_Unset_Bits(n): 
    n = n >> 1 
    for i in range(n + 1): 
        if (n % i == 0): 
        return 1
    return 0"
Write a function to count character frequency of a given string.,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict","def count_char_frequency(text):
  count = 0
  for i in range(len(text)):
      count += 1
  return count"
Write a python function to sort a list according to the second element in sublist.,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ","def sort_list(list1,2):
  res = list1[2]
  return (res) "
Write a python function to check whether the triangle is valid or not if sides are given.,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ","def check_triangle(a,b,c,d):
  if (a == b or c == d):
      return True
  else:
      return False"
Write a function to find the sum of arithmetic progression.,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total","def sum_Arithmetic_Progression(n):
    sum = 0
    for i in range(n):
        sum += i
        sum += i
    for j in range(n):
        sum += i
        sum += i
        sum += i
        sum += i
"
Write a function to check whether the given month name contains 28 days or not.,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False","def check_monthname(monthname):
  if(monthname[0] == 'T' and monthname[1] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and monthname[2] == 'T' and month"
"Write a function that matches a word at the end of a string, with optional punctuation.","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","import re
def match_word(text):
  res = re.search(r""^[a-z0-9]+$"", text)
  return (res) "
Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","import re
def count_substring(s,n):
    count = 0
    for i in range(n):
        count += 1
        if (re.search(r""[A-Z]"", s)):
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
        count += 1
    return count"
Write a python function to find the maximum occuring divisor in an interval.,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2","def max_occuring_divisor(n,m):
    max_occuring_divisor = max(n,m)
    for i in range(0,m):
        max_occuring_divisor = max(i,m)
        if (max_occuring_divisor >"
Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])","def find_Three_Lowest_Positive(nums):
    sum = 0
    for i in range(0,nums.count(i) - 1):
        sum += sum * i
    return sum"
Write a function to convert the given set into ordered tuples.,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)","def convert_set(test_tup):
  res = set(test_tup)
  return (res) "
Write a function to find the smallest range that includes at-least one element from each of the given arrays.,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])","def smallest_range(arr,n):
  res = [0 for i in range(n)]
  return (res) "
Write a function to calculate the number of digits and letters in a string.,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)","import re
def calculate_digits(text):
  res = re.findall('[a-z]', text)
  return (res) "
Write a python function to find number of elements with odd factors in a given range.,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ","def odd_factors(n): 
    n = 0; 
    for i in range(n): 
        if (n % i == 0): 
        return i; 
        return -1; "
Write a function to find the difference between two consecutive numbers in a given list.,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result","def difference_list(nums,n):
    result = [0 for i in range(n + 1)]
    return result"
"Write a function to find entringer number e(n, k).","def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)","def find_num(n,k): 
    return n "
Write a python function to count the number of squares in a rectangle.,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6","def count_squares(r,n): 
    if (r > n): 
        return 1
    return 2"
Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ","def count_sequences(n,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a python function to check whether the given string is a binary string or not.,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ","import re
def check_binary(text):
  res = re.search(r""^[a-z0-9]+$"", text)
  return (res) "
Write a python function to minimize the length of the string by removing occurrence of only one character.,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ","import re
def remove_char(text):
  res = re.sub(r""[A-Z]"", text)
  return (res) "
Write a python function to find the first element occurring k times in a given array.,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1","def find_first_element(arr,k):
  res = [0 for i in range(k + 1)]
  return (res) "
Write a python function to check whether all the characters in a given string are unique.,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;","def check_unique(text):
  res = True
  for i in range(len(text)):
      res = False
  return (res) "
Write a function to remove a specified column from a given nested list.,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1","def remove_column(test_list, key):
  res = [key for key, val in test_list if val[key] == key]
  return (res) "
Write a function to find t-nth term of arithemetic progression.,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn","def arithemetic_term(n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a python function to count the number of rectangles in a circle of radius r.,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ","def count_rectangles(r,n): 
    if (r > n): 
        return 0
    return 1"
Write a function to find the third angle of a triangle using two angles.,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
","def third_angle(tup,n):
  res = [tup[0] * tup[1] * tup[2] * tup[1] * tup[2] * tup[2]"
Write a function to find the maximum element of all the given tuple records.,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ","def max_element(test_tup):
  res = max(test_tup[0] for test_tup[1] for test_tup in test_tup[2] for test_tup in test_tup[2] for test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_"
Write a function to find modulo division of two lists using map and lambda function.,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)","def modulo_div(nums,n):
  res = map(lambda x: x % n, nums)
  return (res) "
Write a python function to check whether one root of the quadratic equation is twice of the other or not.,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ","def is_Eliminant(a,b,c):
  return (a == b)"
Write a function to find the n’th carol number.,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2","def find_Carol(n): 
    n = 0; 
    for i in range(n + 1): 
        if (i == n): 
        return i; 
        return -1; "
Write a function to remove empty lists from a given list of lists.,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty","def remove_empty_list(lists):
  res = [list(x) for x in lists if x not in res]
  return (res) "
Write a python function to find the item with maximum occurrences in a given list.,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result","def max_occurrences(list1):
  res = [0 for i in list1 if i > max(res)]
  return (res) "
Write a function to add the k elements to each element in the tuple.,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ","def add_k(test_tup, k):
  res = tuple(k)
  return (res) "
Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ","def flips_required(text):
  flips = [0 for i in range(len(text)) if (text[i] ==''):
      flips.append(i)
  return flips"
Write a python function to count the number of digits of a given number.,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count","def count_digits(n): 
    digits = 1
    for i in range(n): 
        if (n % i == 0): 
        return 1
    return digits"
Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))","def max_product(test_list):
  res = max(test_list[0] for test_list in test_list])
  return (res) "
Write a function to check if a binary tree is balanced or not.,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False","def check_balanced(tree):
  res = False
  if (tree.is_balanced(tree)):
    return True
  else:
      return False"
Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","def repeat_tuple(test_tup1, test_tup2):
  res = tuple(test_tup1 + test_tup2)
  return (res) "
Write a function to find the lateral surface area of cuboid,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA","def lateral_surface_area(cuboid):
  area = cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area"
Write a function to sort a tuple by its float element.,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort","def sort_tuple(test_tup):
  res = tuple(test_tup)
  return (res) "
Write a function to find the smallest missing element in a sorted array.,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)","def find_smallest_element(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to sort a given list of elements in ascending order using heap queue algorithm.,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result","def sort_elements(list1):
  res = list1.sort()
  return (res) "
Write a function to find the volume of a cuboid.,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume","def volume(cuboid):
  volume = cuboid.volume
  return volume"
Write a function to print all permutations of a given string including duplicates.,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list","def permutations(str1):
  res = [str1[0] for str1 in str2[1:]].join(', ')
  return (res) "
Write a function to round the given number to the nearest multiple of a specific number.,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)","def round_multiple(n):
  res = 1
  res = (res * (n * n) / 2)
  return (res) "
Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)","def remove_tuple(test_list):
  res = list(filter(lambda x: x == test_list[0]), test_list[1])
  return (res) "
Write a python function to remove all occurrences of a character in a given string.,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ","import re
def remove_char(text):
  text = re.sub(r""([a-z])([A-Z])([A-Z])"", text)
  return (text)"
Write a python function to shift last element to first position in the given list.,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","def shift_last(list1):
  res = [list1[i] for i in list1 if i[i] == list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1[i] + list1["
Write a function to find the surface area of a cuboid.,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA","def surface_area(cuboid):
  area = cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid.surface_area(cuboid))))
  return area"
Write a function to generate a two-dimensional array.,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
","def generate_array(arr,n):
  res = [arr[0] for arr in arr]
  return (res) "
Write a function to sort a list of lists by a given index of the inner list.,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result","def sort_inner(nums, index):
  res = [list(x) for x in nums]
  return (res) "
Write a function to find the number of rotations in a circularly sorted array.,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1","def find_Rotations(arr,n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a python function to toggle all odd bits of a given number.,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ","def toggle_odd_bits(n): 
    if (n % 2 == 0): 
        return True
    return False"
Write a python function to find the frequency of the smallest value in a given array.,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","def find_Minimal_Frequency(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to find the n'th perrin number using recursion.,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)","def find_nth_perrin(n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a function to find out the minimum no of swaps required for bracket balancing in the given string.,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap","def min_swaps(string):
  res = 0
  for i in range(len(string)):
      res += 1
  return (res) "
Write a python function to check whether the hexadecimal number is even or odd.,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ","def is_Even(hex,num):
    if (hex[num] % 2!= 0):
        return False
    return True"
Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ","def highest_power(n): 
    power = 2
    while (power > power): 
        power = power * power 
        power = power * power 
        if (power <= n): 
        power = power * power 
        power = power * power 
        power = power * power 
        power = power 
        else: 
        power = power 
        power = power 
        power = power
        power = power 
            power = power 
        power = power 
        power = power 
        power = power 
        power = power 
        power = power 
        power = power 
        power = power 
        power = power 
        power = power 
       "
Write a function to find the n'th lucas number.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ","def n_lucas_num(n):
  n = n + 1
  for i in range(n):
      if (n % i == 0):
      return n
  else:
      return n"
Write a function to insert a given string at the beginning of all items in a list.,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string","def insert_string(text):
  res = [text for text in text if text[0] == text[1] ]
  return (res) "
Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result","def nested_dict(list1):
  res = dict(map(lambda x: x[0] == list1[1] for x in list1 if x[1] == list1[1]])
  return (res) "
"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]","def max_sum(n):
    sum = 0
    for i in range(0,n+1):
        sum += (sum * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1) * (i + 1)):
        sum += (sum * (i + 1)
        return sum"
Write a function to find the list with maximum length using lambda function.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)","def max_length(list1,max_length):
  res = list1.sort()
  return (res) "
Write a function to check if given tuple is distinct or not.,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ","def check_distinct(test_tup):
  res = all(test_tup == test_tup)
  return (res) "
Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None","import re
def first_non_repeated_char(text):
  res = re.findall('[A-Z]', text)
  return (res) "
Write a function to check whether the given string starts and ends with the same character or not using regex.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ","import re
def check_string_start_end(string,char):
  if re.search(regex,string, char):
      return True
  else:
      return False"
Write a function to find the median of three specific numbers.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median","def median_of_three(n):
    median = 0
    for i in range(n):
        median += i
        median += i
    if median > median:
        median = median + median
        median = median + median
        median = median + median
    return median"
Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())","def sum_digits(nums):
  sum = 0
  for i in range(len(nums)):
      sum += sum(nums[i] * nums[i])
  return sum"
Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","def mathematical_xor(test_tup1, test_tup2):
  res = test_tup1[0]
  return (res) "
Write a function to extract the frequency of unique tuples in the given list order irrespective.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)","def extract_frequency(test_list):
  res = [(1, 2) for i in range(len(test_list)) for j in test_list]
  return (res) "
Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","def index_wise_add(test_tup1, test_tup2):
  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup1 in test_tup2[1] for test_tup2 in test_tup2[1] for test_tup2 in test_tup2[1] for test_tup in test_tup]
  return (res) "
Write a function to compute the value of ncr%p.,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ","def ncr_val(n,r):
  res = 0
  for i in range(r):
      res += (r * (r * r) + 1)
  return (res) "
Write a function to check if a url is valid or not using regex.,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False","import re
def check_url(url):
  res = re.search(r""^[a-z0-9]+$"", url)
  return (res) "
Write a python function to find the minimum of two numbers.,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ","def min_of_two(n, x):
    if (x < 0):
        return x
    return -1"
Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False","def check_tuple(test_tup):
  res = True
  for ele in test_tup:
      res = False
  return (res) "
Write a python function to find the parity of a given number.,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ","def parity_num(n): 
    parity = 0
    for i in range(n + 1): 
        parity += 1
        if (parity % i == 0): 
        return 1
    return parity"
Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False","def next_bigger_number(n):
  res = 0
  for i in range(n+1):
      res += 1
  return (res) "
Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs","def find_k(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min","def min_product(test_list):
  res = min(test_list[0] for test_list in test_list])
  return (res) "
Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val","def min_value(list1):
  res = [0 for i in list1 if i < list1[i] + 1] + 1
  return (res) "
Write a function to convert the given snake case string to camel case string by using regex.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))","import re
def camel_to_camel(str):
  return re.sub('([A-Z])([A-Z])', r'\1_\2', str)
 "
Write a python function to remove odd numbers from a given list.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l","def remove_odd(nums):
  res = [i for i in nums if i % 2]
  return (res) "
Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result","def extract_nth(test_list):
  res = [test_list[0] for test_list in test_list]
  return (res) "
Write a python function to check whether the value exists in a sequence or not.,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0","def check_sequence(test_list, value):
  res = True
  for i in range(len(test_list)):
      res = False
  return (res) "
Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ","def highest_product(arr,n):
  res = [0 for i in range(n)]
  return (res) "
Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]","def max_sum(n):
  sum = 0
  for i in range(n+1):
      sum += (sum * i)
  return sum"
Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ","def common_first(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a python function to find the sublist having maximum length.,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList","def max_length(s,n):
  res = []
  for i in range(n):
      res.append(i)
      res.append(i)
  return (res) "
Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum","def round_nums(nums,n):
  sum = 0
  for i in range(n):
      sum += sum
  return sum"
Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum","def cube_sum(n): 
    cube_sum = 0
    for i in range(0,n + 1): 
        cube_sum += (cube_sum + cube_sum) 
    return cube_sum"
Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ","def concatenate_tuple(test_tup):
  res = tuple(map(lambda x: x[0] + x[1]), test_tup))
  return (res) "
Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ","def average_Cubes(n): 
    cubes = [1 for i in range(n + 1)] 
    for j in range(n + 1,n + 1): 
        if (cubes[j] == 0): 
        return cubes[j] 
    return cubes[j]"
Write a function to solve gold mine problem.,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ","def gold_mine_problem(n):
  res = [1 for i in range(n+1)]
  return (res) "
Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ","def extract_rear(test_tup):
  res = [test_tup[0] for test_tup in test_tup]
  return (res) "
Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr","def count_sublists(n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a function to filter odd numbers using lambda function.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums","def filter_odd(nums):
  res = lambda x: x % x == 0
  return (res) "
Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)","def date_to_dd(date):
  res = re.sub(r""(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\d{1,2})(\"
Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list","def sort_array(arr):
  res = [arr[0] for arr in arr]
  return (res) "
Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ","def extract_elementwise(test_tup1, test_tup2):
  res = [test_tup1[0] for test_tup2 in test_tup2]
  return (res) "
Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix","def directrix(parabola):
  directrix = parabola[0]
  return directrix"
Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result","def common_element(lists):
  res = False
  for i in lists:
      res = True
      res = True
      res = False
      res = True
  return (res) "
Write a function to find the median of a trapezium.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median","def median_trapezium(test_tup):
  res = [test_tup[0] - test_tup[1] - test_tup[2] - test_tup[1]])
  return (res) "
Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')","def is_greater_than(arr,n):
  res = True
  for i in range(n):
      res = False
      res = True
      res = False
      res = True
      res = res & (res * arr.size - 1)
  return (res) "
Write a function that matches a string that has an a followed by one or more b's.,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
","import re
def match_string(text):
  res = re.search(r'(\w+)(\w+)$', text)
  return (res) "
Write a python function to find the last digit of a given number.,"def last_Digit(n) :
    return (n % 10) ","def last_digit(n): 
    if (n % 2 == 0): 
        return 1
    return -1"
Write a python function to print negative numbers in a list.,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ","def negative_numbers(nums):
    return (sorted(nums))"
Write a function to remove odd characters in a string.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2","import re
def remove_odd_char(text):
  text = re.sub('[A-Z]', text, re.compile(r'\1', r'\2', text))
  return (text)"
Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ","def bidirectional_tuple(test_list, tuple):
  res = [(key, val) for key, val in tuple.items() if val[key] == tuple.get(key)]
  return (res) "
Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","def convert_list(nums):
  res = [int(x) for x in nums]
  return (res) "
Write a function to find all adverbs and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))","def find_adverbs(sentence):
  adverbs = [adverbs[0] for adverbs in sentence.find_adverbs(sentence) if adverbs[0] == adverbs[1]])
  return adverbs"
Write a function to find the surface area of a cube.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea","def surface_area(a,b,c):
  area = a*b
  return area"
Write a function to find the ration of positive numbers in an array of integers.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)","def ration_positive(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
Write a python function to find the largest negative number from the given list.,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max","def find_largest_negative(list1):
  res = [0 for i in list1 if i % 2 == 0]
  return (res) "
Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ","def trim_tuple(test_list, k):
  res = tuple(test_list[k] for test_list, k in zip(test_list, k))
  return (res) "
Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ","def index_wise_multiplication(test_tup1, test_tup2):
  res = [test_tup1[0] for test_tup2 in test_tup2[1] for test_tup1 in test_tup2[1] for test_tup2 in zip(test_tup1[0], test_tup2[1] for test_tup2[1]))]
  return (res) "
Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ","def count_tuple(test_list):
  res = [1 for i in range(len(test_list))]
  return (res) "
Write a function to find cubes of individual elements in a list using lambda function.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums","def find_cubes(list1):
  res = list(map(lambda x: x[0] == x[1] for x in list1 if x[1] == x[1] else x[1] == x[1]))
  return (res) "
Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum","def perrin_sum(n):
    sum = 0
    for i in range(n):
        sum += (i * i)
    return sum"
Write a python function to check whether the triangle is valid or not if 3 points are given.,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ","def check_triangle(n,a,b,c):
    if (a == b):
        return True
    return False"
Write a function to extract specified size of strings from a give list of string values.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result","def extract_size(test_list,size):
  res = [str(x) for x in test_list if x[0] =='' else x[0] =='' else x[0] =='' else x[1] =='' else y[0] =='' else y[0] =='' else y[0] =='' else y[0] ==''"
Write a function to remove all whitespaces from the given string using regex.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))","import re
def remove_all_spaces(text):
  res = re.sub(r""[\W_]+"", text)
  return (res) "
Write a function that gives loss amount if the given amount has loss else return none.,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None","def loss_amount(amount):
  res = amount * 100
  if (res == amount):
      res = amount * 100
  return (res) "
Write a python function to find the sum of even factors of a number.,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ","def sum_Even_Factors(n): 
    sum = 0; 
    for i in range(n + 1): 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i; 
        sum += i;  
        sum += i;  
        sum += i;  "
Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","import re
def match_z(text):
  res = re.search(r'([a-z]):
  return (res) "
Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False","def check_monthnumber(monthnum1):
  if(monthnum1 == monthnum2):
    return True
  else:
      return False"
Write a function to reverse strings in a given list of string values.,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result","def reverse_string(test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a python function to find the sublist having minimum length.,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList","def min_length(s,n): 
    if (n < 0): 
        return 1
    return -1"
Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area","def area_area(a,b,c):
  area = a*b
  return area"
Write a function to remove uppercase substrings from a given string by using regex.,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)","import re
def remove_uppercase_substring(text):
  res = re.sub(r""([A-Z])([A-Z])([A-Z])"", text)
  return (res) "
Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ","def first_element(s,n):
  res = [0 for i in range(n)]
  return (res) "
Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr","import re
def count_upper_case(text):
  count = re.findall('[A-Z]', text)
  return count"
Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result","def combinations(list1):
  res = [i for i in list1 if i % 2]
  return (res) "
Write a function to find the maximum product subarray of the given array.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far","def max_product_subarray(arr,n):
  res = max(arr[0],n)
  return (res) "
Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result","def check_same_dict(dict1,dict2):
  res = dict1.values()
  return (res) "
Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1","def drop_empty(dict1):
  res = dict1.values()
  return (res) "
Write a function to find the peak element in the given array.,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ","def peak_element(arr,n):
  peak = arr[n - 1]
  return peak"
Write a python function to convert decimal number to octal number.,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)","def decimal_to_octal(n):
    decimal_to_octal(n):
        return decimal_to_octal(n)"
Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)","def max_product(arr,n):
    max_product = arr[n - 1]
    for i in range(0,n):
        max_product = max(max(arr[i], n - 1))
    return max_product"
Write a function to find the maximum profit earned from a maximum of k stock transactions,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]","def max_profit_earned(n):
    max_profit = max(n, n)
    return max_profit"
Write a function to find the pairwise addition of the elements of the given tuples.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ","def pairwise_add(test_tup):
  res = [test_tup[0] for test_tup in test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_tup in test_tup[2] for test_tup[1] for test_tup[2] for test_tup in test_tup[2]])
  return"
Write a python function to find remainder of array multiplication divided by n.,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ","def remainder_Divisible(arr,n):
  result = [arr[0] - arr[1] for arr in arr if arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr[i] % arr"
Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ","def contains_consecutive_numbers(list1):
  res = list1.issubset(list1)
  return (res) "
Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)","def intersection_tuple(test_list, test_list):
  res = [test_list[0] for test_list in test_list if test_list[1] == test_list[2] ]
  return (res) "
Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2","import re
def replace_char(text):
  res = re.sub(r""[A-Z]"", text)
  return (res) "
Write a function to sort counter by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter","def sort_by_value(n):
  res = 0
  res = res + 1
  return (res) "
Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum","def sum_of_array(arr,n): 
    sum = 0
    for i in range(n): 
        sum += (arr[i] * arr[i + 1] * arr[i + 1] * arr[i + 1] * arr[i + 1] *"
Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())","import re
def lower_case(text):
  return (re.sub('[A-Z]', text))"
Write a function to remove lowercase substrings from a given string.,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result","import re
def remove_lowercase_substring(text):
  res = re.sub('[A-Z]', text)
  return (res) "
Write a python function to find the first digit of a given number.,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ","def first_Digit(n): 
    i = 0
    for i in range(n + 1): 
        if (i % 2 == 0): 
        return i 
    return -1"
Write a python function to find the maximum occurring character in a given string.,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch","def max_occurring_char(text):
  max_occurring_char = text[0:-1]
  return max_occurring_char"
Write a function to determine if there is a subset of the given set with sum equal to the given sum.,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])","def check_subset(test_set, sum):
  res = set(test_set)
  return (res) "
Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ","import re
def find_upper_case_letter(text):
  res = re.findall('[A-Z]', text)
  return (res) "
Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","def first_natural_number(x,n): 
    n = 0
    for i in range(n): 
        if (n % i == 0): 
        return i 
    return -1"
Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","def remove_matching_tuples(test_tup1, test_tup2):
  res = set(test_tup1)
  return (res) "
Write a function to find the largest palindromic number in the given array.,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1","def palindromic_number(arr,n):
  res = [1 for i in range(n)]
  return (res) "
Write a function to compute binomial probability for the given number.,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ","def binomial_probability(n): 
    n = n * n 
    for i in range(n): 
        if (n % i == 0): 
        return 0
    return 1"
Write a function to sort a list of tuples in increasing order by the last element in each tuple.,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup","def sort_by_last(test_list):
  res = [test_list[i] for i in range(len(test_list)) if test_list[i] == test_list[i]][0] :
      res.append(test_list[i] )
  return (res) "
Write a function to find the area of a pentagon.,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area","def area_pentagon(a,b,c):
  area = a * b
  return area"
Write a python function to find the frequency of the largest value in a given array.,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ","def find_largest(arr,n): 
    i = 0
    for j in range(n): 
        if (arr[j] > arr[j]): 
        return i 
    return -1"
Write a function to extract all the pairs which are symmetric in the given tuple list.,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ","def extract_symmetric(test_list):
  res = [test_list[0] for test_list in test_list]
  return (res) "
Write a function to find the sum of geometric progression series.,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total","def geometric_progression_series(n):
  sum = 0
  for i in range(n):
      sum += i
  return sum"
Write a function to search an element in the given array by using binary search.,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found","def search_element(arr,n):
  res = [i for i in range(n)]
  return (res) "
"Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.","import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons","def hexagon_coordinates(x,y,z):
  res = [x,y,z]
  return (res) "
Write a function to convert the given binary tuple to integer.,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ","def to_int(test_tup):
  res = int(test_tup[0] * 100)
  return (res) "
Write a function to remove lowercase substrings from a given string by using regex.,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)","import re
def remove_lowercase_substring(text):
  res = re.sub(r""([A-Z])([A-Z])([A-Z])"", text)
  return (res) "
Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums","def smallest_int(nums):
  res = [0 for i in range(len(nums))]
  return (res) "
Write a function to find the surface area of a cone.,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA","def surface_area(a,b,c):
  area = a*b
  return area"
Write a python function to find gcd of two positive integers.,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd","def gcd_int(n): 
    i = 0
    for j in range(n): 
        if (i % j == 0): 
        return i 
    return -1"
Write a function to find the diameter of a circle.,"def diameter_circle(r):
  diameter=2*r
  return diameter","def diameter(a,b,c):
  di = a * b
  if (a == b):
      di = b * c
  return di"
Write a function to concatenate all elements of the given list into a string.,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ","def concatenate_elements(list1):
  res = [str(x) for x in list1 if x[0] not in res]
  return (res) "
Write a python function to find common divisor between two numbers in a given pair.,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result","def common_divisor(test_pair, n):
  res = 0
  for i in range(n):
      res += 1
  return (res) "
Write a python function to find remainder of two numbers.,"def find(n,m):
  r = n%m
  return (r)","def find_remainder(n): 
    result = 0
    for i in range(1,n+1): 
        result += (result % i"
Write a function to add consecutive numbers of a given list.,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result","def add_consecutive(nums):
  res = [1 for i in range(len(nums))]
  return (res) "
Write a python function to find the cube sum of first n natural numbers.,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum","def cube_sum(n): 
    cube_sum = 0
    for i in range(1,n + 1): 
        cube_sum += (cube_sum * i) 
    return cube_sum"
Write a function to move all zeroes to the end of the given array.,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A","def move_zeroes(arr,n):
  res = [0 for i in range(n + 1)]
  return (res) "
"Write a function to calculate the permutation coefficient of given p(n, k).","def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ","def permutation_coefficients(n,k):
  res = (n * k) / 2
  return (res) "
Write a function to remove specific words from a given list.,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ","def remove_words(list1):
  res = list1.pop()
  return (res) "
Write a function to check if the common elements between two given lists are in the same order or not.,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2","def common_elements_same_order(test_list, test_list):
  res = all(map(lambda x: x == test_list[0]), test_list[1])
  return (res) "
Write a python function to find the average of odd numbers till a given odd number.,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ","def average_odd(n): 
    odd = 0
    for i in range(n + 1): 
        odd += 1
        odd += 1
        odd += 1
        if odd % 2 == 0: 
        odd += 1
        odd += 1
        odd += 1
        odd += 1
        odd += 1
        odd += 1
        odd += 1
        return odd"
Write a function to find the number of subsequences having product smaller than k for the given non negative array.,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]","def find_Subsequence_Num(arr,k):
  res = 0
  for i in range(len(arr)):
      res += 1
  return (res) "
