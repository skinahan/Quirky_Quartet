{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\n\nQuestion:\nWrite a function to add two integers. however, if the sum is between the given range it will return 20.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef add_integers(a,b,c,d):\r\n  sum = a + b\r\n  if sum >= c and sum <= d:\r\n    return 20\r\n  else:\r\n    return sum\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#Question:Write a python function to check whether the given string is a Palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Additional info:Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answerAnswer:# Function to check String  \r\ndef isPalindrome(string):  \r\n      \r\n    # Using predefined function to  \r\n    # reverse to string print(string) \r\n    rev = ''.join(reversed(string))  \r\n  \r\n    # Checking if both string are  \r\n    # equal or not  print(rev)  print(\"\\n\")  print(\"\\n\")     if (string == rev):            return True      else :         return False       # Driver code          string = \"malayalam\"     ans = isPalindrome(string)      if ans == 1:          print(\"Yes\")      else :         print(\"No\")#Question:Write a python function which takes two lists of tuples as an input and returns one list of tuples as output. The list of tuples in first input contains time intervals between events while other input contains starting time of events. Returned list should contain only those event whose time interval lies between any two events in first list of tuples.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Additional info:Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answerAnswer:# Python program for implementation of MergeSort def merge_sort_interval((start1,end1), (start2,end2)): if start1 < start2 : min=start1 elif start1 > start2 : min=start2 elif end",
        "clean_code": "def add_integers(a,b,c,d):\r\n  sum = a + b\r\n  if sum >= c and sum <= d:\r\n    return 20\r\n  else:\r\n    return sum\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#Question:Write a python function to check whether the given string is a Palindrome or not. (A palindrome is a string that reads the same forwards and backwards.)Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Additional info:Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answerAnswer:# Function to check String  \r\ndef isPalindrome(string):  \r\n      \r\n    # Using predefined function to  \r\n    # reverse to string print(string) \r\n    rev = ''.join(reversed(string))  \r\n  \r\n    # Checking if both string are  \r\n    # equal or not  print(rev)  print(\"\\n\")  print(\"\\n\")     if (string == rev):            return True      else :         return False       # Driver code          string = \"malayalam\"     ans = isPalindrome(string)      if ans == 1:          print(\"Yes\")      else :         print(\"No\")#Question:Write a python function which takes two lists of tuples as an input and returns one list of tuples as output. The list of tuples in first input contains time intervals between events while other input contains starting time of events. Returned list should contain only those event whose time interval lies between any two events in first list of tuples.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Additional info:Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answerAnswer:# Python program for implementation of MergeSort def merge_sort_interval((start1,end1), (start2,end2)): if start1 < start2 : min=start1 elif start1 > start2 : min=start2 elif end"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef sum_of_two(a, b):\r\n    if a+b in range(15,20):\r\n        return 20\r\n    else:\r\n        return a+b\n\n \nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer  \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n     Answer:\r     def count_ways(n):  \r     A = [0] * (n + 1)  \r     B = [0] * (n + 1)  \r     A[0] = 1  \r     A[1] = 0  \r     B[0] = 0  \r     B[1] = 1  \r     for i in range(2, n+1):  \r         A[i] = A[i - 2] + 2 * B[i - 1]  \r         B[i] = A[i - 1] + B[i - 2]    return A[n]}</code></pre>",
        "clean_code": "def sum_of_two(a, b):\r\n    if a+b in range(15,20):\r\n        return 20\r\n    else:\r\n        return a+b\n\n \nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer  \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n     Answer:\r     def count_ways(n):  \r     A = [0] * (n + 1)  \r     B = [0] * (n + 1)  \r     A[0] = 1  \r     A[1] = 0  \r     B[0] = 0  \r     B[1] = 1  \r     for i in range(2, n+1):  \r         A[i] = A[i - 2] + 2 * B[i - 1]  \r         B[i] = A[i - 1] + B[i - 2]    return A[n]}</code></pre>"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef add(a,b):\r\n  sum = a + b\r\n  if sum in range(15,21):\r\n    return 20\r\n  else:\r\n    return sum\n\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\n\n  Answer:   import heapq as hq def heap_queue_largest(nums,n): largest_nums = hq.nlargest(n, nums) return largest_nums\n\n  Question: Write a python function to identify non-prime numbers. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer Answer: import math def is_not_prime(n): result = False for i in range(2,int(math.sqrt(n)) + 1): if n % i == 0: result = True return result\n\n Question : Write a function which will generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and object is in [\"Hockey\",\"Football\"]. Task : Write a python function which will take inputs (i) no of subjects (ii) no of verbs (iii) no of objects Task : write your code here Additional Info : Which data structure you have used ? Can this task be split into smaller subtask ? How many loops have you used ? Solve subtask iteratively & recursively both approaches & find out which one works better & why ? Answer : def generateSentences(): subjects=[\"I\", \"You\"] verbs=[\"Play\", \"Love\"] objects=[\"Hockey\",\"Football\"] for i in range(len(subjects)): for j in range (len(verbs)): for k in range (len(objects)): print((subjects[i] + \" \" + verbs[j] + \"",
        "clean_code": "def add(a,b):\r\n  sum = a + b\r\n  if sum in range(15,21):\r\n    return 20\r\n  else:\r\n    return sum\n\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\n\n  Answer:   import heapq as hq def heap_queue_largest(nums,n): largest_nums = hq.nlargest(n, nums) return largest_nums\n\n  Question: Write a python function to identify non-prime numbers. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer Answer: import math def is_not_prime(n): result = False for i in range(2,int(math.sqrt(n)) + 1): if n % i == 0: result = True return result\n\n Question : Write a function which will generate all sentences where subject is in [\"I\", \"You\"] and verb is in [\"Play\", \"Love\"] and object is in [\"Hockey\",\"Football\"]. Task : Write a python function which will take inputs (i) no of subjects (ii) no of verbs (iii) no of objects Task : write your code here Additional Info : Which data structure you have used ? Can this task be split into smaller subtask ? How many loops have you used ? Solve subtask iteratively & recursively both approaches & find out which one works better & why ? Answer : def generateSentences(): subjects=[\"I\", \"You\"] verbs=[\"Play\", \"Love\"] objects=[\"Hockey\",\"Football\"] for i in range(len(subjects)): for j in range (len(verbs)): for k in range (len(objects)): print((subjects[i] + \" \" + verbs[j] + \""
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef add_numbers(num1, num2):\r\n    sum = num1 + num2\r\n    if 10 < sum < 20:\r\n        return 20\r\n    else: \r\n        return sum\n\n \nQuestion:\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\". All given inputs are in lowercase letters a-z. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info: Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer.  \n\n Answer: def longest_common_prefix(strs):        \r\n     if not strs or not strs[0]:           \r\n         return \"\"         # get min length of strs        \r\n     min_len = len(min(strs))         # get first char of each str in list         # compare each char from 0 ~ min_len with first char from each str        for i in range(min_len):             first = strs[0][i]             for s in strs[1:]:                 if s[i] != first:                     return s[0 : i]             else:                 continue        # only one item left and it's already compared with all items before it, so just return it        if len(strs) == 1 and len(strs[0]) > 0 :            return strs[0]        else:            return \"\"\n\n  Question 3 (5 marks) - Write a program that prints out all possible combinations of two letters where the letters are 'a', or 'b'. The output should be ordered as follows:(a b), (a b), (b a), (b b). Note that you can use any programming language you want. You may use any number of lines as long as your code is readable and well documented. Hint - Think about using recursion! Answer - def printCombinationsUtil(string, start, end, index=0, buf=None):   \"\"\"Print all possible combinations of characters\"\"\"   # Print current combination   if index == end+1 :      print(\"\".join([ch for ch in buf]), end=\"\")     ",
        "clean_code": "def add_numbers(num1, num2):\r\n    sum = num1 + num2\r\n    if 10 < sum < 20:\r\n        return 20\r\n    else: \r\n        return sum\n\n \nQuestion:\nWrite a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\". All given inputs are in lowercase letters a-z. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info: Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer.  \n\n Answer: def longest_common_prefix(strs):        \r\n     if not strs or not strs[0]:           \r\n         return \"\"         # get min length of strs        \r\n     min_len = len(min(strs))         # get first char of each str in list         # compare each char from 0 ~ min_len with first char from each str        for i in range(min_len):             first = strs[0][i]             for s in strs[1:]:                 if s[i] != first:                     return s[0 : i]             else:                 continue        # only one item left and it's already compared with all items before it, so just return it        if len(strs) == 1 and len(strs[0]) > 0 :            return strs[0]        else:            return \"\"\n\n  Question 3 (5 marks) - Write a program that prints out all possible combinations of two letters where the letters are 'a', or 'b'. The output should be ordered as follows:(a b), (a b), (b a), (b b). Note that you can use any programming language you want. You may use any number of lines as long as your code is readable and well documented. Hint - Think about using recursion! Answer - def printCombinationsUtil(string, start, end, index=0, buf=None):   \"\"\"Print all possible combinations of characters\"\"\"   # Print current combination   if index == end+1 :      print(\"\".join([ch for ch in buf]), end=\"\")"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef add_integer(a,b):\r\n    sum = a+b\r\n    if 10<sum<20:\r\n        return 20\r\n    else:\r\n        return sum\n\n \nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. \r\n\n  Task:\r\n\n Write a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n Additional info: \r\n\n Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer   Answer : def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]. \n\n Question : Write a function to add two integers. however, if the sum is between the given range it will return 20. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info : Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer Answer : def add_integer(a,b): sum=a+b if 10<sum<20: return 20 else: return sum   Question : Write a python function that takes an integer as an argument and returns True if it's divisible by 100 and False otherwise Task : Write a python function that takes an integer as an argument and returns True if it's divisible by 100 and False otherwise Additional info : Which data structure is being used ? Can this task be split into smaller sub tasks ? How many loops are needed in order to solve this problem ? Solve these subtasks iteratively in order to find your answer Answer : def divisible_by100(num): result=False if num%100==0: result=True return result   Question :",
        "clean_code": "def add_integer(a,b):\r\n    sum = a+b\r\n    if 10<sum<20:\r\n        return 20\r\n    else:\r\n        return sum\n\n \nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. \r\n\n  Task:\r\n\n Write a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n Additional info: \r\n\n Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer   Answer : def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]. \n\n Question : Write a function to add two integers. however, if the sum is between the given range it will return 20. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info : Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer Answer : def add_integer(a,b): sum=a+b if 10<sum<20: return 20 else: return sum   Question : Write a python function that takes an integer as an argument and returns True if it's divisible by 100 and False otherwise Task : Write a python function that takes an integer as an argument and returns True if it's divisible by 100 and False otherwise Additional info : Which data structure is being used ? Can this task be split into smaller sub tasks ? How many loops are needed in order to solve this problem ? Solve these subtasks iteratively in order to find your answer Answer : def divisible_by100(num): result=False if num%100==0: result=True return result   Question :"
    }
}