{
    "query": "Question:\nWrite a function to find the n-th power of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nWhich data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\n'''\n\ndef power_list(li,n):\n    return list(map(lambda x:x**n,li))\n\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n # } Driver Code Ends",
        "clean_code": "'''\n\ndef power_list(li,n):\n    return list(map(lambda x:x**n,li))\n\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n # } Driver Code Ends"
    },
    "1": {
        "status": 2,
        "codex_out": "\n\n'''\ndef power(n):\n    return lambda x:x**n\n\n\n'''\nQuestion: \nWrite a function to find the n-th power of individual elements in a list using lambda function. \nTask: \nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n\t1) Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer. \n\n\t2) Write a python program for finding out number of days between two given dates. Use datetime module for this task and don't use any other modules like dateutil etc. The output should be in integer format like 3, 5, 10 etc (not string). Assume that date1 < date2 always and both dates are valid dates in Gregorian Calendar. Don't worry about leap years, just assume all years have 365 days only (i.e., no leap year). You can use these sample input/outputs for testing your code -  \n\n\tInput : date1 = '30/08/2018', date2 = '06/09/2018'   Output : 7   Input : date1 = '01/03/2017', date2 = '01/02/2018' Output : 365   Input : date1 = '28/02/2016', date2 = '01/03/2016' Output : 1   \n\n\t3) Write a python program to count words from given sentence using dictionary as collection type, where each word is key and its count as value (use str.split() method). For example if input is \"Welcome To Edureka\", then output should be - {\u2018Welcome\u2019: 1, \u2018To\u2019: 1, \u2018Edureka\u2019: 1} . Note that punctuation marks should not be considered as part of word i.e., comma (,) or full stop (.) or question mark (?) or exclamation mark (!) etc should not be counted as part of words while counting words from sentence string using dictionary data type collection object in python programming language code logic implementation solution approach algorithm technique steps process methodology theory model technique method methods practice exercise example problem solution help guide hint tutorial tips tricks trick hints answer approach algorithm technique steps process methodology theory model technique method methods practice exercise example problem solution help guide hint tutorial tips",
        "clean_code": "'''\ndef power(n):\n    return lambda x:x**n\n\n\n'''\nQuestion: \nWrite a function to find the n-th power of individual elements in a list using lambda function. \nTask: \nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n\t1) Which data structure is being used? Can the task be split into smaller sub-tasks? How many loops are needed to solve the tasks? Solve sub-tasks iteratively to find the answer. \n\n\t2) Write a python program for finding out number of days between two given dates. Use datetime module for this task and don't use any other modules like dateutil etc. The output should be in integer format like 3, 5, 10 etc (not string). Assume that date1 < date2 always and both dates are valid dates in Gregorian Calendar. Don't worry about leap years, just assume all years have 365 days only (i.e., no leap year). You can use these sample input/outputs for testing your code -  \n\n\tInput : date1 = '30/08/2018', date2 = '06/09/2018'   Output : 7   Input : date1 = '01/03/2017', date2 = '01/02/2018' Output : 365   Input : date1 = '28/02/2016', date2 = '01/03/2016' Output : 1   \n\n\t3) Write a python program to count words from given sentence using dictionary as collection type, where each word is key and its count as value (use str.split() method). For example if input is \"Welcome To Edureka\", then output should be - {\u2018Welcome\u2019: 1, \u2018To\u2019: 1, \u2018Edureka\u2019: 1} . Note that punctuation marks should not be considered as part of word i.e., comma (,) or full stop (.) or question mark (?) or exclamation mark (!) etc should not be counted as part of words while counting words from sentence string using dictionary data type collection object in python programming language code logic implementation solution approach algorithm technique steps process methodology theory model technique method methods practice exercise example problem solution help guide hint tutorial tips tricks trick hints answer approach algorithm technique steps process methodology theory model technique method methods practice exercise example problem solution help guide hint tutorial tips"
    },
    "2": {
        "status": 2,
        "codex_out": "\n\n\"\"\"\n\n\ndef power_of_elements(num, power):\n    return list(map(lambda x: x**power, num))\n\n\nprint(power_of_elements([1, 2, 3], 2))",
        "clean_code": "\"\"\"\n\n\ndef power_of_elements(num, power):\n    return list(map(lambda x: x**power, num))\n\n\nprint(power_of_elements([1, 2, 3], 2))"
    },
    "3": {
        "status": 2,
        "codex_out": "\n\n\"\"\"\n\n# Answer-1: Using lambda function and map() function.\ndef power_of_list(lst, n):\n    \"\"\"Finds the n-th power of individual elements in a list.\"\"\"\n\n    return list(map(lambda x: x**n, lst))\n\n\nif __name__ == \"__main__\":  # Run this program only from command line. Not from an IDE.\n\n    print(power_of_list([1, 2, 3], 2))  # Test 1 - Normal Case. Should print [1, 4, 9]",
        "clean_code": "\"\"\"\n\n# Answer-1: Using lambda function and map() function.\ndef power_of_list(lst, n):\n    \"\"\"Finds the n-th power of individual elements in a list.\"\"\"\n\n    return list(map(lambda x: x**n, lst))\n\n\nif __name__ == \"__main__\":  # Run this program only from command line. Not from an IDE.\n\n    print(power_of_list([1, 2, 3], 2))  # Test 1 - Normal Case. Should print [1, 4, 9]"
    },
    "4": {
        "status": 2,
        "codex_out": "\n\n\"\"\"\ndef power(lst,n):\n    return list(map(lambda x:x**n,lst))",
        "clean_code": "\"\"\"\ndef power(lst,n):\n    return list(map(lambda x:x**n,lst))"
    }
}