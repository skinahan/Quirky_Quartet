{
    "query": "Question:\nWrite a python function to check if roots of a quadratic equation are reciprocal of each other or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nThink along the lines of the variables and data structures that need to be used. Also think about the way to access the elements in the data structures.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\n'''\nimport math\ndef roots_reciprocal(a, b, c):\n    if a == 0: \n        print(\"Invalid\") \n        return -1 \n\n    d = b * b - 4 * a * c \n\n    sqrt_val = math.sqrt(abs(d)) \n\n    if d > 0: \n        root1 = (-b + sqrt_val) / (2 * a)  \n        root2 = (-b - sqrt_val) / (2 * a)  \n\n        if (root1 == 1/root2):\n            return True; \n\n    elif d == 0: \n\n        root1 = root2 = -b / (2 * a);  \n\n        if (root1 == 1/root2):\n            return True; \n\n    else: # Complex roots  \n\n       realPart = -b / (2 * a)  \n\n       imaginaryPart = sqrt_val / (2*a);  \n\n       if ((realPart + imaginaryPart) == 1/(realPart-imaginaryPart)) :\n            return True;    \t\t\t\t\t\t\t                                  # End of program",
        "clean_code": "'''\nimport math\ndef roots_reciprocal(a, b, c):\n    if a == 0: \n        print(\"Invalid\") \n        return -1 \n\n    d = b * b - 4 * a * c \n\n    sqrt_val = math.sqrt(abs(d)) \n\n    if d > 0: \n        root1 = (-b + sqrt_val) / (2 * a)  \n        root2 = (-b - sqrt_val) / (2 * a)  \n\n        if (root1 == 1/root2):\n            return True; \n\n    elif d == 0: \n\n        root1 = root2 = -b / (2 * a);  \n\n        if (root1 == 1/root2):\n            return True; \n\n    else: # Complex roots  \n\n       realPart = -b / (2 * a)  \n\n       imaginaryPart = sqrt_val / (2*a);  \n\n       if ((realPart + imaginaryPart) == 1/(realPart-imaginaryPart)) :\n            return True;    \t\t\t\t\t\t\t                                  # End of program"
    },
    "1": {
        "status": 2,
        "codex_out": "\n'''\ndef are_reciprocal(a,b,c):\n\tx1=(-b+((b**2)-(4*a*c))**0.5)/(2*a)\n\tx2=(-b-((b**2)-(4*a*c))**0.5)/(2*a)\n\n\tif x1==1/x2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n    \n\n  #Remove pass and write your logic here. Use the appropriate variables from symbols table above.\n    #pass\n\n  #Use the following values to test your program. Also create new values to test the robustness of your code in edge cases (like a=0, b=0 etc.) Think about what kind of input your code should take and what kind of output it should give for all possible cases. \n\n   # print(\"Are roots reciprocal?\",are_reciprocal(3,-11,-4))",
        "clean_code": "'''\ndef are_reciprocal(a,b,c):\n\tx1=(-b+((b**2)-(4*a*c))**0.5)/(2*a)\n\tx2=(-b-((b**2)-(4*a*c))**0.5)/(2*a)\n\n\tif x1==1/x2:\n\t\treturn True\n\telse:\n\t\treturn False\n\n    \n\n  #Remove pass and write your logic here. Use the appropriate variables from symbols table above.\n    #pass\n\n  #Use the following values to test your program. Also create new values to test the robustness of your code in edge cases (like a=0, b=0 etc.) Think about what kind of input your code should take and what kind of output it should give for all possible cases. \n\n   # print(\"Are roots reciprocal?\",are_reciprocal(3,-11,-4))"
    },
    "2": {
        "status": 2,
        "codex_out": "\n'''\ndef is_reciprocal(x1, x2):\n    if x1 == 0 or x2 == 0:\n        return False\n    elif 1/x1 == x2 or 1/x2 == x1:\n        return True\n    else:\n        return False\n\n    \n\n\n\n  #Remove pass and write your logic here. Use the appropriate variables from the question.\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  #Use the below given print statements to display the output. Also, do not modify them for verification to work.print(\"The roots are reciprocal of each other\")print(\"The roots are not reciprocal of each other\")",
        "clean_code": "'''\ndef is_reciprocal(x1, x2):\n    if x1 == 0 or x2 == 0:\n        return False\n    elif 1/x1 == x2 or 1/x2 == x1:\n        return True\n    else:\n        return False\n\n    \n\n\n\n  #Remove pass and write your logic here. Use the appropriate variables from the question.\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  #Use the below given print statements to display the output. Also, do not modify them for verification to work.print(\"The roots are reciprocal of each other\")print(\"The roots are not reciprocal of each other\")"
    },
    "3": {
        "status": 2,
        "codex_out": "\n\n'''\n\n\n#PF-Assgn-53\ndef check_double(number):\n    #Remove pass and write your logic here\n    str1=str(number)\n    str2=str1[::-1]  #reverse string \n    if str1[0]==\"0\":   #if leading digit is 0 then its not a double number so return False \n        return False \n\n    if str1==str2:     #if given number is equal to its reverse then it is a double number so return True  \n        return True \n\n    else:              #otherwise it is not a double number so return False  \n        return False \n\n    \n\n    \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n            \t\t\t\t\t#print(check_double(123))",
        "clean_code": "'''\n\n\n#PF-Assgn-53\ndef check_double(number):\n    #Remove pass and write your logic here\n    str1=str(number)\n    str2=str1[::-1]  #reverse string \n    if str1[0]==\"0\":   #if leading digit is 0 then its not a double number so return False \n        return False \n\n    if str1==str2:     #if given number is equal to its reverse then it is a double number so return True  \n        return True \n\n    else:              #otherwise it is not a double number so return False  \n        return False \n\n    \n\n    \n\n        \n\n        \n\n        \n\n        \n\n        \n\n        \n\n            \t\t\t\t\t#print(check_double(123))"
    },
    "4": {
        "status": 2,
        "codex_out": "\n\n'''\ndef are_reciprocals(a,b,c):\n\tif a==0:\n\t\treturn False\n\n\td = b**2 - 4*a*c \n\n\tif d < 0: \n\t\treturn False\n\n\tx1 = (-b + math.sqrt(d)) / (2*a) \n\n\tx2 = (-b - math.sqrt(d)) / (2*a) \n\n\treturn x1 * x2 == 1",
        "clean_code": "'''\ndef are_reciprocals(a,b,c):\n\tif a==0:\n\t\treturn False\n\n\td = b**2 - 4*a*c \n\n\tif d < 0: \n\t\treturn False\n\n\tx1 = (-b + math.sqrt(d)) / (2*a) \n\n\tx2 = (-b - math.sqrt(d)) / (2*a) \n\n\treturn x1 * x2 == 1"
    }
}