{
    "query": "Question:\nWrite a function to find the n-th power of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nPay attention to the datatype of input and expected output. Is the input a tuple? Is the input a string? Is the input a matrix? Use correct data structure to derive the needed answer.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\ndef lambda_function(l,n):\n    return list(map(lambda x : x**n, l))\n'''\ndef lambda_function(l,n):\n    return list(map(lambda x : x**n, l))",
        "clean_code": "def lambda_function(l,n):\n    return list(map(lambda x : x**n, l))\n'''\ndef lambda_function(l,n):\n    return list(map(lambda x : x**n, l))"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef power_lambda(lst,n):\n    return list(map(lambda x:x**n, lst))\nExample:\nInput: [1,2,3], 3 \nOutput: [1, 8, 27] \nInput: [2, 4], 3 \nOutput: [8, 64] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n */",
        "clean_code": "def power_lambda(lst,n):\n    return list(map(lambda x:x**n, lst))\nExample:\nInput: [1,2,3], 3 \nOutput: [1, 8, 27] \nInput: [2, 4], 3 \nOutput: [8, 64] \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n */"
    },
    "2": {
        "status": 2,
        "codex_out": "\n'''\ndef power_list(l,n):\n    return list(map(lambda x:x**n,l))",
        "clean_code": "'''\ndef power_list(l,n):\n    return list(map(lambda x:x**n,l))"
    },
    "3": {
        "status": 2,
        "codex_out": "\nExample 1:\nInput:\npower_lambda([1, 2, 3], 2)\nOutput:\n[1, 4, 9]\nExample 2:\nInput:\npower_lambda([1, 2, 3], 3)\nOutput:\n[1, 8, 27]\n\n\n\n\n\n\n\n\n\n\n\n  */",
        "clean_code": "Example 1:\nInput:\npower_lambda([1, 2, 3], 2)\nOutput:\n[1, 4, 9]\nExample 2:\nInput:\npower_lambda([1, 2, 3], 3)\nOutput:\n[1, 8, 27]\n\n\n\n\n\n\n\n\n\n\n\n  */"
    },
    "4": {
        "status": 2,
        "codex_out": "\n'''\ndef power_list(l,n):\n    return list(map(lambda x:x**n,l))",
        "clean_code": "'''\ndef power_list(l,n):\n    return list(map(lambda x:x**n,l))"
    }
}