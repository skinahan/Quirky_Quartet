{
    "query": "Question:\nWrite a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\n'''\nfrom collections import defaultdict\ndef groupby(func, seq):\n    d = defaultdict(list)\n    for i in seq:\n        d[func(i)].append(i)\n\n    return dict(d)",
        "clean_code": "'''\nfrom collections import defaultdict\ndef groupby(func, seq):\n    d = defaultdict(list)\n    for i in seq:\n        d[func(i)].append(i)\n\n    return dict(d)"
    },
    "1": {
        "status": 2,
        "codex_out": "\n\n\"\"\"\n\n\ndef group_by_key(dict_list):\n    from collections import defaultdict\n\n    d = defaultdict(list)\n\n    for key, value in dict_list:\n        d[key].append(value)\n\n    return d",
        "clean_code": "\"\"\"\n\n\ndef group_by_key(dict_list):\n    from collections import defaultdict\n\n    d = defaultdict(list)\n\n    for key, value in dict_list:\n        d[key].append(value)\n\n    return d"
    },
    "2": {
        "status": 2,
        "codex_out": "\n\nThe function should be named groupby_without_lambda. The code should work with Python 3.6.1\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\ndef groupby_without_lambda(func, iterable):\n\n    result = defaultdict(list)\n\n    for value in iterable:\n        result[func(value)].append(value)\n\n    return dict(result)",
        "clean_code": "The function should be named groupby_without_lambda. The code should work with Python 3.6.1\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\ndef groupby_without_lambda(func, iterable):\n\n    result = defaultdict(list)\n\n    for value in iterable:\n        result[func(value)].append(value)\n\n    return dict(result)"
    },
    "3": {
        "status": 2,
        "codex_out": "\n\"\"\"\n\n\ndef group_by_key(seq):\n    \"\"\"\n\n    :param seq: list of tuples\n    :return: dict with keys as first element in tuple, values as second element in tuple\n    \"\"\"\n\n    from collections import defaultdict\n\n    d = defaultdict(list)\n\n    for k, v in seq:\n        d[k].append(v)\n\n    return d",
        "clean_code": "\"\"\"\n\n\ndef group_by_key(seq):\n    \"\"\"\n\n    :param seq: list of tuples\n    :return: dict with keys as first element in tuple, values as second element in tuple\n    \"\"\"\n\n    from collections import defaultdict\n\n    d = defaultdict(list)\n\n    for k, v in seq:\n        d[k].append(v)\n\n    return d"
    },
    "4": {
        "status": 2,
        "codex_out": "\n\"\"\"\nfrom collections import defaultdict\n\n\ndef groupby(func, seq):\n    result = defaultdict(list)\n\n    for item in seq:\n        result[func(item)].append(item)\n\n    return dict(result)",
        "clean_code": "\"\"\"\nfrom collections import defaultdict\n\n\ndef groupby(func, seq):\n    result = defaultdict(list)\n\n    for item in seq:\n        result[func(item)].append(item)\n\n    return dict(result)"
    }
}