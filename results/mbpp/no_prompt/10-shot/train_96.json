{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to find number of even elements in the given list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef even_elements(nums):\r\n  even_nums = list(filter(lambda x: (x%2 == 0) , nums))\r\n  return len(even_nums)\n\nQuestion:\nWrite a function to find the number of occurrences of a substring in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n\n\n  # Python program to count occurrence  \r\n# of an element in a list using lambda function  \r\ndef countX(lst, x): \r\n\n    return len(list(filter(lambda elem : elem == x, lst))) \r\n\n    \r\n\n      \r\n\n     # Driver Code  \r\n\n    lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]  \r\n\n    x = 8;  \r\n\n    print('{} has occurred {} times'.format(x ,countX(lst , x)))  \n\n     # Python program to count occurrence of an element in a list using lambda function  `enter code here`",
        "clean_code": "def even_elements(nums):\r\n  even_nums = list(filter(lambda x: (x%2 == 0) , nums))\r\n  return len(even_nums)"
    },
    "1": {
        "status": 1,
        "codex_out": "\ndef even_elements(nums):\r\n  even_elements = list(filter(lambda x: x % 2 == 0, nums))\r\n  return even_elements\n\nQuestion:\nWrite a function to find number of odd elements in the given list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n\n\n\n\n\n\n\n\n  def odd_elements(nums):\r\n    odd_elements = list(filter(lambda x: x % 2 != 0, nums))\r\n    return odd_elements",
        "clean_code": "def even_elements(nums):\r\n  even_elements = list(filter(lambda x: x % 2 == 0, nums))\r\n  return even_elements"
    },
    "2": {
        "status": 0,
        "codex_out": "\ndef even_count(nums):\r\n  even = len(list(filter(lambda x: x % 2 == 0, nums)))\r\n  return even\n\nQuestion:\nWrite a function to check whether a string is a palindrome or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef isPalindrome(string): \r\n\tleft, right = 0, len(string) - 1\r\n\twhile right >= left: \r\n\t\tif not string[left] == string[right]: \r\n\t\t\treturn False\r\n\t\tleft += 1;right -= 1\r\n\n    return True\n\n \n\n  \n\n  \n\n  \n\n  \n\n  \n\n    \n\n    \n\n    \n\n    \n\n      </code>**</code>**</code></pre>",
        "clean_code": "def even_count(nums):\r\n  even = len(list(filter(lambda x: x % 2 == 0, nums)))\r\n  return even"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef even_nums(list1):\r\n  count = len(list(filter(lambda x: (x % 2 == 0), list1)))\r\n  return count\nQuestion:\nWrite a function to find the number of ways to reach the top of stair case with n steps, given that you can either climb 1 or 2 steps at a time.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef staircase_ways(n):\r\n\u00a0 if n <= 1:\n\u00a0 \u00a0 return n\n\u00a0 else:\n\u00a0 \u00a0 return staircase_ways(n-1) + staircase_ways(n-2)\n\n  Question:\rWrite a function to find all numbers which are divisible by 7 but not multiple of 5 in a given range of numbers [l, h].\rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n Answer:\n\n def divisible7not5(l,h):\n\n\u00a0 lst = []\n\u00a0 for i in range (l,h+1):\n\u00a0 \u00a0 if i%7==0 and i%5!=0 :\n\u00a0 \u00a0 \u00a0 lst.append(str(i))\n\u00a0 return ','.join (lst)\n\n Question:\r Write a function to check whether the given number is an Armstrong number or not using lambda functions. Hint : Use map() and reduce().\n\n Task : Write a python function to solve the above question .No additional comments and docstrings are needed .\n\n Answer : from functools import reduce def armstrongnumberchecker (num) : nums = [int (x) for x in str (num)] power = len (str (num)) sum = 0 for i in nums : sum += pow (i , power ) if sum == num : return True else : return False Question : Write a program that reads two strings from user input and checks whether they are anagrams or not . Task Write your code as one line using lambda functions . Answer s1=input(\"enter string 1\") s2=input(\"enter string 2\") isanagram=lambda x , y :( sorted ([char for char in x]) == sorted ([char for char in y])) print (\"Strings are anagram \" ,isanagram ('clint eastwood' , 'old west action' )) Question Write a python program which takes input as list of",
        "clean_code": "def even_nums(list1):\r\n  count = len(list(filter(lambda x: (x % 2 == 0), list1)))\r\n  return count\nQuestion:\nWrite a function to find the number of ways to reach the top of stair case with n steps, given that you can either climb 1 or 2 steps at a time.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef staircase_ways(n):\r\n\u00a0 if n <= 1:\n\u00a0 \u00a0 return n\n\u00a0 else:\n\u00a0 \u00a0 return staircase_ways(n-1) + staircase_ways(n-2)\n\n  Question:\rWrite a function to find all numbers which are divisible by 7 but not multiple of 5 in a given range of numbers [l, h].\rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n Answer:\n\n def divisible7not5(l,h):\n\n\u00a0 lst = []\n\u00a0 for i in range (l,h+1):\n\u00a0 \u00a0 if i%7==0 and i%5!=0 :\n\u00a0 \u00a0 \u00a0 lst.append(str(i))\n\u00a0 return ','.join (lst)\n\n Question:\r Write a function to check whether the given number is an Armstrong number or not using lambda functions. Hint : Use map() and reduce().\n\n Task : Write a python function to solve the above question .No additional comments and docstrings are needed .\n\n Answer : from functools import reduce def armstrongnumberchecker (num) : nums = [int (x) for x in str (num)] power = len (str (num)) sum = 0 for i in nums : sum += pow (i , power ) if sum == num : return True else : return False Question : Write a program that reads two strings from user input and checks whether they are anagrams or not . Task Write your code as one line using lambda functions . Answer s1=input(\"enter string 1\") s2=input(\"enter string 2\") isanagram=lambda x , y :( sorted ([char for char in x]) == sorted ([char for char in y])) print (\"Strings are anagram \" ,isanagram ('clint eastwood' , 'old west action' )) Question Write a python program which takes input as list of"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef even_elements(nums):\r\n  even_nums = list(filter(lambda x: (x % 2 == 0), nums))\r\n  return len(even_nums)\n\nQuestion:\nWrite a function to find the sum of all numbers in a list using lambda function.\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nAnswer:\r\ndef sum_of_list(nums):\r\n  return reduce((lambda x, y: x + y), nums)",
        "clean_code": "def even_elements(nums):\r\n  even_nums = list(filter(lambda x: (x % 2 == 0), nums))\r\n  return len(even_nums)\n\nQuestion:\nWrite a function to find the sum of all numbers in a list using lambda function.\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nAnswer:\r\ndef sum_of_list(nums):\r\n  return reduce((lambda x, y: x + y), nums)"
    }
}