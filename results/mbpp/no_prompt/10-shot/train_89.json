{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to multiply consecutive numbers of a given list.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef multiply_consecutive(nums):\r\n  nums = [nums[i] * nums[i + 1] for i in range(len(nums) - 1)]\r\n  return nums\n\n\nQuestion:\nWrite a function to find the maximum and minimum numbers from a sequence of numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef max_min_num(data):\r\n  min_num = min(data)\r\n  max_num = max(data)\r\n  return min_num,max_num\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ############################################################################ ###################################################### ###################################################### ###################################################### ###################################################### ###########",
        "clean_code": "def multiply_consecutive(nums):\r\n  nums = [nums[i] * nums[i + 1] for i in range(len(nums) - 1)]\r\n  return nums"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef multiply_list(num):\r\n  for i in range(len(num)):\r\n    num[i] *= i\r\n  return num\n\n\nQuestion:\nWrite a function to find the sum of all even numbers from 0 to 10.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def sumofeven():\r\n    sum = 0\r\n    for i in range(0, 11):  \r\n        if i % 2 == 0: \r\n            sum = sum + i \r\n    return (sum)\n\n  Question: Write a function to find all the numbers divisible by 6 but not a multiple of 5 between 100 and 500 (inclusive). Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def divisible_by_6(): result = [] for num in range(100, 501): if (num % 6 == 0) and (num % 5 != 0): result.append(str(num)) return ','.join(result) Question: Write a function to find all pairs of elements in an integer array whose sum is equal to a specified number Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def pair_sum(): list1=[1,2,3,4] n=5 count=0 for x in list1 : if n-x in list1 : count+=1 print(\"The pairs are\",x,\",\",n-x) print(\"No of pairs\",count//2) Question: Write a python program that accepts an integer (n) and computes the value of n+nn+nnn Task : The number n should be taken as input from user Answer : def compute() : n=int(input(\"Enter any no\")) t1=n t2=n*10+n t3=n*100+t2 s=t1+t2+t3 print('the value is',s) Question : Write a Python program which iterates the integers from 1 to 50 For multiples of three print \"Fizz\" instead of the number For multiples of five print \"Buzz\" For numbers which are multiples of both three and five print \"FizzBuzz\". Task : The number should be taken as input from user Answer : def",
        "clean_code": "def multiply_list(num):\r\n  for i in range(len(num)):\r\n    num[i] *= i\r\n  return num\n\n\nQuestion:\nWrite a function to find the sum of all even numbers from 0 to 10.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def sumofeven():\r\n    sum = 0\r\n    for i in range(0, 11):  \r\n        if i % 2 == 0: \r\n            sum = sum + i \r\n    return (sum)\n\n  Question: Write a function to find all the numbers divisible by 6 but not a multiple of 5 between 100 and 500 (inclusive). Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def divisible_by_6(): result = [] for num in range(100, 501): if (num % 6 == 0) and (num % 5 != 0): result.append(str(num)) return ','.join(result) Question: Write a function to find all pairs of elements in an integer array whose sum is equal to a specified number Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def pair_sum(): list1=[1,2,3,4] n=5 count=0 for x in list1 : if n-x in list1 : count+=1 print(\"The pairs are\",x,\",\",n-x) print(\"No of pairs\",count//2) Question: Write a python program that accepts an integer (n) and computes the value of n+nn+nnn Task : The number n should be taken as input from user Answer : def compute() : n=int(input(\"Enter any no\")) t1=n t2=n*10+n t3=n*100+t2 s=t1+t2+t3 print('the value is',s) Question : Write a Python program which iterates the integers from 1 to 50 For multiples of three print \"Fizz\" instead of the number For multiples of five print \"Buzz\" For numbers which are multiples of both three and five print \"FizzBuzz\". Task : The number should be taken as input from user Answer : def"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef multiply_consecutive(nums):\r\n  result = 1\r\n  for i in range(len(nums)):\r\n    result = result * nums[i]\r\n  return result\n\n \nQuestion:\rWrite a function to find the average of numbers in a given list.\rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n\nAnswer:\n\n\n\n  import statistics as st  \ndef avg_list(list1):  \n    return st.mean(list1)  \n\n\n\n Question: Write a function to find the intersection point of two linked lists, if it exists. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def getIntersectionNode(self, headA, headB): tempA = headA tempB = headB while tempA != tempB: if not tempA : tempA = headB else : tempA = tempA.next if not tempB : tempB = headA else : tempB =tempB.next return (tempA) Question: Write a python function to check whether two strings are anagram or not by using Counter() method of collections library . Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer: from collections import Counter def is_anagram(str1, str2): return Counter(str1) == Counter(str2) Question : Write a program that accepts an array of integers and returns an array with only unique elements present in it without using set(). Task : Write a python program/function that solves the above problem . No additional comments and docstrings are needed Answer : def unique_elements(lst): uniques=[] for element in lst : if element not in uniques : uniques += [element] return (uniques) Question:Write a program that accepts an array of integers and returns the sum of all numbers without using sum(). Task:Write a python program/function that solves the above problem .No additional comments and docstrings are needed Answer def sum_ofnum (lst): total=0 for x in lst : total+=x return total",
        "clean_code": "def multiply_consecutive(nums):\r\n  result = 1\r\n  for i in range(len(nums)):\r\n    result = result * nums[i]\r\n  return result\n\n \nQuestion:\rWrite a function to find the average of numbers in a given list.\rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n\nAnswer:\n\n\n\n  import statistics as st  \ndef avg_list(list1):  \n    return st.mean(list1)  \n\n\n\n Question: Write a function to find the intersection point of two linked lists, if it exists. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def getIntersectionNode(self, headA, headB): tempA = headA tempB = headB while tempA != tempB: if not tempA : tempA = headB else : tempA = tempA.next if not tempB : tempB = headA else : tempB =tempB.next return (tempA) Question: Write a python function to check whether two strings are anagram or not by using Counter() method of collections library . Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer: from collections import Counter def is_anagram(str1, str2): return Counter(str1) == Counter(str2) Question : Write a program that accepts an array of integers and returns an array with only unique elements present in it without using set(). Task : Write a python program/function that solves the above problem . No additional comments and docstrings are needed Answer : def unique_elements(lst): uniques=[] for element in lst : if element not in uniques : uniques += [element] return (uniques) Question:Write a program that accepts an array of integers and returns the sum of all numbers without using sum(). Task:Write a python program/function that solves the above problem .No additional comments and docstrings are needed Answer def sum_ofnum (lst): total=0 for x in lst : total+=x return total"
    },
    "3": {
        "status": 1,
        "codex_out": "\nfrom functools import reduce\r\ndef multiply_consecutive(list1):\r\n  result=reduce(lambda x,y:x*y,list1)\r\n  return result\n\n\nQuestion:\nWrite a function to find the number of zeros at the end of a factorial of a given number.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n   def count_zeros(n): \r\n       count = 0; \r\n       i=5; \r\n       while (n/i>=1):  \r\n           count += int(n/i)  \r\n\n           i *= 5;  \r\n\n       return int(count);   \n\n      n = 100;  \r\n\n      print(\"Count of trailing 0s \"+\"in 100! is\",count_zeros(n));   \n\n      n = 500;  \n\n      print(\"Count of trailing 0s \"+\"in 500! is\",count_zeros(n));   \n\n      n = 1000;  \n\n      print(\"Count of trailing 0s \"+\"in 1000! is\",count_zeros(n)) ;     </pre>",
        "clean_code": "from functools import reduce\r\ndef multiply_consecutive(list1):\r\n  result=reduce(lambda x,y:x*y,list1)\r\n  return result"
    },
    "4": {
        "status": 2,
        "codex_out": "\nfrom functools import reduce\r\ndef multiply(nums):\r\n  product = reduce((lambda x, y: x * y), nums)\r\n  return product\n\n\nQuestion:\nWrite a function to remove all duplicates from a list.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def remove_duplicates(nums):\r\n  unique_list = [] \r\n  for elem in nums: \r\n    if elem not in unique_list: \r\n      unique_list.append(elem) \r\n\n return unique_list\n\n\n\n Question: Write a function to check whether the given number is Armstrong or not by using lambda function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def isArmstrongNumber(num): order = len(str(num)) sum = 0 temp = num while temp > 0 : digit = temp % 10 sum += digit ** order temp //= 10 if num == sum : print('The given number is an Armstrong number.') else : print('The given number is not an Armstrong number.') Question: Write a function to find the elements which have odd frequency from the given list of numbers by using lambda function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def oddFreqList (arr, n): result = [] for i in range (0, n): count = 0 for j in range (0, n): if arr[i] == arr[j]: count+= 1 if count%2!=0 : result .append (arr[i]) return result Question: Write a python program that contains one lambda function which accepts one parameter and returns power of two for that parameter value by using lambda functions with filter(). Task 1 - Write a python program that contains one lambda function which accepts two parameters and returns true only if both parameters are equal otherwise false by using lambdas with filter(). Task 2 -Write a python program that contains one lambda function which accepts two parameters and returns true only if both parameters are equal otherwise false by using lambdas with map(). Task 3 -Write a python program that contains one lambda function which accepts two parameters and returns multiplication of those two numbers by using lambdas with map(). Task 4 -Writea",
        "clean_code": "from functools import reduce\r\ndef multiply(nums):\r\n  product = reduce((lambda x, y: x * y), nums)\r\n  return product\n\n\nQuestion:\nWrite a function to remove all duplicates from a list.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def remove_duplicates(nums):\r\n  unique_list = [] \r\n  for elem in nums: \r\n    if elem not in unique_list: \r\n      unique_list.append(elem) \r\n\n return unique_list\n\n\n\n Question: Write a function to check whether the given number is Armstrong or not by using lambda function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def isArmstrongNumber(num): order = len(str(num)) sum = 0 temp = num while temp > 0 : digit = temp % 10 sum += digit ** order temp //= 10 if num == sum : print('The given number is an Armstrong number.') else : print('The given number is not an Armstrong number.') Question: Write a function to find the elements which have odd frequency from the given list of numbers by using lambda function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def oddFreqList (arr, n): result = [] for i in range (0, n): count = 0 for j in range (0, n): if arr[i] == arr[j]: count+= 1 if count%2!=0 : result .append (arr[i]) return result Question: Write a python program that contains one lambda function which accepts one parameter and returns power of two for that parameter value by using lambda functions with filter(). Task 1 - Write a python program that contains one lambda function which accepts two parameters and returns true only if both parameters are equal otherwise false by using lambdas with filter(). Task 2 -Write a python program that contains one lambda function which accepts two parameters and returns true only if both parameters are equal otherwise false by using lambdas with map(). Task 3 -Write a python program that contains one lambda function which accepts two parameters and returns multiplication of those two numbers by using lambdas with map(). Task 4 -Writea"
    }
}