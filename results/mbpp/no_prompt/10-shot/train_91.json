{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a python function to find the last two digits in factorial of a given number.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 2,
        "codex_out": "\nimport math\r\ndef fact_last_two_digits(n):\r\n  fact = math.factorial(n)\r\n  last_two = int(str(fact)[-2:])\r\n  return last_two\n\n\n\n\nQuestion:\nWrite a python function to find the unique elements in a list. Ignore the order of elements in a list. Use set data structure to identify the unique elements.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \nAnswer: \r\n\n def find_unique(list1): \r\n    return (list(set(list1)))  \n\n\n\n Question: Write a function to get all possible subsets from a set of distinct integers without using itertools module. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def allPossibleSubsets(): lists = [[]] for i in range(3): lists = [x+[y] for x in lists for y in range((lists[-1][-1]+1) if lists[-1] else 0, 4)] return lists print(\"All Possible Subsets : \" + str(allPossibleSubsets())) Output : All Possible Subsets : [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 3], [0, 2], [0, 2, 3], [0, 3], [1], [1, 2], [1 ,2 ,3 ],[ 1 ,3 ],[ 2 ],[2 ,3 ],[ 3 ]] Question: Write a function which will take two strings as arguments and returns number of times first string occurs in second string using recursion without using any builtin methods or functions . Task: Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def countOccurenceRecursive (string , char ): length = len (string ) if length == 0 : return 0 elif string[length - 1 ] == char : return countOccurenceRecursive (string , char ) + 1 else : return countOccurenceRecursive (string , char ) print (\"Number of occurences is:\" + str (countOccurenceRecursive ('geeksforgeeks' , 'e' ))) Output Number of",
        "clean_code": "import math\r\ndef fact_last_two_digits(n):\r\n  fact = math.factorial(n)\r\n  last_two = int(str(fact)[-2:])\r\n  return last_two\n\n\n\n\nQuestion:\nWrite a python function to find the unique elements in a list. Ignore the order of elements in a list. Use set data structure to identify the unique elements.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \nAnswer: \r\n\n def find_unique(list1): \r\n    return (list(set(list1)))  \n\n\n\n Question: Write a function to get all possible subsets from a set of distinct integers without using itertools module. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def allPossibleSubsets(): lists = [[]] for i in range(3): lists = [x+[y] for x in lists for y in range((lists[-1][-1]+1) if lists[-1] else 0, 4)] return lists print(\"All Possible Subsets : \" + str(allPossibleSubsets())) Output : All Possible Subsets : [[], [0], [0, 1], [0, 1, 2], [0, 1, 2, 3], [0, 1, 3], [0, 2], [0, 2, 3], [0, 3], [1], [1, 2], [1 ,2 ,3 ],[ 1 ,3 ],[ 2 ],[2 ,3 ],[ 3 ]] Question: Write a function which will take two strings as arguments and returns number of times first string occurs in second string using recursion without using any builtin methods or functions . Task: Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def countOccurenceRecursive (string , char ): length = len (string ) if length == 0 : return 0 elif string[length - 1 ] == char : return countOccurenceRecursive (string , char ) + 1 else : return countOccurenceRecursive (string , char ) print (\"Number of occurences is:\" + str (countOccurenceRecursive ('geeksforgeeks' , 'e' ))) Output Number of"
    },
    "1": {
        "status": 0,
        "codex_out": "\ndef last_two_digits(n):\r\n  if n < 0: \r\n    return 0\r\n  elif n <= 1: \r\n    return 1\r\n  else: \r\n    res = 1\r\n    for i in range(2, n + 1):  \r\n      res = (res * i) % 100       # mod 100 to get last 2 digits of factorial of a number.  \r\n    return res % 100\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nQuestion: Write a python function to find the first two max values from the given list. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def first_two_max(nums): nums = sorted(set(nums), reverse=True) top2 = nums[0], nums[1] return top2 Question: Write a function to find all numbers which are divisible by 7 and multiple of 5 between given range using filter method. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def divisible_by7and5(lst,rng): result=list(filter((lambda x:(x%7==0 and x%5==0)),range(lst,rng))) return result Question: Write a python function to get all prime numbers between given interval using filter method. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : import math def isPrime (num): if (num <= 1): return False for i in range (2, int (math . sqrt (num)) + 1 ): if (num % i == 0 ): return False ; return True ; def primesListInRange (start , end ): listOfPrimes = [] for num in range (start , end +1 ) : if isPrime (num) : listOfPrimes . append (num) print (\" Prime Numbers In Given Range Are \" , listOfPrimes ) Question :Write a Python program which takes two digits m & n as input and generate a 2-dimensional array with m rows and n columns such that each element is an integer between 0 to 9 without repetition using nested loop with list comprehension technique Task :Write Python program using nested loop with list comprehension technique Answer :def matrix(): m=int(",
        "clean_code": "def last_two_digits(n):\r\n  if n < 0: \r\n    return 0\r\n  elif n <= 1: \r\n    return 1\r\n  else: \r\n    res = 1\r\n    for i in range(2, n + 1):  \r\n      res = (res * i) % 100       # mod 100 to get last 2 digits of factorial of a number.  \r\n    return res % 100"
    },
    "2": {
        "status": 0,
        "codex_out": "\ndef last_two(num):\r\n  res = 1\r\n  for i in range(1, num+1):\r\n    res = (res * i) % 100\r\n  return res\n\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n\n\n\n\n\n\n\n\n\n\n \ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n   */",
        "clean_code": "def last_two(num):\r\n  res = 1\r\n  for i in range(1, num+1):\r\n    res = (res * i) % 100\r\n  return res"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1) \r\ndef last_two_digits(n): \r\n    f = factorial(n) \r\n    return f % 100\n\n \n\n \n\n\n\n \n\n\n\n  \n\n  \n\n  \n\n  \n`;",
        "clean_code": "def factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1) \r\ndef last_two_digits(n): \r\n    f = factorial(n) \r\n    return f % 100\n\n \n\n \n\n\n\n \n\n\n\n  \n\n  \n\n  \n\n  \n`;"
    },
    "4": {
        "status": 0,
        "codex_out": "\ndef last_two_digits(num):\r\n  fact = 1\r\n  for i in range(1,num+1):\r\n    fact = fact * i\r\n  return (fact % 100)\n\n\n\n\n\n\n\n\n\n \n#Q2. Answer these questions about the data:\r\n#a. How many rows are there in the dataset? [5 points]\r\n#b. How many columns are there in the dataset? [5 points]\r\n#c. What are the column names in our dataset? [5 points]\r\n#d. What types of data do we have in our dataset? [10 points]\r\n#e. Do we have any missing values in our dataset? Where? [10 points]   #Hint: isnull() and sum() methods can be helpful here to find out total number of missing values for each column or row. To get the location of missing values, isna() method can be useful.   #Note: You should give a clear description of where you found missing values and how many they are using markdown cells after your code cell (if any).  For example, if you find that there are two missing values at row 3 and 5 under 'Sales' column then you can write this as follows:   #Missing Values: 'Sales' column has 2 missing value at row index 3 and 5 respectively.    #You will not get full marks if your answer is not clear enough to understand where exactly they are located or how many they are etc., so be careful while explaining your answers!    \n\n\n\n\n\n\n\n  ####Question 3: Perform Data Cleaning on this Dataset (15 Points)####     #Data cleaning is an important step which often requires to transform raw data into a suitable format for further analysis such as removing duplicate rows or columns, handling invalid data (such as NaN), removing unwanted outliers etc., In this question, you need to perform several tasks to clean this dataset before further analysis such as:      #Task 1 - Drop all duplicate rows from the given dataset and name it \"df\" again after dropping them (Hint - drop_duplicates() method). [3 Points]      #Task 2 - Drop all unnecessary columns from \"df\" that has only one value for all records such as \"P/N\". Name it df1 again after dropping them.[3 Points]      #Task 3 - Fill all NaN with 0 under \"",
        "clean_code": "def last_two_digits(num):\r\n  fact = 1\r\n  for i in range(1,num+1):\r\n    fact = fact * i\r\n  return (fact % 100)\n\n\n\n\n\n\n\n\n\n \n#Q2. Answer these questions about the data:\r\n#a. How many rows are there in the dataset? [5 points]\r\n#b. How many columns are there in the dataset? [5 points]\r\n#c. What are the column names in our dataset? [5 points]\r\n#d. What types of data do we have in our dataset? [10 points]\r\n#e. Do we have any missing values in our dataset? Where? [10 points]   #Hint: isnull() and sum() methods can be helpful here to find out total number of missing values for each column or row. To get the location of missing values, isna() method can be useful.   #Note: You should give a clear description of where you found missing values and how many they are using markdown cells after your code cell (if any).  For example, if you find that there are two missing values at row 3 and 5 under 'Sales' column then you can write this as follows:   #Missing Values: 'Sales' column has 2 missing value at row index 3 and 5 respectively.    #You will not get full marks if your answer is not clear enough to understand where exactly they are located or how many they are etc., so be careful while explaining your answers!    \n\n\n\n\n\n\n\n  ####Question 3: Perform Data Cleaning on this Dataset (15 Points)####     #Data cleaning is an important step which often requires to transform raw data into a suitable format for further analysis such as removing duplicate rows or columns, handling invalid data (such as NaN), removing unwanted outliers etc., In this question, you need to perform several tasks to clean this dataset before further analysis such as:      #Task 1 - Drop all duplicate rows from the given dataset and name it \"df\" again after dropping them (Hint - drop_duplicates() method). [3 Points]      #Task 2 - Drop all unnecessary columns from \"df\" that has only one value for all records such as \"P/N\". Name it df1 again after dropping them.[3 Points]      #Task 3 - Fill all NaN with 0 under \""
    }
}