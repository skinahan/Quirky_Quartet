{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to find the n-th power of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef power_n(nums, n):\r\n  power_n = list(map(lambda x: x ** n, nums))\r\n  return power_n\n\nQuestion:\nWrite a function to find the maximum number of overlapping intervals from a given set of interval pairs.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n \r\n\n  def maxOverlap(intervals): \r\n    intervals = sorted(intervals)  \r\n\n    maxOverlapCount = 1;  \r\n    overlapCount = 1;  \r\n    i = 0;  \r\n\n    for j in range(1, len(intervals)): \r\n        if (intervals[j][0] <= intervals[i][1]):  \r\n\n            overlapCount += 1;  \r\n\n            if (overlapCount > maxOverlapCount):  \r                maxOverlapCount = overlapCount;  \r\n\n        else: \t\t\t\t\t\t\t# Reset count of overlaps when interval 'j' starts after ending of interval 'i'      # Move 'i' to next interval     i += 1     overlapCount -= 1     if (maxOverlapCount < overlapCount):       maxOverlapCount = overlapCount return maxOverlapCou",
        "clean_code": "def power_n(nums, n):\r\n  power_n = list(map(lambda x: x ** n, nums))\r\n  return power_n"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef power_list(nums,n):\r\n power_list = list(map(lambda x: x ** n, nums))\r\n return power_list \n\nQuestion:\r\nWrite a function to find the n-th power of individual elements in a list using lambda function.\r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\n\n \nAnswer:\n\n\n\n \r\ndef power_list(nums,n):\r\n    power_list = list(map(lambda x: x ** n, nums))\r\n    return power_list \n\n\n\n \n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0 \u00a0\u00a0\u00a0Question:\u00a0 Write a python function to find the minimum number of rotations required to get the same string.\u00a0 Task: Write a python function to solve the above question. No additional comments and docstrings are needed.\u00a0 Answer: def find_Rotations(str): tmp = str + str n = len(str) for i in range(1,n + 1): substring = tmp[i: i+n] if (str == substring): return i return n Question: Write a python function to check whether the two numbers differ at one bit position only or not. Task : Write a python function to solve the above question. No additional comments and docstrings are needed . Answer : def is_Power_Of_Two (x): return x and (not(x & (x - 1))) def differ _At _One _Bit _Pos (a ,b ): return is _Power _Of _Two (a ^ b ) Question : Write a python function to check whether two strings are anagrams or not . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def isAnagram (str1 , str2 ): if len (str1 ) != len (str2 ): return False else : s1 = sorted ([i for i in str1 ]) s2 = sorted ([i for i in str2 ]) if s1 == s2 : print (\"The strings are anagram of each other \") else : print (\"The strings aren't anagram of each other \") Question : Write a Python program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized . Task : Write a Python program that accepts sequence",
        "clean_code": "def power_list(nums,n):\r\n power_list = list(map(lambda x: x ** n, nums))\r\n return power_list \n\nQuestion:\r\nWrite a function to find the n-th power of individual elements in a list using lambda function.\r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\n\n \nAnswer:\n\n\n\n \r\ndef power_list(nums,n):\r\n    power_list = list(map(lambda x: x ** n, nums))\r\n    return power_list \n\n\n\n \n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0 \u00a0\u00a0\u00a0Question:\u00a0 Write a python function to find the minimum number of rotations required to get the same string.\u00a0 Task: Write a python function to solve the above question. No additional comments and docstrings are needed.\u00a0 Answer: def find_Rotations(str): tmp = str + str n = len(str) for i in range(1,n + 1): substring = tmp[i: i+n] if (str == substring): return i return n Question: Write a python function to check whether the two numbers differ at one bit position only or not. Task : Write a python function to solve the above question. No additional comments and docstrings are needed . Answer : def is_Power_Of_Two (x): return x and (not(x & (x - 1))) def differ _At _One _Bit _Pos (a ,b ): return is _Power _Of _Two (a ^ b ) Question : Write a python function to check whether two strings are anagrams or not . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def isAnagram (str1 , str2 ): if len (str1 ) != len (str2 ): return False else : s1 = sorted ([i for i in str1 ]) s2 = sorted ([i for i in str2 ]) if s1 == s2 : print (\"The strings are anagram of each other \") else : print (\"The strings aren't anagram of each other \") Question : Write a Python program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized . Task : Write a Python program that accepts sequence"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef power_num(nums,n):\r\n  power_num = list(map(lambda x: x ** n, nums))\r\n  return power_num\nQuestion:\nWrite a function to find the sum of the given series using recursion.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n    def seriesSum(n):\r\n      if n == 1:\r\n        return 1/3\r\n      else:\r\n        return seriesSum(n-1) + (1/(2*n+1))\n\n  Question:\rWrite a function to convert a string into a number using regular expression. The string can be in any format like 10M is ten million 10B is ten billion etc., (Refer sample inputs for more details) . If the string is not in correct format or if it\u2019s not a valid number then return -1 as output. Note that there will be no numbers with decimal point and all numbers are greater than 0. For example, 5K, 2M etc., are valid inputs but 5KM, 2GM etc., are invalid inputs. Also note that there will be no negative numbers as input and also no leading zeros in input numbers like 005B is invalid input but 5B is valid input. If there are more than one integer values separated by space then apply this regular expression for each integer value individually and add them finally and then print total value as output (refer sample test cases). For example if the input string is \u201c10M 12B\u201d then first apply this regular expression on 10M which gives 10000000 as output add it with 12B which gives 12000000 so final output should be 220000000 i.e 22 crore (refer sample test cases). This problem can be solved using re module functions like search(), findall() etc., The following table contains some of the commonly used re module functions along with their description \u2212 SNo\tFunction & Description 1\tsearch() Scan through string looking for a match to the pattern, returning a Match object, or None if no match was found. 2\tmatch() Match pattern to beginning of string returning Match object or None 3\tfindall() Find all substrings where RE matches, returning them as a list 3\tfinditer() Find all substrings where RE matches returning them as an iterator 4\tsplit() Split string by occurrence of pattern",
        "clean_code": "def power_num(nums,n):\r\n  power_num = list(map(lambda x: x ** n, nums))\r\n  return power_num\nQuestion:\nWrite a function to find the sum of the given series using recursion.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n    def seriesSum(n):\r\n      if n == 1:\r\n        return 1/3\r\n      else:\r\n        return seriesSum(n-1) + (1/(2*n+1))\n\n  Question:\rWrite a function to convert a string into a number using regular expression. The string can be in any format like 10M is ten million 10B is ten billion etc., (Refer sample inputs for more details) . If the string is not in correct format or if it\u2019s not a valid number then return -1 as output. Note that there will be no numbers with decimal point and all numbers are greater than 0. For example, 5K, 2M etc., are valid inputs but 5KM, 2GM etc., are invalid inputs. Also note that there will be no negative numbers as input and also no leading zeros in input numbers like 005B is invalid input but 5B is valid input. If there are more than one integer values separated by space then apply this regular expression for each integer value individually and add them finally and then print total value as output (refer sample test cases). For example if the input string is \u201c10M 12B\u201d then first apply this regular expression on 10M which gives 10000000 as output add it with 12B which gives 12000000 so final output should be 220000000 i.e 22 crore (refer sample test cases). This problem can be solved using re module functions like search(), findall() etc., The following table contains some of the commonly used re module functions along with their description \u2212 SNo\tFunction & Description 1\tsearch() Scan through string looking for a match to the pattern, returning a Match object, or None if no match was found. 2\tmatch() Match pattern to beginning of string returning Match object or None 3\tfindall() Find all substrings where RE matches, returning them as a list 3\tfinditer() Find all substrings where RE matches returning them as an iterator 4\tsplit() Split string by occurrence of pattern"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef power_n(nums,n):\r\n  power = list(map(lambda x: x ** n, nums))\r\n  return power\n\n\nQuestion:\nWrite a function to find the maximum number of consecutive 1\u2019s in this array.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef max_ones(num):\r\n  count = 0\r\n  result = 0\r\n  for i in range(len(num)):\r\n    if (num[i] == 1):\r\n\n      count=count + 1;   result = max(result, count);   else :    count = 0;   return result;\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find the maximum number of consecutive 1\u2019s in this array. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_ones(num): count = 0 result = 0 for i in range(len(num)): if (num[i] == 1): count=count + 1; result = max(result, count); else : count = 0; return result;",
        "clean_code": "def power_n(nums,n):\r\n  power = list(map(lambda x: x ** n, nums))\r\n  return power\n\n\nQuestion:\nWrite a function to find the maximum number of consecutive 1\u2019s in this array.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef max_ones(num):\r\n  count = 0\r\n  result = 0\r\n  for i in range(len(num)):\r\n    if (num[i] == 1):\r\n\n      count=count + 1;   result = max(result, count);   else :    count = 0;   return result;\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find the maximum number of consecutive 1\u2019s in this array. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_ones(num): count = 0 result = 0 for i in range(len(num)): if (num[i] == 1): count=count + 1; result = max(result, count); else : count = 0; return result;"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef power_nums(nums,n):\r\n power_nums = list(map(lambda x: x ** n, nums))\r\n return power_nums\n\nQuestion:\nWrite a python function to generate all permutations of a list in Python. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n  Answer:\r\n\n  from itertools import permutations\r\n\n  def permutation(lst):  \r\n    perms = permutations(lst)  \r\n    for i in list(perms):  \r\n      print(''.join(i))  \n\n     Question: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]]",
        "clean_code": "def power_nums(nums,n):\r\n power_nums = list(map(lambda x: x ** n, nums))\r\n return power_nums\n\nQuestion:\nWrite a python function to generate all permutations of a list in Python. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n  Answer:\r\n\n  from itertools import permutations\r\n\n  def permutation(lst):  \r\n    perms = permutations(lst)  \r\n    for i in list(perms):  \r\n      print(''.join(i))  \n\n     Question: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]]"
    }
}