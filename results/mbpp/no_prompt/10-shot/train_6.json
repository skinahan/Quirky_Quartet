{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 1,
        "codex_out": "\nimport re\r\ndef search_pattern(text, pattern): \r\n    if re.search(pattern,  text): \r\n        return \"Pattern found:\"+str(re.search(pattern, text).start())+\"-\"+str(re.search(pattern, text).end())\r\n    else: \r\n        return(\"Pattern not found\")\n\n \nQuestion:\nWrite a python function to find the second most repeated word in a given string and also find its count by using regex. If there is no second most repeated word then return -1. Ignore the case sensitivity of words and also ignore the special characters in words. For example: Input : \"This is sample input for this question This is another sample input for this question.\" Output : \"this\" 2 Note: In above example \u201cthis\u201d is the second most repeated word and it occurs two times in the given string and hence output is \u201cthis\u201d 2 Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: import re def sec_most_rep_word (text): result = {} words = (re.findall(r'\\w+', text)) for word in words: if word not in result: result[word] = 1 else: result[word] += 1 sorted_words = sorted((value, key) for (key,value) in result.items()) if len(sorted_words) > 1 : return sorted_words[-2] else : return -1 Question: Write a function to get all possible unique subsets from a set of distinct integers such that all elements are greater than equal to zero by using recursion or iteration method without using any built-in functions Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer from itertools import combinations def subsetUtil (arr, n, sumVal): res=0 if sumVal == 0 : res=res + 1 i=0 while i < n : res += subsetUtil (arr , n , sumVal - arr [i]) i+=1 return res def subSetSum (arr , n , sumVal): arr=list(combinations([i for i in range(-1000,-1)] + arr + [i for i in range(-1000,-1)],n)) subSetSum = 0; res = [] for subset in arr",
        "clean_code": "import re\r\ndef search_pattern(text, pattern): \r\n    if re.search(pattern,  text): \r\n        return \"Pattern found:\"+str(re.search(pattern, text).start())+\"-\"+str(re.search(pattern, text).end())\r\n    else: \r\n        return(\"Pattern not found\")"
    },
    "1": {
        "status": 1,
        "codex_out": "\nimport re\r\ndef match_pattern(text, pattern):\r\n  if re.search(pattern, text):\r\n    return ('Found a match!')\r\n  else:\r\n    return('Not matched!')\n\n  Question:\r\nWrite a function to sort the words in descending order by length. If two words have the same length sort them alphabetically. Use lambda function to solve it.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def word_length(words):\r\n\n    return sorted(words, key=lambda x:(len(x),x))[::-1]",
        "clean_code": "import re\r\ndef match_pattern(text, pattern):\r\n  if re.search(pattern, text):\r\n    return ('Found a match!')\r\n  else:\r\n    return('Not matched!')"
    },
    "2": {
        "status": 1,
        "codex_out": "\nimport re\r\ndef search_pattern(text, pattern):\r\n  result = re.search(pattern, text)\r\n  return result.start() if result else -1\n\n\n\n\n\n\n\n\n\n\n \nQuestion:\nWrite a function to find the maximum number of elements that can be removed from the given list so that the sum of remaining elements is even. The order of removal does not matter. For example, if input is [5, 7, 9], then 5 and 9 can be removed so that output becomes 7. If input is [5, 7, 9, 11], then 5 and 11 can be removed so that output becomes 9 + 7 = 16.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.   Answer:   def max_removed(nums):   sum1=0    for i in nums:    sum1+=i     if (sum1%2!=0):      return 0     else:      return 1      Question: Write a python function to check whether three given numbers can form the sides of a triangle or not by using regex. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: import re def check_triangle(a,b ,c): s = str(a)+str(b)+str(c) p = r'(\\d)\\1{2}' m = re .findall (p , s ) return len (m) == 0 Question : Write a function to find all permutations of characters in string by using itertools module in Python Task : Write a python function to solve the above question . No additional comments and docstrings are needed . import itertools def permute_string ( str ): perms = [ '' ] for c in str : new_perms = [] for perm in perms : for i in range ( len (perm ) + 1 ): new_perms .append (perm [ :i ] + c + perm [ i : ]) perms = new_perms print sorted ([ ''.join (p) for p in perms ]) Question : Write a function to get all possible subsets from a set of distinct integers by using recursion Task : Write a python function to solve the above question . No additional comments and docstrings are needed . def subsetsum (array , num ): if num == 0 or num",
        "clean_code": "import re\r\ndef search_pattern(text, pattern):\r\n  result = re.search(pattern, text)\r\n  return result.start() if result else -1"
    },
    "3": {
        "status": 2,
        "codex_out": "\nimport re\r\ndef search_pattern(text, pattern):\r\n  match = re.search(pattern, text)\r\n  if match:\r\n    return (match.start(), match.end())\r\n  else:\r\n    return None\n\n\n\n  Question:\nWrite a function to find the number of days between two dates. The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\nTask: Write a python function to solve the above question. No additional comments and docstrings are needed.\n\n Answer: def num_days(date1, date2): \r\n\tfrom datetime import date \r\n\tday1 = date(*map(int, date1.split('-')))  \r\n\tday2 = date(*map(int, date2.split('-')))  \r\n\treturn (day2 - day1).days + 1\n\n Question: Write a python function to count the number of matching characters in a pair of string by using regex . Task: Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def count_matches (string , substring ): pattern = r'[^%s]' % substring matches = re . findall ( pattern , string ) return ( len ( string ) - len ( matches )) Question : Write a python function to remove all consecutive duplicates from the given string by using regex . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def remove_duplicates (string ): pattern = r'(\\w)\\1+' result = re . sub ( pattern , r\"\\1\" , string ) return result Question : Given two lists A and B with equal lengths , write a Python program using list comprehension and zip () method which returns True if each element in B is square of corresponding element in A or False otherwise Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def check_square_elements(listA, listB): result= [x**2 == y for x,y in zip(listA, listB)] return all(result)",
        "clean_code": "import re\r\ndef search_pattern(text, pattern):\r\n  match = re.search(pattern, text)\r\n  if match:\r\n    return (match.start(), match.end())\r\n  else:\r\n    return None\n\n\n\n  Question:\nWrite a function to find the number of days between two dates. The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\nTask: Write a python function to solve the above question. No additional comments and docstrings are needed.\n\n Answer: def num_days(date1, date2): \r\n\tfrom datetime import date \r\n\tday1 = date(*map(int, date1.split('-')))  \r\n\tday2 = date(*map(int, date2.split('-')))  \r\n\treturn (day2 - day1).days + 1\n\n Question: Write a python function to count the number of matching characters in a pair of string by using regex . Task: Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def count_matches (string , substring ): pattern = r'[^%s]' % substring matches = re . findall ( pattern , string ) return ( len ( string ) - len ( matches )) Question : Write a python function to remove all consecutive duplicates from the given string by using regex . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def remove_duplicates (string ): pattern = r'(\\w)\\1+' result = re . sub ( pattern , r\"\\1\" , string ) return result Question : Given two lists A and B with equal lengths , write a Python program using list comprehension and zip () method which returns True if each element in B is square of corresponding element in A or False otherwise Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def check_square_elements(listA, listB): result= [x**2 == y for x,y in zip(listA, listB)] return all(result)"
    },
    "4": {
        "status": 2,
        "codex_out": "\nimport re\r\ndef search_pattern(text, pattern):\r\n  match = re.search(pattern, text)\r\n  if match:\r\n    print ('Found \"%s\" in \"%s\" from %d to %d '% (match.re.pattern, match.string, match.start(), match.end()))\r\n  else:\r\n    print ('Not Found \"%s\" in \"%s\"'% (pattern, text))\n\n  return None\n\n  Question: Write a function to find the longest common prefix string amongst an array of strings using binary search algorithm. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def commonPrefixUtil(str1, str2): m = len(str1) n = len(str2) result = \"\" j = 0 i = 0 while (i <= m - 1 and j <= n - 1): if (str1[i] != str2[j]): break result += (str1[i]) i += 1 j += 1 return (result) def commonPrefix(arr, n): arr .sort() prefix = commonPrefixUtil(arr[0], arr[n - 1]) return prefix\n\n Question: Write a function to check whether a given number is palindrome or not using recursion method Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer: def isPalRec(st, s, e): if (s == e): return True if (st[s] != st[e]): return False if s < e + 1 : return isPalRec(st, s + 1 , e - 1 ) def isPalindrome(st) : n = len(st) return isPalRec(st , 0 , n - 1 )\n\n Question:Write a function to find the length of longest increasing subsequence in an array using dynamic programming approach Task :Write a python function to solve the above question .No additional comments and docstrings are needed Answer :def lis_dp_approach(): pass\n\n Question :Write a function that accepts two parameters N and K and returns the value of Binomial Coefficient C_{N}_{K} Task :Write a python function to solve the above question .No additional comments and docstrings are needed Answer :def binomialCoeff(): pass\n\n Question :Given an",
        "clean_code": "import re\r\ndef search_pattern(text, pattern):\r\n  match = re.search(pattern, text)\r\n  if match:\r\n    print ('Found \"%s\" in \"%s\" from %d to %d '% (match.re.pattern, match.string, match.start(), match.end()))\r\n  else:\r\n    print ('Not Found \"%s\" in \"%s\"'% (pattern, text))\n\n  return None\n\n  Question: Write a function to find the longest common prefix string amongst an array of strings using binary search algorithm. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def commonPrefixUtil(str1, str2): m = len(str1) n = len(str2) result = \"\" j = 0 i = 0 while (i <= m - 1 and j <= n - 1): if (str1[i] != str2[j]): break result += (str1[i]) i += 1 j += 1 return (result) def commonPrefix(arr, n): arr .sort() prefix = commonPrefixUtil(arr[0], arr[n - 1]) return prefix\n\n Question: Write a function to check whether a given number is palindrome or not using recursion method Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer: def isPalRec(st, s, e): if (s == e): return True if (st[s] != st[e]): return False if s < e + 1 : return isPalRec(st, s + 1 , e - 1 ) def isPalindrome(st) : n = len(st) return isPalRec(st , 0 , n - 1 )\n\n Question:Write a function to find the length of longest increasing subsequence in an array using dynamic programming approach Task :Write a python function to solve the above question .No additional comments and docstrings are needed Answer :def lis_dp_approach(): pass\n\n Question :Write a function that accepts two parameters N and K and returns the value of Binomial Coefficient C_{N}_{K} Task :Write a python function to solve the above question .No additional comments and docstrings are needed Answer :def binomialCoeff(): pass\n\n Question :Given an"
    }
}