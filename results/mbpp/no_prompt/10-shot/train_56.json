{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a python function to find the first digit in factorial of a given number.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 1,
        "codex_out": "\nfrom math import factorial\r\ndef first_digit(n):\r\n  return int(str(factorial(n))[0])\n\nQuestion:\nWrite a function to find the maximum sum path in a 2-D matrix from top to bottom. The path can start from any element in the first row and end at any element in the last row. The elements can be moved either right or down. You can assume that all elements are distinct and are greater than 0. Return the maximum sum of all paths through the matrix. If there is no path, return 0. \nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer: def max_sum_path(matrix): \r\n    if not matrix: \r\n        return 0 \r\n    result, temp = [], []  \r\n    findPaths(matrix, len(matrix) - 1, len(matrix[0]) - 1, temp, result) \r\n\n    max_sum = 0  \r\n\n    for i in range (len (result)):  \r\n\n        # Find the sum of current path  \r\n        curr_sum = 0       # Initialize curr_sum as 0 for every new path  \r\n\n        for j in range (len (result[i])):   # Traverse through every element of current path and add them to curr_sum variable  \r\n\n            curr_sum += result[i][j]     # Add value at current index of current path to curr_sum variable  \t\t\t\t\t\t\t#print (\"curr \",curr)         # Print current sum         print (\"max \",max)           # Print maximum sum     print()             # Print new line     return max                   # Return maximum sum      def findPaths (matrix, m, n , temp , result):       if m < 0 or n < 0 :           return         if m == 0 and n == 0 :           temp += [matrix[m][n]]           result += [temp]           return          elif m == 0 :             findPaths (matrix , m , n - 1 , temp + [matrix[m][n]] , result )          elif n == 0 :             findPaths (matrix , m - 1 , n , temp + [matrix[m",
        "clean_code": "from math import factorial\r\ndef first_digit(n):\r\n  return int(str(factorial(n))[0])"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef first_digit_factorial(n):\r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact=fact*i\r\n    return int(str(fact)[0])\n\n \nQuestion:\nWrite a function to find the sum of all numbers present in a string. \r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n   Answer:   def add_num(s): \r\n       return sum([int(c) for c in s if c.isdigit()])\n\n  Question:   Write a python function to check whether two given strings are anagram or not.   Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def is_anagram(str1, str2): if (sorted(str1) == sorted(str2)): return True else : return False Question: Write a python program to find the longest common sub-string from two given strings using dynamic programming technique. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def lcsubstring(X , Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for i in range((m + 1))] longest = 0 for i in range((m + 1)) : for j in range((n + 1)) : if (i == 0 or j == 0) : L[i][j] = 0 elif (X[i - 1] == Y[j - 1]) : L[i][j] = L[i - 1][j - 1] + 1 if (L[i][j] > longest) : longest = L[i][j] indexx = i indexy = j else : L[i][j] = 0 # if true then no common substring exists if (longest == 0) : print(\"no common substring\") exit() resultStr=\"\" # create shortest super-sequence while (L[indexx][indexy] > 0): resultStr += X[indexx - 1]; indexx -= 1; indexy -= 1; # reverse shortest super-sequence string resultStr=resultStr[::-1]; return resultStr",
        "clean_code": "def first_digit_factorial(n):\r\n    fact=1\r\n    for i in range(1,n+1):\r\n        fact=fact*i\r\n    return int(str(fact)[0])\n\n \nQuestion:\nWrite a function to find the sum of all numbers present in a string. \r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n   Answer:   def add_num(s): \r\n       return sum([int(c) for c in s if c.isdigit()])\n\n  Question:   Write a python function to check whether two given strings are anagram or not.   Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def is_anagram(str1, str2): if (sorted(str1) == sorted(str2)): return True else : return False Question: Write a python program to find the longest common sub-string from two given strings using dynamic programming technique. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def lcsubstring(X , Y): m = len(X) n = len(Y) L = [[0] * (n + 1) for i in range((m + 1))] longest = 0 for i in range((m + 1)) : for j in range((n + 1)) : if (i == 0 or j == 0) : L[i][j] = 0 elif (X[i - 1] == Y[j - 1]) : L[i][j] = L[i - 1][j - 1] + 1 if (L[i][j] > longest) : longest = L[i][j] indexx = i indexy = j else : L[i][j] = 0 # if true then no common substring exists if (longest == 0) : print(\"no common substring\") exit() resultStr=\"\" # create shortest super-sequence while (L[indexx][indexy] > 0): resultStr += X[indexx - 1]; indexx -= 1; indexy -= 1; # reverse shortest super-sequence string resultStr=resultStr[::-1]; return resultStr"
    },
    "2": {
        "status": 2,
        "codex_out": "\nimport math\r\ndef first_digit(n):\r\n  fact = math.factorial(n)\r\n  while (fact >= 10):\r\n    fact = fact / 10; \r\n  return int(fact) % 10\n\n \nQuestion:\nWrite a python function to find the number of occurrences of each word in a given sentence. Use lambda and reduce functions. Also, create a list of all words that have more than 3 characters. Use filter function. Also, write a function to find the number of palindromes in the list using reduce function. Lambda and reduce functions are imported from functools module. No additional comments and docstrings are needed.\n\n\nTask: Write a python function to solve the above question. No additional comments and docstrings are needed..\n\n\n\n\n\n\n\n\n\n  Answer:from functools import reduce,lambda_functions as lm def count_occurrences(text): words=text.split() word_counts={} for word in words: if word not in word_counts:word_counts[word]=0word_counts[word]+=1 return sorted(list(set([k for k,v in word_counts .items()if v>=2])))def length3words(text): words=text .split() return list((filter (lambda x : len (x)>3,words))) def palindrome(lis): res =reduce((lambda x , y :x + y),lis) return res**2",
        "clean_code": "import math\r\ndef first_digit(n):\r\n  fact = math.factorial(n)\r\n  while (fact >= 10):\r\n    fact = fact / 10; \r\n  return int(fact) % 10\n\n \nQuestion:\nWrite a python function to find the number of occurrences of each word in a given sentence. Use lambda and reduce functions. Also, create a list of all words that have more than 3 characters. Use filter function. Also, write a function to find the number of palindromes in the list using reduce function. Lambda and reduce functions are imported from functools module. No additional comments and docstrings are needed.\n\n\nTask: Write a python function to solve the above question. No additional comments and docstrings are needed..\n\n\n\n\n\n\n\n\n\n  Answer:from functools import reduce,lambda_functions as lm def count_occurrences(text): words=text.split() word_counts={} for word in words: if word not in word_counts:word_counts[word]=0word_counts[word]+=1 return sorted(list(set([k for k,v in word_counts .items()if v>=2])))def length3words(text): words=text .split() return list((filter (lambda x : len (x)>3,words))) def palindrome(lis): res =reduce((lambda x , y :x + y),lis) return res**2"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef first_factorial_digit(n):\r\n  fact = 1\r\n  for i in range(1,n+1):\r\n    fact = fact*i\r\n  return int(str(fact)[0])\n\n\nQuestion:\nWrite a python function to find the sum of all the elements in a list using recursion.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\n\n def sum_list(list1):\r\n    if len(list1) == 1:\r\n        return list1[0]\r\n    else:\r\n        return list1[0] + sum_list(list1[1:])\n\n  print(\"Sum of all elements in given list is : \",end=\"\") \r\n\n Question: Write a python function to find the reverse of a given number using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def reverse_num (num): if num > 0 : remainder = num %10 reverse = (reverse *10) + remainder num = num //10 return reverse print(\"Reverse of entered number is\",reverse()) Question: Write a python function to check whether two strings are anagrams or not using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def checkAnagrams (str1, str2): n1 = len(str1) n2 = len(str2) if n1 != n2 : return 0 str3 = sorted (str2) for i in range (0, n - 1): if str3[i] != sorted [i]: return 0 else : return 1 Question : Write a python program to remove all whitespaces from string using regex module Task : Write a python program to solve the above question . No additional comments and docstrings are needed . Answer : import re text=input('Enter sentence') text=re . sub ('\\s+', '',text ) print('Sentence without spaces:' ,text ) Question : Given one dictionary which contains Employee entity as keys and his/her manager as values . Create hierarchy tree for this dictionary by generating nested dictionary with levels till root node Task : Write Python code which takes input as one dictionary with employee name as key and manager name as value , generate nested dictionary with",
        "clean_code": "def first_factorial_digit(n):\r\n  fact = 1\r\n  for i in range(1,n+1):\r\n    fact = fact*i\r\n  return int(str(fact)[0])\n\n\nQuestion:\nWrite a python function to find the sum of all the elements in a list using recursion.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\n\n def sum_list(list1):\r\n    if len(list1) == 1:\r\n        return list1[0]\r\n    else:\r\n        return list1[0] + sum_list(list1[1:])\n\n  print(\"Sum of all elements in given list is : \",end=\"\") \r\n\n Question: Write a python function to find the reverse of a given number using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def reverse_num (num): if num > 0 : remainder = num %10 reverse = (reverse *10) + remainder num = num //10 return reverse print(\"Reverse of entered number is\",reverse()) Question: Write a python function to check whether two strings are anagrams or not using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def checkAnagrams (str1, str2): n1 = len(str1) n2 = len(str2) if n1 != n2 : return 0 str3 = sorted (str2) for i in range (0, n - 1): if str3[i] != sorted [i]: return 0 else : return 1 Question : Write a python program to remove all whitespaces from string using regex module Task : Write a python program to solve the above question . No additional comments and docstrings are needed . Answer : import re text=input('Enter sentence') text=re . sub ('\\s+', '',text ) print('Sentence without spaces:' ,text ) Question : Given one dictionary which contains Employee entity as keys and his/her manager as values . Create hierarchy tree for this dictionary by generating nested dictionary with levels till root node Task : Write Python code which takes input as one dictionary with employee name as key and manager name as value , generate nested dictionary with"
    },
    "4": {
        "status": 1,
        "codex_out": "\ndef factorial_firstdigit(n):\r\n    res = 1\r\n    for i in range(1, n + 1): \r\n        res = res * i \r\n    while (res > 0): \r\n        digit = res % 10; \r\n        return digit \r\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Write a python function to find the largest integers from a given list of numbers using heap queue algorithm. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: import heapq as hq def heap_queue_largest(nums,n): largest_nums = hq.nlargest(n, nums) return largest_nums",
        "clean_code": "def factorial_firstdigit(n):\r\n    res = 1\r\n    for i in range(1, n + 1): \r\n        res = res * i \r\n    while (res > 0): \r\n        digit = res % 10; \r\n        return digit"
    }
}