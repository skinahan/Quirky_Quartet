{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\ndef max_sum(a): \r\n\tn = len(a) \r\n\tif (n >= 3): \r\n\t\tincl = a[0] + a[2] \r\n\telse: \r\n\t\treturn 0\r\n\texcl = 0\r\n\tfor i in range(3, n): \r\n   excl_new = max(incl, excl) \r\n   incl = excl + a[i] \r\n   excl = excl_new \r\n    return max(excl, incl)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   */",
        "clean_code": "def max_sum(a): \r\n\tn = len(a) \r\n\tif (n >= 3): \r\n\t\tincl = a[0] + a[2] \r\n\telse: \r\n\t\treturn 0\r\n\texcl = 0\r\n\tfor i in range(3, n): \r\n   excl_new = max(incl, excl) \r\n   incl = excl + a[i] \r\n   excl = excl_new \r\n    return max(excl, incl)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n   */"
    },
    "1": {
        "status": 1,
        "codex_out": "\ndef max_sum(arr, n): \r\n    if (n >= 3): \r\n        incl = arr[n - 1] + max_sum(arr, n - 2) \r\n        excl = max_sum(arr, n - 1) \r\n        return max(incl, excl) \r\n    if (n == 2): \r\n        return arr[0] + arr[1]  \r\n    return arr[0]  \ndef findMaxSum(arr, n):  \r\n    return max_sum(arr, n)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#Question: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2 ] return A [n ] Count number of ways to fill a \u201c3 x N\u201d board using dominoes of size \u201c2 x 1\u201d | Set-2 Question: Write a python function to check whether the two numbers differ at one bit position only or not. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def is_Power _Of _Two (x ): return x and (not(x & (x \u20131))) def differ _At _One _Bit _Pos(a ,b ): return is_Power _Of _Two(a ^ b ) Question: Write a function to find all words which are at least 4 characters long in a string by using regex . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def find char long (text ): return (re .findall (\"\\b\\w{4 ,}\\b\" , text )) Question : Write a function to",
        "clean_code": "def max_sum(arr, n): \r\n    if (n >= 3): \r\n        incl = arr[n - 1] + max_sum(arr, n - 2) \r\n        excl = max_sum(arr, n - 1) \r\n        return max(incl, excl) \r\n    if (n == 2): \r\n        return arr[0] + arr[1]  \r\n    return arr[0]  \ndef findMaxSum(arr, n):  \r\n    return max_sum(arr, n)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#Question: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_ways(n): A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2 ] return A [n ] Count number of ways to fill a \u201c3 x N\u201d board using dominoes of size \u201c2 x 1\u201d | Set-2 Question: Write a python function to check whether the two numbers differ at one bit position only or not. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def is_Power _Of _Two (x ): return x and (not(x & (x \u20131))) def differ _At _One _Bit _Pos(a ,b ): return is_Power _Of _Two(a ^ b ) Question: Write a function to find all words which are at least 4 characters long in a string by using regex . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import re def find char long (text ): return (re .findall (\"\\b\\w{4 ,}\\b\" , text )) Question : Write a function to"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef max_sum(arr, n): \r\n\tif (n >= 3): \r\n\t\treturn max(max_sum(arr, n - 2), \r\n\t\t\tmax_sum(arr, n - 3) + arr[n - 1]) \r\n\tif (n == 2): \r\n\t\treturn arr[0] + arr[1] \r\n\treturn arr[0] if (n == 1) else 0\n\n \nQuestion:\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_sum(arr, n): if (n >= 3): return max(max_sum(arr, n - 2), max_sum(arr, n - 3) + arr[n - 1]) if (n == 2): return arr[0] + arr[1] return arr[0] if (n == 1) else 0\n\n \nQuestion: Write a python function to find the longest common sub-string from two given strings. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def lcsubstr(): str1 = input(\"Enter first string : \") str2 = input(\"Enter second string : \") m = len(str1) n = len(str2) counter = [[0]*(n+1)]*(m+1) longest = 0 for i in range(m): for j in range(n): if str1[i] == str2 [j]: c = counter [i][j]+1 counter [i+1][j+1]=c if c >longest : longest=c lcs_set=set() for i in range (m+1 ): for j in range (n+1 ): if counter [i][j ]==longest : lcs_set .add((i-longest , j-longest )) result=\"\" for x ,y in lcs _set : result=result .join([str2 [y ]for y in range (y , y+longest )]) print (\"The Longest Common Substring is \" + result )\n\n Question: Write a python function to find the longest common sub-string from two given strings. Task",
        "clean_code": "def max_sum(arr, n): \r\n\tif (n >= 3): \r\n\t\treturn max(max_sum(arr, n - 2), \r\n\t\t\tmax_sum(arr, n - 3) + arr[n - 1]) \r\n\tif (n == 2): \r\n\t\treturn arr[0] + arr[1] \r\n\treturn arr[0] if (n == 1) else 0\n\n \nQuestion:\nWrite a function to find the maximum sum that can be formed which has no three consecutive elements present. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_sum(arr, n): if (n >= 3): return max(max_sum(arr, n - 2), max_sum(arr, n - 3) + arr[n - 1]) if (n == 2): return arr[0] + arr[1] return arr[0] if (n == 1) else 0\n\n \nQuestion: Write a python function to find the longest common sub-string from two given strings. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def lcsubstr(): str1 = input(\"Enter first string : \") str2 = input(\"Enter second string : \") m = len(str1) n = len(str2) counter = [[0]*(n+1)]*(m+1) longest = 0 for i in range(m): for j in range(n): if str1[i] == str2 [j]: c = counter [i][j]+1 counter [i+1][j+1]=c if c >longest : longest=c lcs_set=set() for i in range (m+1 ): for j in range (n+1 ): if counter [i][j ]==longest : lcs_set .add((i-longest , j-longest )) result=\"\" for x ,y in lcs _set : result=result .join([str2 [y ]for y in range (y , y+longest )]) print (\"The Longest Common Substring is \" + result )\n\n Question: Write a python function to find the longest common sub-string from two given strings. Task"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef max_sum(arr): \r\n\tn = len(arr) \r\n\tif (n >= 3): \r\n\t\tincl = arr[0] + arr[2] \r\n\telse: \r\n\t\treturn 0; \r\n    if (n > 3):  \r\n        excl = arr[1]  \r\n    else:  \r\n        excl = 0;  \r\n\n    for i in range(3, n):  \r\n        new_excl = incl if incl > excl else excl;  \r\n        incl = excl + arr[i];  \r\n        excl = new_excl;  \r\n\n    return (excl if excl > incl else incl); \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  */",
        "clean_code": "def max_sum(arr): \r\n\tn = len(arr) \r\n\tif (n >= 3): \r\n\t\tincl = arr[0] + arr[2] \r\n\telse: \r\n\t\treturn 0; \r\n    if (n > 3):  \r\n        excl = arr[1]  \r\n    else:  \r\n        excl = 0;  \r\n\n    for i in range(3, n):  \r\n        new_excl = incl if incl > excl else excl;  \r\n        incl = excl + arr[i];  \r\n        excl = new_excl;  \r\n\n    return (excl if excl > incl else incl); \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  */"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef max_sum(arr): \r\n\tn = len(arr) \r\n\tif n < 3: \r\n\t\treturn sum(arr[0:n]) \r\n\telse: \r\n\t\tfirst, second, third = arr[0], arr[1], arr[2] \r\n\tfor i in range(3, n): \r\n\t    first, second, third = max(second, first + arr[i - 1]), max(third, second + arr[i]), third + arr[i]  \r\n    return max(first, second)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     */",
        "clean_code": "def max_sum(arr): \r\n\tn = len(arr) \r\n\tif n < 3: \r\n\t\treturn sum(arr[0:n]) \r\n\telse: \r\n\t\tfirst, second, third = arr[0], arr[1], arr[2] \r\n\tfor i in range(3, n): \r\n\t    first, second, third = max(second, first + arr[i - 1]), max(third, second + arr[i]), third + arr[i]  \r\n    return max(first, second)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n     */"
    }
}