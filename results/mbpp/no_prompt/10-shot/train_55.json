{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a python function to find the minimum sum of absolute differences of two arrays.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 1,
        "codex_out": "\ndef min_abs_diff(arr1,arr2):\r\n  arr1.sort()\r\n  arr2.sort()\r\n  n=len(arr1)\r\n  min_diff=abs(arr1[0]-arr2[0])\r\n  for i in range(n):\r\n    if abs(arr1[i]-arr2[i])<min_diff:\r\n      min_diff=abs(arr1[i]-arr2[i])\r\n  return min_diff\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \nQuestion:Write a python function to find the second largest number from a given list of numbers.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:def second_largest (list): list = set([x for x in list if x!=' ']) list = sorted (list,reverse=True) return list [ 1 ] Question:Write a python function to find the sum of elements in a given array except the diagonal elements and display it as an array.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:import numpy as np def sum_diagonal (nums): return np . trace (np . matrix (nums)) Question:Write a function to reverse words in string using regexpression without using any built-in functions or slicing operations and no imports also.(Hint : use split(), join())Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:import re def reverseWords (text): pattern = re . compile ('\\s+') text = re . sub (pattern,' ',text) text = text [:: - 1] text = re . sub (pattern,' ',text) text = text [:: - 1] return text Question:Given two integers A & B, write Python functions that returns True if A is divisible by B else False without using modulo operator (%)Task:Write a python function to solve the above question. No additional comments and docstrings are neededAnswer:(A%B==0)*True Question:(Optional) Write an efficient program for printing k largest elements in an array of size n where 0 < k < n-1 Task : Write an efficient program for printing k largest elements in an array of size n where 0 < k < n-",
        "clean_code": "def min_abs_diff(arr1,arr2):\r\n  arr1.sort()\r\n  arr2.sort()\r\n  n=len(arr1)\r\n  min_diff=abs(arr1[0]-arr2[0])\r\n  for i in range(n):\r\n    if abs(arr1[i]-arr2[i])<min_diff:\r\n      min_diff=abs(arr1[i]-arr2[i])\r\n  return min_diff"
    },
    "1": {
        "status": 1,
        "codex_out": "\ndef min_sum(arr1, arr2):\r\n  arr1.sort() \r\n  arr2.sort() \r\n  res = 0;  \r\n  for i in range(0, len(arr1)):  \r\n    res = res + (abs(arr1[i] - arr2[i]))  \r\n  return res\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nQuestion: Write a function to find the sum of all elements of an array. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def sum_array(nums): sum_nums = sum(nums) return sum_nums Question: Write a function to find the product of all elements of an array. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def product_array(nums): prod = 1 for i in nums: prod *= i return prod Question: Write a python function to check whether two lists have any common elements or not without using built-in functions such as intersection(). Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def common_elements(list1, list2): result = False for x in list1 : for y in list2 : if x == y : result = True return result Question: Write a python function which accepts two strings as input and returns True if they contain same characters but with different order otherwise returns False by using collections module only without using any built-in functions or methods such as sort(), count(), index(), etc., Task: Write a python function to solve the above question with no additional comments and docstrings required on top of your code snippet while submitting your answer on edX platform only after importing collections module only without using any built-in functions or methods such as sort(), count(), index(), etc., Answer import collections def is_permutation (str1, str2) : dict1 = collections . Counter (str1) dict2 = collections . Counter (str2) if dict1 == dict2 : return True else : return False Question: Given three numbers n, k and s where n is number of digits in input number , k is number of digits allowed to swap out and s is desired sum , write a Python program that prints out all possible combinations that can",
        "clean_code": "def min_sum(arr1, arr2):\r\n  arr1.sort() \r\n  arr2.sort() \r\n  res = 0;  \r\n  for i in range(0, len(arr1)):  \r\n    res = res + (abs(arr1[i] - arr2[i]))  \r\n  return res"
    },
    "2": {
        "status": 1,
        "codex_out": "\ndef min_sum(a,b):\r\n  a.sort()\r\n  b.sort()\r\n  min_sum = 0\r\n  for i in range(len(a)):\r\n    min_sum += abs(a[i] - b[i])\r\n  return min_sum\n\n\nQuestion:\nWrite a function to find the maximum sum of absolute differences of two arrays. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_difference(arr1, arr2): max1 = -float('inf') for i in range(len(arr1)): diff = abs((arr1[i] - arr2[i])) if diff > max1: max1 = diff return max1 Question: Write a function to find the minimum possible difference between any two elements from the given array of integers using dynamic programming approach. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def minimumDifferenceSubsetSumDP(array, n): # Sort array in ascending order array.sort() # Initialize result (Minimum possible difference) res = float(\"inf\") # Find sum of all elements sumOfArrayElements = 0 for i in range (0, n): sumOfArrayElements += array[i] # SubsetSum is subset with difference equal to half of total sum SubsetSum = (int)(sumOfArrayElements / 2) # Create an array that will store solution to already computed subproblems subsetSumTable = [ [False for j in range (SubsetSum + 1)] for i in range (n + 1)] # Initialize first column as true for first row as 0 can always be achieved with all elements subsetSumTable[0][0] = True; # Fill rest of the entries in table using recursive relation i is row number and j is column number i and j start from 1 because table was initialized by 0th row and 0th column as true for i in range (1, n + 1): for j in range (1, SubsetSum + 1): if j < array[i-1]: subsetSumTable[i][j] == subsetSumTable[i-1][j]; else : if subsetSumTable [i-1][j] == True : subsetSumTable [i][j]= True else :",
        "clean_code": "def min_sum(a,b):\r\n  a.sort()\r\n  b.sort()\r\n  min_sum = 0\r\n  for i in range(len(a)):\r\n    min_sum += abs(a[i] - b[i])\r\n  return min_sum"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef min_sum_diff(arr1, arr2): \r\n    n = len(arr1)  \r\n    m = len(arr2)  \r\n    if (n != m): \r\n        return -1  \r\n    arr1.sort()  \r\n    arr2.sort() \r\n    res = 0; \r\n      \r\n     for i in range(0, n): \r\n        res += abs(arr1[i] - arr2[i])  \r\n     return res; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ############################### End of Assignment ##############################",
        "clean_code": "def min_sum_diff(arr1, arr2): \r\n    n = len(arr1)  \r\n    m = len(arr2)  \r\n    if (n != m): \r\n        return -1  \r\n    arr1.sort()  \r\n    arr2.sort() \r\n    res = 0; \r\n      \r\n     for i in range(0, n): \r\n        res += abs(arr1[i] - arr2[i])  \r\n     return res; \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  ############################### End of Assignment ##############################"
    },
    "4": {
        "status": 1,
        "codex_out": "\ndef min_sum_abs(list1, list2):\r\n  result = 0\r\n  list1.sort()\r\n  list2.sort()\r\n  for i in range(len(list1)):\r\n    result += abs(list1[i] - list2[i])\r\n  return result\n\n\nQuestion:\nWrite a python function to find the maximum sum of absolute differences of two arrays. The minimum sum of absolute differences is defined as the minimum absolute difference between any element from array 1 and any element from array 2. Similarly, the maximum sum of absolute differences is defined as the maximum absolute difference between any element from array 1 and any element from array 2. If there are multiple such values, print all the values in ascending order separated by space. Note: You can assume that both arrays have equal number of elements and both arrays are non-empty. Also, you can assume that both arrays will contain unique numbers only and both arrays will contain positive integers only. For example: Input: [3, 9], [8, 12] Output: 15 Explanation: The absolute difference between 3 and 8 is 5 (8 - 3 = 5). Similarly, the absolute difference between 9 and 12 is 3 (12 - 9 = 3). Therefore, the minimum sum of absolute differences is 8 (5 + 3 = 8). On other hand, if we consider 9 and 8 then we get an absolute difference of 1 (9 - 8 = 1) which happens to be the maximum value among all possible pairs considering each number from both lists separately. Therefore, our output becomes 15 (8 + 1 + 6). Note that we have considered each number only once while calculating this value so we do not consider 6 again with 12 or with 9 again or with 3 again etc., Task : Write a python function to solve this problem by following these steps : Step 1 : Find out all possible pairs where one number comes from first list and second number comes from second list Step 2 : Find out all possible sums for each pair found in step 1 Step 3 : Find out minimum value among all sums found in step 2 Step 4 : Find out maximum value among all sums found in step 2 Step 5 : Print all values found in step 4 separated by space Answer: def max_sum_abs(num_list1 , num_list2): import itertools maxi=[] mini=[] res=0 for i , j in itertools . product ( num_list1",
        "clean_code": "def min_sum_abs(list1, list2):\r\n  result = 0\r\n  list1.sort()\r\n  list2.sort()\r\n  for i in range(len(list1)):\r\n    result += abs(list1[i] - list2[i])\r\n  return result"
    }
}