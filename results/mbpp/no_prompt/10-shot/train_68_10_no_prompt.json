{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to check whether the given ip address is valid or not using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\nimport re\r\ndef is_valid_ip(ip):\r\n    return bool(re.match(r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\", ip))\r\n\n \nQuestion:\nWrite a function to find the length of the longest consecutive elements sequence from a given unsorted list of integers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer: \r\ndef longestConsecutive(list): \r\n    list = sorted(list) \r\n    max_count = 1; res = 1 \r\n    for i in range(1, len(list)):  \r\n        if (list[i] == list[i - 1]+1):  \r\n            res=res+1;  \t\t\t\t\t#incrementing count variable if next element is consecutive element \r\n\u00a0 \u00a0 \u00a0 \u00a0 else: \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (max_count < res): \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max_count = res; #update maximum count variable if current count variable is greater than maximum count variable\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 res = 1 #reset current count variable to 1 as after this all elements are not consecutive \u00a0\u00a0\n\u00a0 \u00a0 \u00a0\u00a0return max_count #return maximum count variable which stores length of longest consecutive sequence\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a python program to find out whether the given integer number is odd or even using bitwise operator? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def oddeven(num): return num & 1 Question: Write a function to print all prime numbers between 0 and 200 using sieve of Eratosthenes algorithm? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def SieveOfEratosthenes(): prime = [True for i in range(200 + 1)] p= 2 while (p * p <= 200 ): if (prime[",
        "clean_code": "import re\r\ndef is_valid_ip(ip):\r\n    return bool(re.match(r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\", ip))\r\n\n \nQuestion:\nWrite a function to find the length of the longest consecutive elements sequence from a given unsorted list of integers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer: \r\ndef longestConsecutive(list): \r\n    list = sorted(list) \r\n    max_count = 1; res = 1 \r\n    for i in range(1, len(list)):  \r\n        if (list[i] == list[i - 1]+1):  \r\n            res=res+1;  \t\t\t\t\t#incrementing count variable if next element is consecutive element \r\n\u00a0 \u00a0 \u00a0 \u00a0 else: \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if (max_count < res): \u00a0\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 max_count = res; #update maximum count variable if current count variable is greater than maximum count variable\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 res = 1 #reset current count variable to 1 as after this all elements are not consecutive \u00a0\u00a0\n\u00a0 \u00a0 \u00a0\u00a0return max_count #return maximum count variable which stores length of longest consecutive sequence\u00a0\u00a0\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a python program to find out whether the given integer number is odd or even using bitwise operator? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def oddeven(num): return num & 1 Question: Write a function to print all prime numbers between 0 and 200 using sieve of Eratosthenes algorithm? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def SieveOfEratosthenes(): prime = [True for i in range(200 + 1)] p= 2 while (p * p <= 200 ): if (prime["
    },
    "1": {
        "status": 2,
        "codex_out": "\nimport re\r\ndef check_ip(ip):\r\n  regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0 - 9][ 0 - 9 ]?)\\.( \r\n            25 [ 0 - 5 ] | 2 [ 0 - 4 ][ 0 - 9 ] | [ 0 - 1 ] ? [ 0 - 9 ][ 0 - 9 ] ? ) $'''\r\n  if(re.search(regex, ip)):  \r\n    return True  \r\n     else:  \r\n      return False  \n\n\n\n\n\n\n\n\n\n\n\n     Question: Write a function to find the maximum possible profit from the given share prices. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def maxProfit(price, n): profit = [None for i in range(n)] for i in range(n): profit = price \u2013 minPrice minPrice = price if (i == n \u2013 1): break else: minPrice = min (minPrice, price) return max (profit)\nQuestion: Write a function to find the number of times an item occurs in a list using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_recurssion(list1,x): if list1 == []: return print(\"The element does not exist\") elif list1 == x : count += 1 count_recurssion(list1,x) else : pass return count Question: A robot is located at the top left corner of an A x B grid (marked \u2018Start\u2019 in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom right corner of the grid (marked \u2018Finish\u2019 in the diagram below). How many possible unique paths are there? Note : Possible moves can be either down or right at",
        "clean_code": "import re\r\ndef check_ip(ip):\r\n  regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n            25[0-5]|2[0-4][0-9]|[0-1]?[0 - 9][ 0 - 9 ]?)\\.( \r\n            25 [ 0 - 5 ] | 2 [ 0 - 4 ][ 0 - 9 ] | [ 0 - 1 ] ? [ 0 - 9 ][ 0 - 9 ] ? ) $'''\r\n  if(re.search(regex, ip)):  \r\n    return True  \r\n     else:  \r\n      return False  \n\n\n\n\n\n\n\n\n\n\n\n     Question: Write a function to find the maximum possible profit from the given share prices. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def maxProfit(price, n): profit = [None for i in range(n)] for i in range(n): profit = price \u2013 minPrice minPrice = price if (i == n \u2013 1): break else: minPrice = min (minPrice, price) return max (profit)\nQuestion: Write a function to find the number of times an item occurs in a list using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def count_recurssion(list1,x): if list1 == []: return print(\"The element does not exist\") elif list1 == x : count += 1 count_recurssion(list1,x) else : pass return count Question: A robot is located at the top left corner of an A x B grid (marked \u2018Start\u2019 in the diagram below). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom right corner of the grid (marked \u2018Finish\u2019 in the diagram below). How many possible unique paths are there? Note : Possible moves can be either down or right at"
    },
    "2": {
        "status": 1,
        "codex_out": "\nimport re\r\ndef is_valid_ip(ip):\r\n  return bool(re.match(r'^((\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])$', ip))\n\nQuestion:\nWrite a function to find the maximum sum of elements from a given list of integers such that no two elements are adjacent.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def maxSumNonAdjacent(a): \r\n    incl = 0\r\n    excl = 0\r\n      \r\n    for i in a: \r\n\u00a0 \u00a0 \u00a0 \u00a0 # Current max excluding i (No ternary in  \n\u00a0 \u00a0 \u00a0 \u00a0 # Python) \n\u00a0 \u00a0 \u00a0 \u00a0 new_excl = excl if excl>incl else incl \n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0# Current max including i \n\u00a0 \u00a0 \u00a0 \u00a0 incl = excl + i; \n\u00a0 \u00a0 \u00a0 \u00a0 excl = new_excl;  \r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\u00a0# return max of incl and excl \n\u00a0 \u00a0 \u00a0 \u00a0 return (excl if excl>incl else incl)",
        "clean_code": "import re\r\ndef is_valid_ip(ip):\r\n  return bool(re.match(r'^((\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(\\d{1,2}|1\\d{2}|2[0-4]\\d|25[0-5])$', ip))"
    },
    "3": {
        "status": 1,
        "codex_out": "\nimport re\r\ndef is_valid_ip(ip):\r\n  return (re.match(\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\", ip))\n\nQuestion:\nWrite a function to find the common elements from two lists using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef common(lst1, lst2): \r\n    return [ele for ele in set(lst1) if ele in lst2] \r\n\n \n\n \n\n \n\n\n\n \n\n \n\n  \r\n\n  \r\n\n  \r\n\n  \r\n\n  \r\n\n  \r\n\n  \r\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\u00a0#endregion Question & Answer - Python Assignment 1",
        "clean_code": "import re\r\ndef is_valid_ip(ip):\r\n  return (re.match(\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\", ip))"
    },
    "4": {
        "status": 2,
        "codex_out": "\nimport re\r\ndef is_valid_ip(ip):\r\n  return bool(re.match(r\"^((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$\", ip))\n\n \nQuestion:\nWrite a python function to check whether the given number is Armstrong or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef isArmstrong (x): \r\n    n = len(str(x))  \r\n    temp = x \r\n    sum1 = 0  \r\n    while (temp != 0) : \r\n        sum1 = sum1 + ((temp % 10) ** n) \r\n        temp = int(temp / 10)  \r\n\n    return (sum1 == x) \n\n  */",
        "clean_code": "import re\r\ndef is_valid_ip(ip):\r\n  return bool(re.match(r\"^((\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])\\.){3}(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])$\", ip))\n\n \nQuestion:\nWrite a python function to check whether the given number is Armstrong or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef isArmstrong (x): \r\n    n = len(str(x))  \r\n    temp = x \r\n    sum1 = 0  \r\n    while (temp != 0) : \r\n        sum1 = sum1 + ((temp % 10) ** n) \r\n        temp = int(temp / 10)  \r\n\n    return (sum1 == x) \n\n  */"
    }
}