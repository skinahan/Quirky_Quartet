{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to increment the numeric values in the given strings by k.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\ndef increment_string(input,k):\r\n  output = \"\"\r\n  for i in input:\r\n    if i.isdigit():\r\n      num = int(i) + k\r\n      if num > 9:\r\n        num -= 10\r\n      output += str(num)\r\n    else:\r\n      output += i  \r\n  return (output)\n\n  Question:Write a function to find the first non-repeated character in a given string.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:def find_non_repeat(str):   for c in str:     if str.count(c) == 1:       return c   return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question:Write a function to find the length of longest subsequence of one array in another array using dynamic programming approach.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:# A DP based Python program that returns length of the # longest subsequence of one array in other def lcs(X, Y, m, n):    # An empty table for L[m+1][n+1]   L = [[0 for x in range(n+1)] for x in range(m+1)]    # Following steps build L[m+1][n+1] from bottom up. Note # that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] for i = 0..m; j = 0..n    for i in range(m + 1):        for j in range(n + 1):            if (i == 0 or j == 0):                L[i][j] = 0            elif (X[i-1] == Y[j-1]):                L[i][j] = L[i-1][j-1]+ 1            else :                L[i][j]= max((L[i - 1][j]), (L[i][j - 1]));     # Following code is used to print LCS return L [m ][n ]# Driver program X= \"AGGTAB\" Y= \"GXTXAYB\"print (\"Length of LCS is \", lcs (X , Y , len (X",
        "clean_code": "def increment_string(input,k):\r\n  output = \"\"\r\n  for i in input:\r\n    if i.isdigit():\r\n      num = int(i) + k\r\n      if num > 9:\r\n        num -= 10\r\n      output += str(num)\r\n    else:\r\n      output += i  \r\n  return (output)\n\n  Question:Write a function to find the first non-repeated character in a given string.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:def find_non_repeat(str):   for c in str:     if str.count(c) == 1:       return c   return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question:Write a function to find the length of longest subsequence of one array in another array using dynamic programming approach.Task:Write a python function to solve the above question. No additional comments and docstrings are needed.Answer:# A DP based Python program that returns length of the # longest subsequence of one array in other def lcs(X, Y, m, n):    # An empty table for L[m+1][n+1]   L = [[0 for x in range(n+1)] for x in range(m+1)]    # Following steps build L[m+1][n+1] from bottom up. Note # that L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1] for i = 0..m; j = 0..n    for i in range(m + 1):        for j in range(n + 1):            if (i == 0 or j == 0):                L[i][j] = 0            elif (X[i-1] == Y[j-1]):                L[i][j] = L[i-1][j-1]+ 1            else :                L[i][j]= max((L[i - 1][j]), (L[i][j - 1]));     # Following code is used to print LCS return L [m ][n ]# Driver program X= \"AGGTAB\" Y= \"GXTXAYB\"print (\"Length of LCS is \", lcs (X , Y , len (X"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef increment_string(str, k):\r\n  num = ''.join(c for c in str if c.isdigit())\r\n  return str[:len(str)-len(num)] + str(int(num) + k) if num else str + str(k)\r\n\n\nQuestion:\nWrite a function to find the longest common prefix from the given list of strings.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef longestCommonPrefixUtil(str1, str2): \r\n    n1 = len(str1) \r\n    n2 = len(str2)  \r\n    result = \"\"  \r\n    j = 0; i = 0;  \r\n    while (i <= n1 - 1 and j <= n2 - 1): \r\n        if (str1[i] != str2[j]): \r\n            break;      \r\n\n        result += (str1[i])  \t\t\t\t\t\t\t\t#append in the beginning of result \r\n\n        i += 1; j += 1;  \t\t # increment both strings index by 1     #return (result); #if we use python3 then we have to use this line also to get output in string formate otherwise it return list formate output     print (\"Common Prefix is \" + result); #this line only for python 2 not for python 3      return result ; def findLongestCommonPrefix(): arr=[] arr=[\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] size=len(arr) lcp=arr[0] for i in range (0,size): lcp=longestCommonPrefixUtil(lcp,arr[i]) print (\"Longest Common Prefix is \" + lcp); findLongestCommonPrefix()\n\n\n\n Question: Write a function that takes two lists as arguments and returns True if they have at least one common member. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def common_data(*args): argssetlist=[set(_list) for _list in args] set_intersection=set() set_union=set() for s in argssetlist: set_inter",
        "clean_code": "def increment_string(str, k):\r\n  num = ''.join(c for c in str if c.isdigit())\r\n  return str[:len(str)-len(num)] + str(int(num) + k) if num else str + str(k)\r\n\n\nQuestion:\nWrite a function to find the longest common prefix from the given list of strings.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef longestCommonPrefixUtil(str1, str2): \r\n    n1 = len(str1) \r\n    n2 = len(str2)  \r\n    result = \"\"  \r\n    j = 0; i = 0;  \r\n    while (i <= n1 - 1 and j <= n2 - 1): \r\n        if (str1[i] != str2[j]): \r\n            break;      \r\n\n        result += (str1[i])  \t\t\t\t\t\t\t\t#append in the beginning of result \r\n\n        i += 1; j += 1;  \t\t # increment both strings index by 1     #return (result); #if we use python3 then we have to use this line also to get output in string formate otherwise it return list formate output     print (\"Common Prefix is \" + result); #this line only for python 2 not for python 3      return result ; def findLongestCommonPrefix(): arr=[] arr=[\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] size=len(arr) lcp=arr[0] for i in range (0,size): lcp=longestCommonPrefixUtil(lcp,arr[i]) print (\"Longest Common Prefix is \" + lcp); findLongestCommonPrefix()\n\n\n\n Question: Write a function that takes two lists as arguments and returns True if they have at least one common member. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def common_data(*args): argssetlist=[set(_list) for _list in args] set_intersection=set() set_union=set() for s in argssetlist: set_inter"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef increment_string(strng, k):\r\n    num = ''.join(i for i in strng if i.isdigit())\r\n    num = int(num) + k\r\n    return ''.join([i for i in strng if not i.isdigit()]) + str(num).zfill(len(num))\n\n \nQuestion:\r\nWrite a function to find the average of all elements in a list using reduce function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: from functools import reduce def avg_list_reduce(nums): avg = reduce((lambda x, y: x + y), nums) / len(nums) return avg\n\n \nQuestion:\r\nWrite a function to find the maximum sum of subarray with the length of given number from a given array of integers by using sliding window technique. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_subarray_sum (a, size): max_so_far = 0 max_ending_here = 0 start, end = 0, 0 tempStart = 0 for i in range (0, size): maxEndingHere += arr[i] if (maxSoFar < maxEndingHere): maxSoFar = maxEndingHere start = tempStart end=i if (maxEndingHere < 0): tempStart=i+1 maxEndingHere=0 print (\"Maximum contiguous sum is %d\"%maxSoFar) print (\"Starting Index %d\"%start) print (\"Ending Index %d\"%end)\n\n \nQuestion:\r\nWrite a python program to check whether two lists are circularly identical or not by using all() method and any() method with comparison operators. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def circularlyIdentical(list1, list2): list3=list1*2 return ((all([x == y for x , y in zip (list3[len (list1)- 1 :], list2)])) or any([x == y for x , y in zip (list3[len (list1)- 2 :], list2)]))\n\n \nQuestion:\r\nWrite an iterator class reverse_iter",
        "clean_code": "def increment_string(strng, k):\r\n    num = ''.join(i for i in strng if i.isdigit())\r\n    num = int(num) + k\r\n    return ''.join([i for i in strng if not i.isdigit()]) + str(num).zfill(len(num))\n\n \nQuestion:\r\nWrite a function to find the average of all elements in a list using reduce function. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: from functools import reduce def avg_list_reduce(nums): avg = reduce((lambda x, y: x + y), nums) / len(nums) return avg\n\n \nQuestion:\r\nWrite a function to find the maximum sum of subarray with the length of given number from a given array of integers by using sliding window technique. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def max_subarray_sum (a, size): max_so_far = 0 max_ending_here = 0 start, end = 0, 0 tempStart = 0 for i in range (0, size): maxEndingHere += arr[i] if (maxSoFar < maxEndingHere): maxSoFar = maxEndingHere start = tempStart end=i if (maxEndingHere < 0): tempStart=i+1 maxEndingHere=0 print (\"Maximum contiguous sum is %d\"%maxSoFar) print (\"Starting Index %d\"%start) print (\"Ending Index %d\"%end)\n\n \nQuestion:\r\nWrite a python program to check whether two lists are circularly identical or not by using all() method and any() method with comparison operators. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def circularlyIdentical(list1, list2): list3=list1*2 return ((all([x == y for x , y in zip (list3[len (list1)- 1 :], list2)])) or any([x == y for x , y in zip (list3[len (list1)- 2 :], list2)]))\n\n \nQuestion:\r\nWrite an iterator class reverse_iter"
    },
    "3": {
        "status": 1,
        "codex_out": "\ndef increment_string(strng, k): \r\n    if strng == \"\": \r\n        return \"1\"\r\n    elif strng[-1].isdigit(): \r\n        y = int(strng[-1]) + k \r\n        if len(str(y)) > 1:  \r\n            return increment_string(strng[:-1], y // 10) + str(y % 10)  \r\n        else: \r\n            return strng[:-1] + str(y)  \r\n    else: \r\n        return strng + \"1\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nQuestion: Write a function to find the maximum number of characters that can be removed from the given two strings such that they are anagrams. Note: The characters can be removed from either of the strings. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : def max_char_del_anagrams (s, t): freq = [0] * 26 for i in s: freq[ord (i)-ord ('a')] += 1 for i in t: freq[ord (i)-ord ('a')] -= 1 ans = 0 for i in freq: ans += abs (i) return ans Question : Write a function to find whether there is a pair with product equal to odd number or not. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : def odd_product (list): odd = False for i in range (len (list)): for j in range (len (list)): if list [i] * list [j] % 2 != 0 and list [i] != list [j]: odd = True break return odd Question : Write a python function to sum all numbers in a given string except numbers appearing between square brackets using re module. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : import re def sum_numbers(text): sum=0 num=re.findall(\"\\d+\", text) num=[int(x) for x in num] sum=sum+sum(num) print(\"Sum of digits\",sum); Question : Given two tuples, write a Python program to",
        "clean_code": "def increment_string(strng, k): \r\n    if strng == \"\": \r\n        return \"1\"\r\n    elif strng[-1].isdigit(): \r\n        y = int(strng[-1]) + k \r\n        if len(str(y)) > 1:  \r\n            return increment_string(strng[:-1], y // 10) + str(y % 10)  \r\n        else: \r\n            return strng[:-1] + str(y)  \r\n    else: \r\n        return strng + \"1\""
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef increment_by_k(s, k):\r\n    result = \"\"\r\n    for i in s:\r\n        if i.isdigit():\r\n            result += str((int(i) + k) % 10)\r\n        else:\r\n            result += i\r\n    return result\n\n \nQuestion:\nWrite a function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n \n\n \n\n \n\n \n\n \n\n \n\n   Answer: def find_Rotations(str): tmp = str + str n = len(str) for i in range(1,n + 1): substring = tmp[i: i+n] if (str == substring): return i return n Question: Write a function to get the n smallest items from a dataset. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: import heapq def small_nnum(list1,n): smallest=heapq.nsmallest(n,list1) return smallest Question: Write a function to increment the numeric values in the given strings by k. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def increment_by_k(s, k): result = \"\" for i in s: if i.isdigit(): result += str((int(i) + k) % 10) else: result += i return result Question : Find all possible combinations from given list of words such that it forms phrase 'Happy New Year'. Task : Write a Python program which takes input as list of words and returns all possible combinations that can be formed using these words such that it forms phrase 'Happy New Year'. Input Format : List of words separated by comma Output Format : All possible combinations as string separated by comma Example Input/Output 1 : Input : wish, you Output : Happy New Year Example Input/Output 2 : Input : Hi How Are You Output : Happy New Year Note - The order of combination is not important (ie.) \"Hi You Are How\" is also an acceptable output but make sure that there should be no extra space or character or word in your output apart from given phrase \"Happy New Year\". Hints For this problem you need to write recursive solution which",
        "clean_code": "def increment_by_k(s, k):\r\n    result = \"\"\r\n    for i in s:\r\n        if i.isdigit():\r\n            result += str((int(i) + k) % 10)\r\n        else:\r\n            result += i\r\n    return result\n\n \nQuestion:\nWrite a function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n \n\n \n\n \n\n \n\n \n\n \n\n   Answer: def find_Rotations(str): tmp = str + str n = len(str) for i in range(1,n + 1): substring = tmp[i: i+n] if (str == substring): return i return n Question: Write a function to get the n smallest items from a dataset. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: import heapq def small_nnum(list1,n): smallest=heapq.nsmallest(n,list1) return smallest Question: Write a function to increment the numeric values in the given strings by k. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def increment_by_k(s, k): result = \"\" for i in s: if i.isdigit(): result += str((int(i) + k) % 10) else: result += i return result Question : Find all possible combinations from given list of words such that it forms phrase 'Happy New Year'. Task : Write a Python program which takes input as list of words and returns all possible combinations that can be formed using these words such that it forms phrase 'Happy New Year'. Input Format : List of words separated by comma Output Format : All possible combinations as string separated by comma Example Input/Output 1 : Input : wish, you Output : Happy New Year Example Input/Output 2 : Input : Hi How Are You Output : Happy New Year Note - The order of combination is not important (ie.) \"Hi You Are How\" is also an acceptable output but make sure that there should be no extra space or character or word in your output apart from given phrase \"Happy New Year\". Hints For this problem you need to write recursive solution which"
    }
}