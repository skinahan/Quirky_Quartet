{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\nQuestion:\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)\n\nQuestion:\nWrite a function to find all words which are at least 4 characters long in a string by using regex.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n\nQuestion:\nWrite a function to find squares of individual elements in a list using lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums\n\nQuestion:\nWrite a python function to find the minimum number of rotations required to get the same string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n \n\nQuestion:\nWrite a function to get the n smallest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest\n\n\nQuestion:\nWrite a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 1,
        "codex_out": "\ndef sort_by_tuple(dict1):\r\n  dict1 = {(i, i + 1): i for i in range(3)}\r\n  sorted_dict = sorted(dict1.items(), key=lambda x: x[0][0] * x[0][1])\r\n  return sorted_dict\n\n\nQuestion:\nWrite a function to find the most frequent character in a given string. If there are two characters in the list having same frequency, then return the one which comes first.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef freq_char(str):\r\n    dict = {}\r\n    for n in str:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n\n            dict[n] += 1\r\n\n        else:\n\n            dict[n] = 1\r\n\n    maxvalue = max(dict.values())  # finding maximum value of dictionary values and storing it into variable maxvalue..!\\n\",\n\n    maxkey = [k for k, v in dict.items() if v == maxvalue]  # finding corresponding key of maximum value..!\\n\",\\n\",\\n\",\\n\",\\n\"\n\n    print(\"max key is \", *maxkey)  # printing all keys with maximum value..!\\n\" , \\n\" , \\n\" , \\n\"\" , \\ n \")   # printing only first key with maximum value...!   \\ n \")      return (maxkey[0])     \", \"\\ n \")     \", \"\\ n \")     \", \"\\ n \")\"}}, {\"cell_type\": \"code\",\"execution_count\": null,\"metadata\": {},\"outputs\": [],\"source\": [\"\"]}],\"metadata\":{\"kernelspec\":{\"display_name\":\"Python 3\",\"language\":\"python\",\"name\":\"python3\"},\"language_info\":{\"codemirror_mode\":{\"name\":\"ipython\",\"version\":3},\"file_extension\":\".py\",\"mimetype\":\"text/x-python\",\"name\":\"python\",\"nbconvert_exporter\":\"python\",\"pygments_lexer\":\"ipython3\",\"version\":\"3.6.5\"}},\"nbformat\":4,\"nbformat_minor\":2}",
        "clean_code": "def sort_by_tuple(dict1):\r\n  dict1 = {(i, i + 1): i for i in range(3)}\r\n  sorted_dict = sorted(dict1.items(), key=lambda x: x[0][0] * x[0][1])\r\n  return sorted_dict"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef sort_dict(dict1):\r\n  dict2 = sorted(dict1.items(), key=lambda x: (x[0][0]*x[0][1], x[0][0], x[0][1]))\r\n  return dict2\n\n\nQuestion:\nWrite a function to find the number of pairs of integers in a given list whose difference is equal to a specified number.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\ndef count_pairs(nums,diff):\r\n  count = 0\r\n  for i in range(len(nums)):\r\n    for j in range(i+1, len(nums)):\r\n      if nums[i] - nums[j] == diff or nums[j] - nums[i] == diff:\r\n        count += 1  \r\n\n  return count\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find the maximum sum leaf to root path in a Binary Tree. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def maxSumPathUtil(root, res, val): if root is None : return if root.left is None and root.right is None : if val + root.data > res : res = val + root.data return res elif root .left is None : return maxSumPathUtil (root .right , res , val + root .data ) elif root .right is None : return maxSumPathUtil (root .left , res , val + root .data ) else : return max (maxSumPathUtil (root .left , res , val + root .data ), maxSumPathUtil (root .right , res , val + root .data )) def maxSumPathBTree(): ''' Function that returns the maximum sum from leaf node to the parent node''' # Code here # Hint - Use recursive call by passing current value as parameter Question: Write a function to validate whether an IP address belongs to Class C or not using regular expressions? Task: Write a python function to solve the above question with following constraints 1) Function should be named as validate_ip 2) Should use regular expression 3) Should print True when valid IP address else False 4) When invalid IP address",
        "clean_code": "def sort_dict(dict1):\r\n  dict2 = sorted(dict1.items(), key=lambda x: (x[0][0]*x[0][1], x[0][0], x[0][1]))\r\n  return dict2\n\n\nQuestion:\nWrite a function to find the number of pairs of integers in a given list whose difference is equal to a specified number.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\ndef count_pairs(nums,diff):\r\n  count = 0\r\n  for i in range(len(nums)):\r\n    for j in range(i+1, len(nums)):\r\n      if nums[i] - nums[j] == diff or nums[j] - nums[i] == diff:\r\n        count += 1  \r\n\n  return count\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find the maximum sum leaf to root path in a Binary Tree. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def maxSumPathUtil(root, res, val): if root is None : return if root.left is None and root.right is None : if val + root.data > res : res = val + root.data return res elif root .left is None : return maxSumPathUtil (root .right , res , val + root .data ) elif root .right is None : return maxSumPathUtil (root .left , res , val + root .data ) else : return max (maxSumPathUtil (root .left , res , val + root .data ), maxSumPathUtil (root .right , res , val + root .data )) def maxSumPathBTree(): ''' Function that returns the maximum sum from leaf node to the parent node''' # Code here # Hint - Use recursive call by passing current value as parameter Question: Write a function to validate whether an IP address belongs to Class C or not using regular expressions? Task: Write a python function to solve the above question with following constraints 1) Function should be named as validate_ip 2) Should use regular expression 3) Should print True when valid IP address else False 4) When invalid IP address"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef sort_dict(dictionary): \r\n    return sorted(dictionary.items(), key=lambda x: x[0][0]*x[0][1])\n\n \nQuestion:\nWrite a function to find the number of substrings in a string which contains all vowels.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef count_substring(str): \r\n\tcount = 0\r\n\tvowels = \"aeiou\"\r\n\tfor i in range(len(str)): \r\n\t\tif (set(str[i:i+5]).issubset(vowels)): \r\n\t\t\tcount += 1\r\n\n\treturn count \n\n \n\n \n\n\n\n\n\n\n\n   */",
        "clean_code": "def sort_dict(dictionary): \r\n    return sorted(dictionary.items(), key=lambda x: x[0][0]*x[0][1])\n\n \nQuestion:\nWrite a function to find the number of substrings in a string which contains all vowels.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport re\r\ndef count_substring(str): \r\n\tcount = 0\r\n\tvowels = \"aeiou\"\r\n\tfor i in range(len(str)): \r\n\t\tif (set(str[i:i+5]).issubset(vowels)): \r\n\t\t\tcount += 1\r\n\n\treturn count \n\n \n\n \n\n\n\n\n\n\n\n   */"
    },
    "3": {
        "status": 1,
        "codex_out": "\ndef sort_dic(dict1):\r\n  dict2 = dict()\r\n  for i in dict1:\r\n    prod=i[0]*i[1]\r\n    dict2[prod]=dict1[i]\r\n  sorted_keys=sorted(dict2.keys())\r\n  final_list=[]  \r\n  for j in sorted_keys:\r\n    temp=(dict2[j],j)  \r\n    final_list.append(temp)    \r\n\n  return (final_list)",
        "clean_code": "def sort_dic(dict1):\r\n  dict2 = dict()\r\n  for i in dict1:\r\n    prod=i[0]*i[1]\r\n    dict2[prod]=dict1[i]\r\n  sorted_keys=sorted(dict2.keys())\r\n  final_list=[]  \r\n  for j in sorted_keys:\r\n    temp=(dict2[j],j)  \r\n    final_list.append(temp)    \r\n\n  return (final_list)"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef sort_dict_items(dict1):\r\n  res = sorted(dict1.items(), key=lambda x: x[0][0] * x[0][1])\r\n  return res\n\n\nQuestion:\nWrite a function to find the nth largest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef large_nnum(list1,n):\r\n  largest=heapq.nlargest(n,list1)\r\n  return largest\n\n  Question:\r\n\n Write a function to generate all permutations of a list in Python.\r\n\n Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def permute(data): perms = [[]] for elem in data: new_perms = [] for perm in perms: for i in range(len(perm)+1): new_perms.append(perm[:i] + [elem] + perm[i:] ) perms = new_perms return perms Question : Write a function to find duplicate characters of a given string by using regex module with findall() method of it. Task : Write a python function to solve the above question with regex module as an import statement and findall() method of it as an argument of your defined function . No additional comments and docstrings are needed . Answer : import re def duplicate_chars (string) : result = re . findall ( r'(\\w)(\\w).*\\2\\1' , string ) if len (result) > 0 : print ( \"Duplicate Characters\" ) else : print ( \"No Duplicate Characters Found\" ) Question : Write a Python program that accepts two lists A and B such that B is an anagram of A , i . e . B is made by randomizing the order of elements from A . Task : Write a python program that solves the above problem statement . No additional comments and docstrings are needed . Answer : def checkAnagrams (A , B) : if len (A) != len (B) : return False else : tempA = sorted ([x for x in A]) tempB = sorted ([x for x in B]) if tempA == tempB or ''.join (tempA ) == ''.join",
        "clean_code": "def sort_dict_items(dict1):\r\n  res = sorted(dict1.items(), key=lambda x: x[0][0] * x[0][1])\r\n  return res\n\n\nQuestion:\nWrite a function to find the nth largest items from a dataset.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq\r\ndef large_nnum(list1,n):\r\n  largest=heapq.nlargest(n,list1)\r\n  return largest\n\n  Question:\r\n\n Write a function to generate all permutations of a list in Python.\r\n\n Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def permute(data): perms = [[]] for elem in data: new_perms = [] for perm in perms: for i in range(len(perm)+1): new_perms.append(perm[:i] + [elem] + perm[i:] ) perms = new_perms return perms Question : Write a function to find duplicate characters of a given string by using regex module with findall() method of it. Task : Write a python function to solve the above question with regex module as an import statement and findall() method of it as an argument of your defined function . No additional comments and docstrings are needed . Answer : import re def duplicate_chars (string) : result = re . findall ( r'(\\w)(\\w).*\\2\\1' , string ) if len (result) > 0 : print ( \"Duplicate Characters\" ) else : print ( \"No Duplicate Characters Found\" ) Question : Write a Python program that accepts two lists A and B such that B is an anagram of A , i . e . B is made by randomizing the order of elements from A . Task : Write a python program that solves the above problem statement . No additional comments and docstrings are needed . Answer : def checkAnagrams (A , B) : if len (A) != len (B) : return False else : tempA = sorted ([x for x in A]) tempB = sorted ([x for x in B]) if tempA == tempB or ''.join (tempA ) == ''.join"
    }
}