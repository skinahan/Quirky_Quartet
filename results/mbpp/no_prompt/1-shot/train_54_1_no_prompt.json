{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\n\nQuestion:\nWrite a python function to find the sum of fifth power of n natural numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef sum_of_fifth(n): \r\n\tsum = 0\r\n\tfor i in range(1, n+1): \r\n\t\tsum += pow(i, 5) \r\n\treturn sum\n\n\nQuestion:\nWrite a python function to find the sum of fifth power of n natural numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\n\n  # Python3 program to find the sum of  \r\n# fifth power of first n natural number  \r\ndef sum_of_fifth(n): \r\n    sum = 0\r\n    for i in range(1, n+1): \r\n        sum += pow(i, 5) \r\n    return sum\n\n\n\n\n\n\n\n\n\n\n\n                                             Second Assignment 2nd week 13/05/2020 - 19/05/2020   (30 marks)                                           - Marks Obtained : 30 / 30 - Grade : A+ (10 / 10) - Marks Obtained : 10 / 10 - Grade : A+ (10 / 10) - Marks Obtained : 10 / 10 - Grade : A+ (10 / 10) - Marks Obtained : 30 / 30 - Grade : A+ (10 / 10) - Marks Obtained : 20 / 20 - Grade : A (20 / 20) - Marks Obtained : 20 / 20 - Grade : A (20 / 20) +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ Question: Write a function to find all possible substrings for a given string and store them in a list. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def getSubstringList(str): length = len(str); result = []; for i in range(length): for j in range((i + 1), length + 1): result.append([str[i], str[j]]); return result; print(\"Substring List is\", getSubstringList(\"Hello World\")) Question: Write a function which takes an integer as input and returns it's binary representation as an output using stack data structure Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: class Stack(): def __init__(self): self._items = [] def pushStackItemToStackTopPositionInStackTopPositionInStackTopPositionInStackTopPosition",
        "clean_code": "def sum_of_fifth(n): \r\n\tsum = 0\r\n\tfor i in range(1, n+1): \r\n\t\tsum += pow(i, 5) \r\n\treturn sum"
    },
    "1": {
        "status": 0,
        "codex_out": "\ndef sum_fifth(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**5\n    return sum\r\n\n \nQuestion:\nWrite a python function to check if two strings are anagrams. Two strings are called anagrams if they contain same set of characters but in different order. Example: 'heart' and 'earth' are anagrams. Note that the characters need not be English letters. For instance, 'abcd' and 'dcba' are anagrams. The function should ignore the case of the letters and treat upper case and lower case letters as same. For example, 'Heart' and 'earth' are also anagrams. If there is a mismatch in the number of characters or any character is not found in one string, then it should return False instead of True. Example: abcde (length 5) and abcd (length 4) should return False instead of True as length does not match or abcde (length 5) and abcdf (length 5) should return False instead of True as last character is different in both strings. Also note that you can assume only alphabets or numeric values for input strings. You don't need to handle special characters like !@#$%^&* etc., which may be present in input but your logic will never have such inputs because special characters cannot be part of a string which is formed by shuffling two other strings which have no special characters at all! The function signature is given below: def check_anagram(str1, str2): # Your code here # Remove pass statement when you implement this function # Pass statement just means no operation/action will take place if __name__ == \"__main__\": str1 = input() str2 = input() check_anagram(str1, str2) Task: Write a python function to solve the above question using recursion with proper documentation comments explaining what each argument passed to the function represents and what it returns after computation along with its purpose/explanation if required like shown above for main() method implementation before each line inside main(). Do not use any built-in functions except len(). You can use len() only once inside your solution logic! No additional comments and docstrings are needed except those mentioned above! Answer: def check_anagram(str1, str2): \"\"\"This method checks whether two strings are anagram",
        "clean_code": "def sum_fifth(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**5\n    return sum"
    },
    "2": {
        "status": 1,
        "codex_out": "\ndef sum_fifth(n): \n\treturn sum([int(i)**5 for i in str(n)])\r\n\n\nQuestion:\nWrite a python function to find the median of two sorted arrays.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef median(arr1, arr2): \r\n\tm = len(arr1) \r\n\tn = len(arr2) \r\n\tif m > n: \r\n\t\treturn median(arr2, arr1) \r\n\n\tlow = 0\r\n\thigh = m  \r\n\n\twhile low <= high:  \r\n\n        partition_x = (low + high + 1) // 2   #+1 is for ceiling of result as integer division returns floor value by default in Python 3.x+    eg- 5/2=2 but 5//2=2.5 but we need 3 here so +1 is used     (in python 2 it will return 2 only as there is no concept of float division in python 2 so no need to add 1 there.)      if we don't use +1 then it will return wrong answer in some cases like [0,0,0] and [0,0] which should be 0 but without +1 it will return -infinity      and if we use only / instead of // then it will return wrong answer for input [3], [3] which should be 3 but with / it gives 6 because by default / does float division      so you have to use // for integer division and +1 for ceiling value as well.     You can also use from math import ceil     partition_x = ceil((low + high)/float(2))       #but ceil() function will give error if you pass decimal number directly like ceil((low+high)/float(2)) or ceil((low+high)/float()) or even ceil((low+high)/float('inf'))       #so you have to typecast that decimal number into float before passing otherwise error like TypeError: a float is required will occur            So either do this-        partition_x=ceil((float)(low+high)/float('inf'))         or this-        partition_x=ceil((float)(low+high)/'inf')         or this-        partition_x=ce",
        "clean_code": "def sum_fifth(n): \n\treturn sum([int(i)**5 for i in str(n)])"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef sum_fifth(n):\n    sum = 0\r\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\n \nQuestion:\nWrite a python function to find the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. Sample List : ['abc', 'xyz', 'aba', '1221'] Expected Result : 2\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n  Answer:   def match_words(words):  \tcount = 0  \tfor word in words:    \tif len(word) > 1 and word[0] == word[-1]:      \tcount += 1  \treturn count\n\n  Question: Write a python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). Sample Function and result : insert_end('Python') -> onononon insert_end('Exercises') -> eseseses Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def insert_end(str): return str[-2:]*4\n\n  Question: Write a Python program to create all possible permutations from a given collection of distinct numbers. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer from itertools import permutations def permutation(lst): print(\"All possible permutations are : \") for i in list(permutations(lst)): print(*i)\n\n  Question: Write Python Program add two Matrices Task Solution - You can use nested loop or zip() method or numpy module . The zip() method returns an iterator of tuples based on the iterable objects passed as parameters, which can be used to unpack data easily.. In this example, we will take two matrices inputs from user using nested for loops.. After that we will add corresponding elements present in both matrices using nested for loops.. Finally we will print out matrix output after adding both matrices.. Example Code # Matrix addition without NumPy import random ROW = 3 COL = 4 # Initialize matrix A = [[0] * COL for _ in range(ROW)] B = [[0] * COL for _",
        "clean_code": "def sum_fifth(n):\n    sum = 0\r\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\n \nQuestion:\nWrite a python function to find the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings. Sample List : ['abc', 'xyz', 'aba', '1221'] Expected Result : 2\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \n\n  Answer:   def match_words(words):  \tcount = 0  \tfor word in words:    \tif len(word) > 1 and word[0] == word[-1]:      \tcount += 1  \treturn count\n\n  Question: Write a python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2). Sample Function and result : insert_end('Python') -> onononon insert_end('Exercises') -> eseseses Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def insert_end(str): return str[-2:]*4\n\n  Question: Write a Python program to create all possible permutations from a given collection of distinct numbers. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer from itertools import permutations def permutation(lst): print(\"All possible permutations are : \") for i in list(permutations(lst)): print(*i)\n\n  Question: Write Python Program add two Matrices Task Solution - You can use nested loop or zip() method or numpy module . The zip() method returns an iterator of tuples based on the iterable objects passed as parameters, which can be used to unpack data easily.. In this example, we will take two matrices inputs from user using nested for loops.. After that we will add corresponding elements present in both matrices using nested for loops.. Finally we will print out matrix output after adding both matrices.. Example Code # Matrix addition without NumPy import random ROW = 3 COL = 4 # Initialize matrix A = [[0] * COL for _ in range(ROW)] B = [[0] * COL for _"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef sum_fifth_power(n):\r\n\tsum = 0\r\n\tfor i in range(1, n+1):\r\n\t\tsum += i**5\r\n\treturn sum\n\n \nQuestion:\nWrite a python function to find the sum of squares of only even numbers in given list. List can contain integers and floats. Ignore imaginary numbers. The function should return a float value. If the input list is empty, it should return 0.0. If the input list contains only integers, it should return an integer value and if the input list contains only floats, it should return a float value. For example: if the input list is [2, 4, 5, 6], output should be 52 and if the input list is [2, 4, 5.0, 6], output should be 52.0 and if the input list is [2+3j], output should be 0.0 (since we ignore imaginary numbers). You can use inbuilt functions to check for imaginary numbers but you cannot use any other inbuilt functions to solve this question except abs(). Also note that you cannot import any external libraries/modules for this question as well as for all other questions unless explicitly mentioned otherwise in that specific question description section (if any). Answer: def squares_sum(input_list): #start writing your code here square = [] for i in range(len(input_list)): if type(input_list[i]) == int or type(input_list[i]) == float: if abs((int)(input_list[i].real)) % 2 == 0: square = square + [(int)(input_list[i].real)**2] elif type(input_list[i]) == complex: pass else: pass else: pass return sum(square)\n\n \nQuestion :- Write a python function to find out whether an array is monotonic or not? An array is said to be monotonic if its elements from left to right are entirely non-increasing or entirely non-decreasing . Note : If there are multiple elements repeating , they must be grouped together . For eg . Input : 1 , 2 , 2 , 3 Output : True Input : 8 , 7 , 6 Output : True Input : 1 , 3 , 2 Output : False Task:- Write a python function which takes an integer array as an argument and returns True or False based on whether the given array is monotonic or not",
        "clean_code": "def sum_fifth_power(n):\r\n\tsum = 0\r\n\tfor i in range(1, n+1):\r\n\t\tsum += i**5\r\n\treturn sum\n\n \nQuestion:\nWrite a python function to find the sum of squares of only even numbers in given list. List can contain integers and floats. Ignore imaginary numbers. The function should return a float value. If the input list is empty, it should return 0.0. If the input list contains only integers, it should return an integer value and if the input list contains only floats, it should return a float value. For example: if the input list is [2, 4, 5, 6], output should be 52 and if the input list is [2, 4, 5.0, 6], output should be 52.0 and if the input list is [2+3j], output should be 0.0 (since we ignore imaginary numbers). You can use inbuilt functions to check for imaginary numbers but you cannot use any other inbuilt functions to solve this question except abs(). Also note that you cannot import any external libraries/modules for this question as well as for all other questions unless explicitly mentioned otherwise in that specific question description section (if any). Answer: def squares_sum(input_list): #start writing your code here square = [] for i in range(len(input_list)): if type(input_list[i]) == int or type(input_list[i]) == float: if abs((int)(input_list[i].real)) % 2 == 0: square = square + [(int)(input_list[i].real)**2] elif type(input_list[i]) == complex: pass else: pass else: pass return sum(square)\n\n \nQuestion :- Write a python function to find out whether an array is monotonic or not? An array is said to be monotonic if its elements from left to right are entirely non-increasing or entirely non-decreasing . Note : If there are multiple elements repeating , they must be grouped together . For eg . Input : 1 , 2 , 2 , 3 Output : True Input : 8 , 7 , 6 Output : True Input : 1 , 3 , 2 Output : False Task:- Write a python function which takes an integer array as an argument and returns True or False based on whether the given array is monotonic or not"
    }
}