{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\n\nQuestion:\nWrite a function to calculate wind chill index.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 2,
        "codex_out": "\ndef wind_chill(t, v): \r\n\tw = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16) \r\n\treturn w\n\n\nQuestion:\nWrite a function to calculate the distance between two points on the surface of earth using latitude and longitude of the two points and radius of earth.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef distance(lat1, lat2, long1, long2): \r\n\tR = 6371\r\n\tdLat = math.radians(lat2-lat1) \r\n\tdLon = math.radians(long2-long1) \r\n\ta = math.sin(dLat/2)*math.sin(dLat/2)+math.cos(math.radians(lat1))*math.*cos*math.*radians*math.(lat2)*math.*sin*math.*pow*math.(dLon/2)*m**ath*.sin*m**ath*.pow*m**ath*.dLon/2; \r\n\tc = 2 * math.*atan*m**ath*.sqrt((a)) c = 2 * math.*atan*m**ath*.sqrt((a)), sqrt((1-a)); d = R * c; return d\n\n\n\n Question: Write a function to check whether given year is leap year or not using conditional operator Answer: def is_leap_year(): y=int(*input(\"Enter year:\")) if y%4==0 & y%100!=0 or y%400==0 : print(\"Leap year\") else : print(\"Not a Leap year\") is_leap_year()\n\n Question: Write a function to calculate simple interest Answer: p=int(*input(\"Enter principal amount\")) r=float(*input(\"Enter rate\")) t=float(*input(\"Enter time period\")) si=(p r t)/100 print('Simple interest',si)\n\n Question: Write a function to find area of circle Answer: def area(): r=int(*input('enter radius')) area=(22/7)*r**r print('Area',area) area()\n\n Question: Write a function which accepts 5 numbers as",
        "clean_code": "def wind_chill(t, v): \r\n\tw = 35.74 + 0.6215 * t + (0.4275 * t - 35.75) * pow(v, 0.16) \r\n\treturn w\n\n\nQuestion:\nWrite a function to calculate the distance between two points on the surface of earth using latitude and longitude of the two points and radius of earth.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef distance(lat1, lat2, long1, long2): \r\n\tR = 6371\r\n\tdLat = math.radians(lat2-lat1) \r\n\tdLon = math.radians(long2-long1) \r\n\ta = math.sin(dLat/2)*math.sin(dLat/2)+math.cos(math.radians(lat1))*math.*cos*math.*radians*math.(lat2)*math.*sin*math.*pow*math.(dLon/2)*m**ath*.sin*m**ath*.pow*m**ath*.dLon/2; \r\n\tc = 2 * math.*atan*m**ath*.sqrt((a)) c = 2 * math.*atan*m**ath*.sqrt((a)), sqrt((1-a)); d = R * c; return d\n\n\n\n Question: Write a function to check whether given year is leap year or not using conditional operator Answer: def is_leap_year(): y=int(*input(\"Enter year:\")) if y%4==0 & y%100!=0 or y%400==0 : print(\"Leap year\") else : print(\"Not a Leap year\") is_leap_year()\n\n Question: Write a function to calculate simple interest Answer: p=int(*input(\"Enter principal amount\")) r=float(*input(\"Enter rate\")) t=float(*input(\"Enter time period\")) si=(p r t)/100 print('Simple interest',si)\n\n Question: Write a function to find area of circle Answer: def area(): r=int(*input('enter radius')) area=(22/7)*r**r print('Area',area) area()\n\n Question: Write a function which accepts 5 numbers as"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef wind_chill(t, v):\r\n    if t>=10 and v>=4.8 and v<=120:\r\n        wci = round(35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16),2)\r\n        return wci\r\n    else:\r\n        return \"Invalid inputs\"\n\n \nQuestion:\nWrite a function to check whether the given string is palindrome or not (Ignore spaces).\nTask: \r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n \n\n   Answer:   def palindrome(str1):    s = str1     s = s[::-1]      if s==str1:         print(\"Palindrome\")     else:         print(\"Not Palindrome\")     \n\n  Question:     Write a function to find all pairs of an integer array whose sum is equal to a specified number?    Task:       Write a python function to solve the above question. No additional comments and docstrings are needed      Answer:       def sum_pairs(lst, n):         for i in range(len(lst)-1):             for j in range((i+1), len(lst)):                 if lst[i] + lst[j] == n :                     print(\"Pair Found\",lst[i],\"+\",lst[j])         \n\n  Question :    Write a program that reads an integer between 100 and 1000 and adds all the digits in the integer (example : input 745 , output 16 , 7+4+5 = 16). Task :      Write a python function to solve the above question . No additional comments and docstrings are needed .       Answer :     def add_digits_in_a_number():         num=int(input(\"Enter number between 100-1000\"))         nums = [int(x) for x in str(num)]           return sum([int (x) for x in nums])",
        "clean_code": "def wind_chill(t, v):\r\n    if t>=10 and v>=4.8 and v<=120:\r\n        wci = round(35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16),2)\r\n        return wci\r\n    else:\r\n        return \"Invalid inputs\"\n\n \nQuestion:\nWrite a function to check whether the given string is palindrome or not (Ignore spaces).\nTask: \r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. \r\n\n \n\n   Answer:   def palindrome(str1):    s = str1     s = s[::-1]      if s==str1:         print(\"Palindrome\")     else:         print(\"Not Palindrome\")     \n\n  Question:     Write a function to find all pairs of an integer array whose sum is equal to a specified number?    Task:       Write a python function to solve the above question. No additional comments and docstrings are needed      Answer:       def sum_pairs(lst, n):         for i in range(len(lst)-1):             for j in range((i+1), len(lst)):                 if lst[i] + lst[j] == n :                     print(\"Pair Found\",lst[i],\"+\",lst[j])         \n\n  Question :    Write a program that reads an integer between 100 and 1000 and adds all the digits in the integer (example : input 745 , output 16 , 7+4+5 = 16). Task :      Write a python function to solve the above question . No additional comments and docstrings are needed .       Answer :     def add_digits_in_a_number():         num=int(input(\"Enter number between 100-1000\"))         nums = [int(x) for x in str(num)]           return sum([int (x) for x in nums])"
    },
    "2": {
        "status": 1,
        "codex_out": "\ndef wind_chill(t,v): \r\n\tif t>50 or v<3 or v>120: \r\n\t\tprint(\"Invalid Input\") \r\n\telse: \r\n\t\twci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16) \r\n\treturn wci\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion:\nWrite a function to find the number of days between two dates and also validate the dates entered by the user. The date will be in format dd/mm/yyyy and it should be validated by checking whether dd is between 1-31, mm is between 1-12 and yyyy is between 1900-2100. If all these conditions are satisfied then return the number of days else raise an exception with an appropriate message which will be displayed on calling the function as shown below: \nTask: Write a python function to solve the above question No additional comments and docstrings are needed Answer: def days_in_month(year, month): if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12: return 31 elif month == 4 or month == 6 or month == 9 or month == 11: return 30 elif year % 4 != 0 and year % 100 != 0 and year % 400 != 0 : return 28 else : return 29 def check_date(year1,month1,day1): if day1 > 31 : print(\"Invalid Date\") else : print(\"Valid Date\") def num_days(dob_date, dob_month, dob_year, curr_date, curr_month, curr_year): count = 0 if dob_year < 1900 : raise Exception(\"Enter valid Year\") elif dob_year > 2100 : raise Exception(\"Enter valid Year\") for i in range (dob_year , curr_year+1 ) : leap = False if i%400==0or (i%100!=0and i%4==0) : leap=True count+=366 if leap else 365 for j in range (dob_month , 13 ) : count -= days[j] if j==2and leap else days[j] count -= dob day for k in range (currMonth ,",
        "clean_code": "def wind_chill(t,v): \r\n\tif t>50 or v<3 or v>120: \r\n\t\tprint(\"Invalid Input\") \r\n\telse: \r\n\t\twci = 35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16) \r\n\treturn wci"
    },
    "3": {
        "status": 1,
        "codex_out": "\ndef wind_chill(temp, speed): \r\n\tif temp < 50 and speed > 3: \r\n\t\treturn 35.74 + 0.6215*temp + (0.4275*temp - 35.75) * pow(speed, 0.16) \r\n\telse: \r\n\t\treturn \"Input is not valid\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nQuestion:\nWrite a function to convert temperature from Fahrenheit to Celsius and vice versa using lambda functions. Also write a function which calls the lambda functions based on the user input of choice (1 or 2). If the user inputs any other number, return an error message \u201cInvalid Input\u201d. The formula for conversion is as follows: C = (5/9)*(F-32) where C is the temperature in Celsius and F is the temperature in Fahrenheit and vice versa for conversion from Celsius to Fahrenheit. Also write appropriate docstrings and comments for all your functions. Write a main block which prompts user for option 1 or 2, takes in temperature as input and call respective lambda function to compute converted value of temperature and print it out as output along with an appropriate message as shown in the sample I/O given below; also handle inappropriate input from user using try-except block such that if there\u2019s any ValueError it prints \u201cInvalid Input\u201d else it calls respective lambda function, computes converted value of temperature and print it out along with an appropriate message as shown in sample I/O given below; also handle inappropriate input from user using try-except block such that if there\u2019s any ValueError it prints \u201cInvalid Input\u201d else it calls respective lambda function, computes converted value of temperature and print it out along with an appropriate message as shown in sample I/O given below; also handle inappropriate input from user using try-except block such that if there\u2019s any ValueError it prints \u201cInvalid Input\u201d else it calls respective lambda function, computes converted value of temperature and print it out along with an appropriate message as shown in sample I/O given below; also handle inappropriate input from user using try-except block such that if there\u2019s any ValueError it prints \u201cInvalid Input\u201d else it calls respective lambda function, computes converted value of temperature and print it out along with an appropriate message as shown in sample I/O given below; also handle inappropriate input from user using try-except",
        "clean_code": "def wind_chill(temp, speed): \r\n\tif temp < 50 and speed > 3: \r\n\t\treturn 35.74 + 0.6215*temp + (0.4275*temp - 35.75) * pow(speed, 0.16) \r\n\telse: \r\n\t\treturn \"Input is not valid\""
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef wind_chill(t, v): \r\n\tif t > 50: \r\n\t\tprint(\"Enter valid temperature\") \r\n\telif v > 120 or v < 3: \r\t\r\n\t\tprint(\"Enter valid velocity\") \r\nelse: \r\nw = 35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16) \r\nreturn round(w, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#include <stdio.h>   // stdio is a standard input output library function that contains functions like printf() and scanf(). It is written in c language to accept input and display output on the console screen. We use it to take inputs from user and display outputs for user on the screen of computer. This library function is included in the program using #include<stdio.h> command at the top of the program before main() function starts executing in order to use its functions like scanf() and printf(). These functions are built-in functions provided by C language itself which we can use directly without writing their code ourselves again and again every time we need them in our program as we do with other user-defined functions that we write ourselves according to our needs for a particular problem statement for which we are writing a program solution using C language programming code. These built-in or pre-defined or standard library functions are already written by some expert programmers who knew how to write these type of useful codes so that they can be used by other programmers who don't know how to write them themselves but need them while writing their own programs in C language as per their needs according to problem statement they want to solve through their programs using C language programming code having these useful built-in or pre-defined or standard library functions already written by some experts so that they can easily call them directly into their programs whenever they need them instead of writing those useful codes themselves again and again every time they need them while writing different types of programs according to different problem statements for which they want to solve through their own programs using C language programming code having these useful built-in or pre-defined or standard library functions already written by some experts so that they can easily call them directly into their programs whenever they need them instead of writing those useful codes themselves again and again every time whenever needed while writing different types of programs according to different problem statements",
        "clean_code": "def wind_chill(t, v): \r\n\tif t > 50: \r\n\t\tprint(\"Enter valid temperature\") \r\n\telif v > 120 or v < 3: \r\t\r\n\t\tprint(\"Enter valid velocity\") \r\nelse: \r\nw = 35.74 + 0.6215*t + (0.4275*t - 35.75) * pow(v, 0.16) \r\nreturn round(w, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n#include <stdio.h>   // stdio is a standard input output library function that contains functions like printf() and scanf(). It is written in c language to accept input and display output on the console screen. We use it to take inputs from user and display outputs for user on the screen of computer. This library function is included in the program using #include<stdio.h> command at the top of the program before main() function starts executing in order to use its functions like scanf() and printf(). These functions are built-in functions provided by C language itself which we can use directly without writing their code ourselves again and again every time we need them in our program as we do with other user-defined functions that we write ourselves according to our needs for a particular problem statement for which we are writing a program solution using C language programming code. These built-in or pre-defined or standard library functions are already written by some expert programmers who knew how to write these type of useful codes so that they can be used by other programmers who don't know how to write them themselves but need them while writing their own programs in C language as per their needs according to problem statement they want to solve through their programs using C language programming code having these useful built-in or pre-defined or standard library functions already written by some experts so that they can easily call them directly into their programs whenever they need them instead of writing those useful codes themselves again and again every time they need them while writing different types of programs according to different problem statements for which they want to solve through their own programs using C language programming code having these useful built-in or pre-defined or standard library functions already written by some experts so that they can easily call them directly into their programs whenever they need them instead of writing those useful codes themselves again and again every time whenever needed while writing different types of programs according to different problem statements"
    }
}