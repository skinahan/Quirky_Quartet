{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\n\nQuestion:\nWrite a function to multiply two lists using map and lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 1,
    "0": {
        "status": 2,
        "codex_out": "\ndef mul_list(l1, l2): \r\n\treturn list(map(lambda x, y:x*y, l1, l2)) \n\nQuestion:\nWrite a function to find the nth Fibonacci number using lambda and map functions.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n     Question 1 : Write a python program to print the following string in a specific format (see the output). Go to the editor Sample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output : Twinkle , twinkle , little star , How I wonder what you are ! Up above the world so high , Like a diamond in the sky . Twinkle , twinkle , little star , How I wonder what you are Answer : print(\"Twinkle , twinkle , little star ,\") print(\"How I wonder what you are!\") print(\"Up above the world so high,\") print(\"Like a diamond in the sky.\") print(\"Twinkle , twinkle , little star ,\") print(\"How I wonder what you are\") Question 2 : Write a Python program which accepts user's first and last name and prints them in reverse order with space between them. Go to editor Sample Output: Input your First Name : Inanc Input your Last Name : Hacisalihoglu Hello Inanc Hacisalihoglu You just delved into python Answer : fname = input('Input your First Name') lname = input('Input your Last Name') full_name = fname + ' ' + lname reversed_full_name = full_name[::-1] #reversed(full_name) # [::-1] is used for reversing string or list elements #print('Hello {} {}! You just delved into python.'.format(fname[::-1],lname[::-1])) #print('Hello {} {}! You just delved into python.'.format(reversed(fname),reversed(lname))) print('Hello', reversed_full_name,'You just delved into python.'",
        "clean_code": "def mul_list(l1, l2): \r\n\treturn list(map(lambda x, y:x*y, l1, l2)) \n\nQuestion:\nWrite a function to find the nth Fibonacci number using lambda and map functions.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n \r\n\n     Question 1 : Write a python program to print the following string in a specific format (see the output). Go to the editor Sample String : \"Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are\" Output : Twinkle , twinkle , little star , How I wonder what you are ! Up above the world so high , Like a diamond in the sky . Twinkle , twinkle , little star , How I wonder what you are Answer : print(\"Twinkle , twinkle , little star ,\") print(\"How I wonder what you are!\") print(\"Up above the world so high,\") print(\"Like a diamond in the sky.\") print(\"Twinkle , twinkle , little star ,\") print(\"How I wonder what you are\") Question 2 : Write a Python program which accepts user's first and last name and prints them in reverse order with space between them. Go to editor Sample Output: Input your First Name : Inanc Input your Last Name : Hacisalihoglu Hello Inanc Hacisalihoglu You just delved into python Answer : fname = input('Input your First Name') lname = input('Input your Last Name') full_name = fname + ' ' + lname reversed_full_name = full_name[::-1] #reversed(full_name) # [::-1] is used for reversing string or list elements #print('Hello {} {}! You just delved into python.'.format(fname[::-1],lname[::-1])) #print('Hello {} {}! You just delved into python.'.format(reversed(fname),reversed(lname))) print('Hello', reversed_full_name,'You just delved into python.'"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef multiply(n):\r\n  return list(map(lambda x: x*n, [1, 2, 3, 4]))\n\nQuestion:\nWrite a function to create a dictionary from a string of comma separated words. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef create_dict(str):\r\n    str_list = str.split(',')\r\n    res_dct = {str_list[i]:str_list[i+1] for i in range(0, len(str_list), 2)}\r\n    return res_dct\n\n  */",
        "clean_code": "def multiply(n):\r\n  return list(map(lambda x: x*n, [1, 2, 3, 4]))\n\nQuestion:\nWrite a function to create a dictionary from a string of comma separated words. \nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef create_dict(str):\r\n    str_list = str.split(',')\r\n    res_dct = {str_list[i]:str_list[i+1] for i in range(0, len(str_list), 2)}\r\n    return res_dct\n\n  */"
    },
    "2": {
        "status": 0,
        "codex_out": "\ndef multiply_list(l1, l2): \r\n\tresult = map(lambda x, y: x * y, l1, l2) \r\n\treturn list(result)\n# Print the multiplied list \r\n\n\nQuestion:\nWrite a function to find the common elements from two lists. Use lambda function.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\ndef common_elements(l1, l2): \r\n\tresult = filter(lambda x : x in l1 ,l2) \r\n\treturn list(result)\n\n\n\n\n\n\n\n\n\n\n\n\n\n  #end of code cell 1 - write your code in next cell by clicking on it and press run button to execute it...![alt text](https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwjRx6zJw-LhAhWKfisKHZW8Aj4QjRx6BAgBEAU&url=https%3A%2F%2Fwww.slideshare.net%2Fmariacristinazuppa%2Fpython-basics-for-data-science&psig=AOvVaw0MZ9tYQb7nE5Dnk8BVyGdJ&ust=1552588352919452) **code cell 2** - click here and write your code and press run button to execute it...![alt text](https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwiT9NXIweLhAhXoC30KHfzsCdgQMwhFKAAwAA &url = https % 3A % 2F % 2Fi0 . wp . com % 2Fmydatahack % 2Fwp - content % 2Fuploads % 2Fsites % 2Fi3a3qbklsd20rqeoqpzvw5y4t4m4twilfxbk9pv7 . jpg &psig",
        "clean_code": "def multiply_list(l1, l2): \r\n\tresult = map(lambda x, y: x * y, l1, l2) \r\n\treturn list(result)\n# Print the multiplied list"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef multiply_list(l1, l2):\r\n  return list(map(lambda x, y: x*y, l1, l2))\n \n \nQuestion:\nWrite a function to find the sum of all the elements in a given list using recursion.\r\n\n\tTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\tAnswer:\r\n\n\tdef sum_of_list(num_list): \r\n\tif len(num_list) == 1: \r\n\treturn num_list[0] \r\n\telse: \r\n\treturn num_list[0] + sum_of_list(num_list[1:]) \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Question : Write a Python program to find the longest word in a text file with at least 10 characters. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : def longestword(): words = open('words.txt', 'r') wordlen = [] for i in words: if len(i) >= 10: wordlen.append((len(i), i)) wordlen.sort() return wordlen[-1][1] print (longestword()) Question : Write a Python program to check whether an alphabet is vowel or consonant using if...elif...else statement . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def alphabetchecker (alphabet): vowels = 'aeiou' consonants = 'bcdfghjklmnpqrstvwxyz' if alphabet in vowels or alphabet == 'y': print (\"This letter is vowel\") elif alphabet in consonants or alphabet == 'y': print (\"This letter is consonant\") else: print (\"This is not an English letter\") Question : Write a Python program that accepts two integers from user and prints their GCD (Greatest Common Divisor) using math module . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import math def gcdcalculator (a , b): gcdcalculator = math.gcd (a , b) return gcdcalculator Question : Given two lists of numbers - [10, 20, 30",
        "clean_code": "def multiply_list(l1, l2):\r\n  return list(map(lambda x, y: x*y, l1, l2))\n \n \nQuestion:\nWrite a function to find the sum of all the elements in a given list using recursion.\r\n\n\tTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\n\n\tAnswer:\r\n\n\tdef sum_of_list(num_list): \r\n\tif len(num_list) == 1: \r\n\treturn num_list[0] \r\n\telse: \r\n\treturn num_list[0] + sum_of_list(num_list[1:]) \n\n\n\n\n\n\n\n\n\n\n\n\n\n    Question : Write a Python program to find the longest word in a text file with at least 10 characters. Task : Write a python function to solve the above question. No additional comments and docstrings are needed. Answer : def longestword(): words = open('words.txt', 'r') wordlen = [] for i in words: if len(i) >= 10: wordlen.append((len(i), i)) wordlen.sort() return wordlen[-1][1] print (longestword()) Question : Write a Python program to check whether an alphabet is vowel or consonant using if...elif...else statement . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : def alphabetchecker (alphabet): vowels = 'aeiou' consonants = 'bcdfghjklmnpqrstvwxyz' if alphabet in vowels or alphabet == 'y': print (\"This letter is vowel\") elif alphabet in consonants or alphabet == 'y': print (\"This letter is consonant\") else: print (\"This is not an English letter\") Question : Write a Python program that accepts two integers from user and prints their GCD (Greatest Common Divisor) using math module . Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Answer : import math def gcdcalculator (a , b): gcdcalculator = math.gcd (a , b) return gcdcalculator Question : Given two lists of numbers - [10, 20, 30"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef multiply_lists(list1, list2):\r\n  res = map(lambda x, y: x*y, list1, list2)\r\n  return (res) \n\n\nQuestion:\nWrite a function to find the minimum number of jumps to reach the end of a given array. The function should return -1 if it is not possible to jump to the end of the array. The elements in the array can only be 0's or 1's and atleast one 1 is present in the array. The maximum length of an input array is 100000.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def min_jumps(arr): \r\n\tn = len(arr) \r\n\tjumps = [0 for i in range(n)]  \r\n\tif (n == 0) or (arr[0] == 0): \r\n\t\treturn float('inf')  \r\n\tjumps[0] = 0  \r\n\tfor i in range(1, n):   \r\n\t\tjumps[i] = float('inf')  \r\n\tfor i in range(1, n):   \r\n\tfor j in range(i):    if (i <= j + arr[j]) and (jumps[j] != float('inf')):     jumps[i] = min(jumps[i], jumps[j] + 1);     break    if jumps[n-1] != float('inf'):     return jumps[n-1];    else:     return -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included). Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def divisible_by_7(): nums=[] for num in range (2000,3201): if num%7==0 and num%5!=0 : nums.append(str(num)) print(\"The required numbers are\",','.join([str(num) for num in nums ])) Question : Write a function to generate N random integers between specified minimum value K and maximum value M using Python random module functions randint(). Task :",
        "clean_code": "def multiply_lists(list1, list2):\r\n  res = map(lambda x, y: x*y, list1, list2)\r\n  return (res) \n\n\nQuestion:\nWrite a function to find the minimum number of jumps to reach the end of a given array. The function should return -1 if it is not possible to jump to the end of the array. The elements in the array can only be 0's or 1's and atleast one 1 is present in the array. The maximum length of an input array is 100000.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\r\n\n def min_jumps(arr): \r\n\tn = len(arr) \r\n\tjumps = [0 for i in range(n)]  \r\n\tif (n == 0) or (arr[0] == 0): \r\n\t\treturn float('inf')  \r\n\tjumps[0] = 0  \r\n\tfor i in range(1, n):   \r\n\t\tjumps[i] = float('inf')  \r\n\tfor i in range(1, n):   \r\n\tfor j in range(i):    if (i <= j + arr[j]) and (jumps[j] != float('inf')):     jumps[i] = min(jumps[i], jumps[j] + 1);     break    if jumps[n-1] != float('inf'):     return jumps[n-1];    else:     return -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a function to find all such numbers which are divisible by 7 but are not a multiple of 5 between 2000 and 3200 (both included). Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def divisible_by_7(): nums=[] for num in range (2000,3201): if num%7==0 and num%5!=0 : nums.append(str(num)) print(\"The required numbers are\",','.join([str(num) for num in nums ])) Question : Write a function to generate N random integers between specified minimum value K and maximum value M using Python random module functions randint(). Task :"
    }
}