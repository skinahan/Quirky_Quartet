{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\n\nQuestion:\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAnswer:",
    "success": 0,
    "0": {
        "status": 1,
        "codex_out": "\ndef cumulative_sum(tup_list):\r\n  lst=[]\r\n  tup=()\r\n  for i in tup_list:\r\n    for j in i:\r\n      lst.append(j)\r\n  for k in range(len(lst)):\r\n    sum=0  \r\n    for m in range(k+1):  \r\n      sum+=lst[m]  \r\n    tup+=(sum,)  \t\t\t\t\t\t#tuple concatenation using + operator.    \r\n\n  return tup\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question: Write a function to calculate the mean of the numbers present in the given list. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def mean (nums): if len(nums) == 0: return 0 else : return sum(nums)/len(nums) Question: Write a function to find the longest word from a given list of words using lambda, map and reduce functions Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: from functools import reduce def longestWord (words): return reduce((lambda x,y : y if len (y) > len (x) else x),words) Question: Write a python program to generate all permutations of a list in Python Task :Write a python function to solve the above question No additional comments and docstrings are needed Answer : def permutation (lst): if len (lst) == 0 : return [] if len (lst) == 1 : return [lst] l = [] for i in range(len (lst)) : m = lst[i] remLst = lst[:i] + lst[i+1:] for p in permutation (remLst): l . append ([m] + p ) return l Question Write an algorithm that takes as input integers n and k, where n is between 1 and 10^4 inclusive, calculates n! / k! using only O(log n ) space excluding input size Task -Write an algorithm that takes as input integers n and k, where n is between 1 and 10^4 inclusive, calculates n! / k! using only O(log n ) space excluding input size Answer -def fact",
        "clean_code": "def cumulative_sum(tup_list):\r\n  lst=[]\r\n  tup=()\r\n  for i in tup_list:\r\n    for j in i:\r\n      lst.append(j)\r\n  for k in range(len(lst)):\r\n    sum=0  \r\n    for m in range(k+1):  \r\n      sum+=lst[m]  \r\n    tup+=(sum,)  \t\t\t\t\t\t#tuple concatenation using + operator.    \r\n\n  return tup"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef cumulative_sum(tup):\r\n  res = []\r\n  s = 0\r\n  for i in tup:\r\n    s += i\r\n    res.append(s)\r\n  return tuple(res)\n\n  Question:\rWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.",
        "clean_code": "def cumulative_sum(tup):\r\n  res = []\r\n  s = 0\r\n  for i in tup:\r\n    s += i\r\n    res.append(s)\r\n  return tuple(res)\n\n  Question:\rWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Question:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed."
    },
    "2": {
        "status": 1,
        "codex_out": "\ndef cumulative_sum(test_tup):\r\n  result = []\r\n  a = 0\r\n  for i in test_tup:\r\n    a += i\r\n    result.append(a)\r\n  return tuple(result)\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nQuestion:\nWrite a function to find the mean of the given list of numbers using recursion. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def mean(num_list): if len(num_list) == 1: return num_list[0] else: return (num_list[0] + mean(num_list[1:])) / len(num_list) Question: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board. Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def countWaysUtil(n, m): if n <= 1 or m <= 1 then return 1 elif n < m then return countWaysUtil(n, n) else return countWaysUtil(n, m - 1) + countWaysUtil (n - m, m) def countWays (n): return countWaysUtil (n, n); Question: Write a function to find all possible combinations from two lists in which elements are in sorted order as shown below Input : List1 = [1, 2] List2 = [3, 4] Output : [(1, 3), (2, 3), (1, 4), (2, 4)] Task : Write a python function to solve the above question. No additional comments and docstrings are needed Question Answer def combinationOfTwoLists(): listOne = [10 , 20 ,30 ,40 ,50]; listTwo = [5 , 10 ,15]; resultList = []; for i in range(len(listOne)) : for j in range (len((listTwo))) : tempList=[]; tempList=(([int((str((i+j)))+str((i+j))))]) resultList=resultList+tempList; print(\"Combination Of Two Lists:\"); print(\"[\"); for i in range ((len((resultList)))) : print(\"[\"+(str)(resultList[i])+\"]\"); print(\"",
        "clean_code": "def cumulative_sum(test_tup):\r\n  result = []\r\n  a = 0\r\n  for i in test_tup:\r\n    a += i\r\n    result.append(a)\r\n  return tuple(result)"
    },
    "3": {
        "status": 1,
        "codex_out": "\ndef cumulative_sum(test_tup):\r\n  res = [] \r\n  for i in range(len(test_tup)): \r\n    res.append(sum(test_tup[0:i+1]))  \r\n  return tuple(res)\n\n\nQuestion:\nWrite a function to find the sum of all the values that are present in the given dictionary. The dictionary can contain nested dictionaries. If a value is an integer, add it to the sum, if it is another dictionary recursively call the same method again with this new dictionary as input. Ignore all other data types like list or string. Return 0 if any of the parameter is not a dictionary or an empty dictionary. If any of the key value pair contains a list or string return -1 as output. Also ignore any key which starts with underscore(_). Sample Input\tExpected Output {'a': 1, 'b': {'c': 2}, 'd': [1,2]}\t3 {'a': 1}\t1 {'a': 1, 'b': {'c': 2}, 'd': [1,2], 'e' : \"sample\"}\t-1 {}\t0 None\t0 \n\n Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Answer: def get_sum(input_dict): result = 0 if type(input_dict) == dict else 0 for k,v in input_dict.items(): if k[0] == \"_\": continue elif type(v) == int: result += v elif type(v) == dict: result += get_sum(v) else: return -1 return result Question: Write a function to check whether two strings are isomorphic or not without using any built-in methods and functions except len() method? Task: Write a python function to solve the above question. No additional comments and docstrings are needed Answer: def checkIsomorphicStringsWithoutBuiltInFunctions (str1, str2): lenStrings = len (str1); if lenStrings != len (str2): return False charsMap = {} mappedChars = set () for i in range (lenStrings): charAtIthIndexOfStringOne = str1 [i]; charAtIthIndexOfStringTwo = str2 [i]; mappedCharForCurrentCharOfStringOne",
        "clean_code": "def cumulative_sum(test_tup):\r\n  res = [] \r\n  for i in range(len(test_tup)): \r\n    res.append(sum(test_tup[0:i+1]))  \r\n  return tuple(res)"
    },
    "4": {
        "status": 1,
        "codex_out": "\ndef cumulative_sum(test_tup):\n  res = []\r\n  total = 0\r\n  for i in range(len(test_tup)):\r\n    total += test_tup[i]\r\n    res.append(total)\r\n  return tuple(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nfrom IPython.display import HTML, display\r\nimport tabulate\r\ntable = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],[\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\r\ndisplay(HTML(tabulate.tabulate(table, tablefmt='html')))",
        "clean_code": "def cumulative_sum(test_tup):\n  res = []\r\n  total = 0\r\n  for i in range(len(test_tup)):\r\n    total += test_tup[i]\r\n    res.append(total)\r\n  return tuple(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nfrom IPython.display import HTML, display\r\nimport tabulate\r\ntable = [[\"Sun\",696000,1989100000],[\"Earth\",6371,5973.6],[\"Moon\",1737,73.5],[\"Mars\",3390,641.85]]\r\ndisplay(HTML(tabulate.tabulate(table, tablefmt='html')))"
    }
}