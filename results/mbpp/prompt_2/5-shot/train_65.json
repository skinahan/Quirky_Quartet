{
    "query": "Question:\nWrite a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:\nR = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]\n\nQuestion:\nWrite a function to find the similar elements from the given two tuple lists.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:\ndef similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) \n\nQuestion:\nWrite a python function to identify non-prime numbers.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:\nimport math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result\n\nQuestion:\nWrite a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:\nimport heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:\ndef count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] \n\n\nQuestion:\nWrite a function to count occurrence of a character in a string.\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\nAdditional info:\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\nAnswer:",
    "success": 1,
    "0": {
        "status": 0,
        "codex_out": "\ndef count_char(str, char):\r\n  count = 0\r\n  for c in str:\r\n    if c == char:\r\n      count += 1\r\n  return count\n\n\nQuestion:\nWrite a function to find the frequency of each word in a given string. Sort the words according to their frequencies. Return the words with more than one occurrences. If there are no such words return -1. Use dictionaries and sets to solve this problem. Also sort the dictionary items according to their frequencies. If two elements have same frequency, sort them according to their position in the original sentence (without using lambda). For example, Input : \"hello world and practice makes perfect and hello world again\", K = 2 Output : ['hello', 'world'] Input : \"abc abc abc d e f\", K = 1 Output : [\"abc\"] Input : \"apple apple\", K = 3 Output : [] Note that input string may contain punctuation characters (commas, full stops etc.) which should be ignored while analyzing the sentence for word frequencies. You can use any number of built-in functions from Python Standard Library except defaultdict or Counter module from collections library . You can assume that all inputs are either valid or None type and all outputs will be list type where applicable . Also note that input strings are case-insensitive . That is, if user enters a string \"Hello\" or \"hello\", you can consider it as same word . All words should be considered as lowercase for this problem . Ordering of output does not matter for this question . For example, if your function returns [\"practice\", \"makes\"], it will be accepted but if your function returns [\"makes\", \"practice\"] , it will not be accepted since ordering is different than expected output . Similarly, if your function returns [\"hello\", \"world\"] or [\"world\",\"hello\"] , both answers will be accepted since ordering does not matter here as well . As mentioned earlier, do not use defaultdict or Counter module from collections library for this question and do not use lambda expressions as well because they might make your code run slower due to heavy usage of built-in functions/operations which is against our expectation of solving problems efficiently using data structures and algorithms taught in class so far . Task Write python3 code only here Write your own test cases here Task Write python3 code only here Write your own test cases here Task Write python3 code only here Write your own test cases here Task Write python3 code only here",
        "clean_code": "def count_char(str, char):\r\n  count = 0\r\n  for c in str:\r\n    if c == char:\r\n      count += 1\r\n  return count"
    },
    "1": {
        "status": 2,
        "codex_out": "\ndef count_char(s, c):\r\n  count = 0\r\n  for ch in s:\r\n    if ch == c:\r\n      count += 1\r\n  return count\n\n  Question:\nWrite a function to find the longest palindromic substring from the given string. For example, if the given string is \u201cforgeeksskeegfor\u201d, then output should be \u201cgeeksskeeg\u201d. And if the given string is \u201cabaab\u201d, then output should be \u201cbaab\u201d. And if the given string is \u201cabacdfgdcaba\u201d, then output should be \u201caba\u201d. And if the given string is \"abc\", then output should be \"a\". And if the given string is \"cbbd\", then output should be \"bb\".\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible. Answer: def longestPalSubstr(string): maxLength = 1 start = 0 length = len(string) low = high = 0 for i in range(1, length): low = i - 1 high = i while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength=high-low+1; #expand around center (odd length) while (low>0 and high<length-1)and (string[low-1]==string[high+1]): #expand around center (even length) start=low-1;maxLength+=2;low=low-1;high=high+1 print(\"Longest palindrome substring is:\"); print(string[start : start + maxLength]) return maxLength\n\n\n\n\n\n  Question: Write a function to find all elements that appear more than n/3 times in an array of size n where n>3 . Task:",
        "clean_code": "def count_char(s, c):\r\n  count = 0\r\n  for ch in s:\r\n    if ch == c:\r\n      count += 1\r\n  return count\n\n  Question:\nWrite a function to find the longest palindromic substring from the given string. For example, if the given string is \u201cforgeeksskeegfor\u201d, then output should be \u201cgeeksskeeg\u201d. And if the given string is \u201cabaab\u201d, then output should be \u201cbaab\u201d. And if the given string is \u201cabacdfgdcaba\u201d, then output should be \u201caba\u201d. And if the given string is \"abc\", then output should be \"a\". And if the given string is \"cbbd\", then output should be \"bb\".\nTask:\nWrite a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible. Answer: def longestPalSubstr(string): maxLength = 1 start = 0 length = len(string) low = high = 0 for i in range(1, length): low = i - 1 high = i while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength=high-low+1; #expand around center (odd length) while (low>0 and high<length-1)and (string[low-1]==string[high+1]): #expand around center (even length) start=low-1;maxLength+=2;low=low-1;high=high+1 print(\"Longest palindrome substring is:\"); print(string[start : start + maxLength]) return maxLength\n\n\n\n\n\n  Question: Write a function to find all elements that appear more than n/3 times in an array of size n where n>3 . Task:"
    },
    "2": {
        "status": 2,
        "codex_out": "\ndef count_occurrences(text, ch):\r\n  count = 0\r\n  for c in text:\r\n    if c == ch:\r\n      count += 1\r\n  return count\n\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\nAdditional info:\r\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\n\n\n\n\n\n\n\n\n\n \nAnswer:   def count_ways(n):  A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]\" : \"Question:\\r\\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\\r\\nTask:\\r\\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\\r\\nAdditional info:\\r\\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\", \"Question : Write a function to find all elements that appear more than once in an array of integers where every integer is between 0 and n-1 inclusive? \\r\\nTask : Write a python function that returns all duplicate elements as list.\" : \"Question:\\r\\nWrite a function to find all elements that appear more than once in an array of integers where every integer is between 0 and n-1 inclusive? \\r\\ntask:\\r\\nWrite a python function that returns all duplicate elements as list.\", \"Question : Write a Python program which accepts two strings from user and check if they are anagrams or not? Task : Write a Python program which accepts two strings from user and check if they",
        "clean_code": "def count_occurrences(text, ch):\r\n  count = 0\r\n  for c in text:\r\n    if c == ch:\r\n      count += 1\r\n  return count\n\n\nQuestion:\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\r\nAdditional info:\r\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\n\n\n\n\n\n\n\n\n\n \nAnswer:   def count_ways(n):  A = [0] * (n + 1) B = [0] * (n + 1) A[0] = 1 A[1] = 0 B[0] = 0 B[1] = 1 for i in range(2, n+1): A[i] = A[i - 2] + 2 * B[i - 1] B[i] = A[i - 1] + B[i - 2] return A[n]\" : \"Question:\\r\\nWrite a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\\r\\nTask:\\r\\nWrite a python function to solve the above question. No additional comments and docstrings are needed.\\r\\nAdditional info:\\r\\nBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.\", \"Question : Write a function to find all elements that appear more than once in an array of integers where every integer is between 0 and n-1 inclusive? \\r\\nTask : Write a python function that returns all duplicate elements as list.\" : \"Question:\\r\\nWrite a function to find all elements that appear more than once in an array of integers where every integer is between 0 and n-1 inclusive? \\r\\ntask:\\r\\nWrite a python function that returns all duplicate elements as list.\", \"Question : Write a Python program which accepts two strings from user and check if they are anagrams or not? Task : Write a Python program which accepts two strings from user and check if they"
    },
    "3": {
        "status": 2,
        "codex_out": "\ndef count_occurences_char(string, char):\r\n  count = 0\r\n  for i in string:\r\n    if i == char:\r\n      count += 1\r\n  return (count)\n\n\n\n\nQuestion:\nWrite a function to find the longest substring with k unique characters in a given string. The length of the substring must be greater than or equal to k. Return 0 if there is no such substring. For example, for string \"aabbcc\", there are following substrings with exactly 2 unique characters- {\"aabb\", \"bbcc\"}, {\"aabb\", \"bbcc\"} and {\"aabb\", \"bbcc\"} . So the answer is 5 for k = 2, 1 for k = 1 and 0 for k = 3. Return 0 if no such substring exists.  \rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.  \rAdditional info:  \rBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.  \n\n\n\n\n\n\n\n\n\n  Answer:   def longest_substr_k_distinct(inputStr, k):     maxLength = 0     windowStart = 0     charFrequency = {}     # Try to extend the range [windowStart, windowEnd]     for windowEnd in range(len(inputStr)):       rightChar = inputStr[windowEnd]       if rightChar not in charFrequency:         charFrequency[rightChar] = 0       charFrequency[rightChar] += 1       # Shrink the sliding window, until we are left with 'k' distinct characters in the frequency map      while len(charFrequency) > k:         leftChar = inputStr[windowStart]         charFrequency[leftChar] -= 1         if charFrequency[leftChar] == 0:           del charFrequency[leftChar]         windowStart += 1       # Remember the maximum length so far      maxLength = max(maxLength, windowEnd-windowStart + 1)     return maxLength    Question 3 : Write a function to find all pairs of elements from two lists that sum up to 10 (in any order). Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional info : Break down into",
        "clean_code": "def count_occurences_char(string, char):\r\n  count = 0\r\n  for i in string:\r\n    if i == char:\r\n      count += 1\r\n  return (count)\n\n\n\n\nQuestion:\nWrite a function to find the longest substring with k unique characters in a given string. The length of the substring must be greater than or equal to k. Return 0 if there is no such substring. For example, for string \"aabbcc\", there are following substrings with exactly 2 unique characters- {\"aabb\", \"bbcc\"}, {\"aabb\", \"bbcc\"} and {\"aabb\", \"bbcc\"} . So the answer is 5 for k = 2, 1 for k = 1 and 0 for k = 3. Return 0 if no such substring exists.  \rTask:\rWrite a python function to solve the above question. No additional comments and docstrings are needed.  \rAdditional info:  \rBreak the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible.  \n\n\n\n\n\n\n\n\n\n  Answer:   def longest_substr_k_distinct(inputStr, k):     maxLength = 0     windowStart = 0     charFrequency = {}     # Try to extend the range [windowStart, windowEnd]     for windowEnd in range(len(inputStr)):       rightChar = inputStr[windowEnd]       if rightChar not in charFrequency:         charFrequency[rightChar] = 0       charFrequency[rightChar] += 1       # Shrink the sliding window, until we are left with 'k' distinct characters in the frequency map      while len(charFrequency) > k:         leftChar = inputStr[windowStart]         charFrequency[leftChar] -= 1         if charFrequency[leftChar] == 0:           del charFrequency[leftChar]         windowStart += 1       # Remember the maximum length so far      maxLength = max(maxLength, windowEnd-windowStart + 1)     return maxLength    Question 3 : Write a function to find all pairs of elements from two lists that sum up to 10 (in any order). Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional info : Break down into"
    },
    "4": {
        "status": 2,
        "codex_out": "\ndef count_occurrence(string, char):\r\n  occurrence = 0\r\n  for i in string:\r\n    if i == char:\r\n      occurrence += 1\r\n  return occurrence\n\n\n\n  Question:\nWrite a function to print the given pattern.\r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible. Answer: def print_pattern(n): for i in range(1, n+1): for j in range(i): print(\"*\", end=\"\") print() for k in range(n-1, 0, -1): for l in range(k): print(\"*\", end=\"\") print()\n\n\n\n  Question: Write a python function to find all pairs of numbers whose sum is equal to a given number? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info : Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible Answer : def find_pairs(num_list, num) : result = [] l = len(num_list) for i in range (0 , l-1 ) : first = num_list[i] second = num - first if second in num_list[i+1:] : result .append((first , second)) return result \n\n\n\n Question : Write a python function that takes two lists and returns True if they have at least one common member? Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional info : Break the problem down into smaller pieces . Sorting the input might help you create an efficient solution , use vectorised operations when possible . Apply recursion where possible Answer : def check_common ( list1 , list2 ) : set1 = set ( list1 ) set2 = set ( list2 ) if len (set1 & set2) > 0 return True else return False  \n\n\n\n Question : Write a python function that takes two lists as arguments and returns all common elements between them ? Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional",
        "clean_code": "def count_occurrence(string, char):\r\n  occurrence = 0\r\n  for i in string:\r\n    if i == char:\r\n      occurrence += 1\r\n  return occurrence\n\n\n\n  Question:\nWrite a function to print the given pattern.\r\nTask:\r\nWrite a python function to solve the above question. No additional comments and docstrings are needed. Additional info: Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible. Answer: def print_pattern(n): for i in range(1, n+1): for j in range(i): print(\"*\", end=\"\") print() for k in range(n-1, 0, -1): for l in range(k): print(\"*\", end=\"\") print()\n\n\n\n  Question: Write a python function to find all pairs of numbers whose sum is equal to a given number? Task: Write a python function to solve the above question. No additional comments and docstrings are needed. Additional info : Break the problem down into smaller pieces. Sorting the input might help you create an efficient solution, use vectorised operations when possible. Apply recursion where possible Answer : def find_pairs(num_list, num) : result = [] l = len(num_list) for i in range (0 , l-1 ) : first = num_list[i] second = num - first if second in num_list[i+1:] : result .append((first , second)) return result \n\n\n\n Question : Write a python function that takes two lists and returns True if they have at least one common member? Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional info : Break the problem down into smaller pieces . Sorting the input might help you create an efficient solution , use vectorised operations when possible . Apply recursion where possible Answer : def check_common ( list1 , list2 ) : set1 = set ( list1 ) set2 = set ( list2 ) if len (set1 & set2) > 0 return True else return False  \n\n\n\n Question : Write a python function that takes two lists as arguments and returns all common elements between them ? Task : Write a python function to solve the above question . No additional comments and docstrings are needed . Additional"
    }
}